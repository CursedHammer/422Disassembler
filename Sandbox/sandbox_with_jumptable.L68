00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/13/2016 11:17:44 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001   ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100    ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100    ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100    ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100    ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101       ; 0000 0110 0000 0101 = ADDI.B D5, D7
00001000                            23  *example EQU     %0000011001000101       ; 0000 0110 0100 0101 = ADDI.W D5, D7
00001000                            24  *example EQU     %0000011010000101       ; 0000 0110 1000 0101 = ADDI.L D5, D7
00001000                            25  *example EQU     %0100100111010101      ; 0100 1001 1101 0101 = LEA D5, (A5)
00001000                            26  *example EQU     %0100111001110101  ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111  ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111  ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111  ; CLR.W  = 0100 0010 0100 0111
00001000  =00007EFF                 30  example EQU     %0111111011111111   ;   MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110  ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  
00001000  =0000000C                 33  shift   EQU     12                  ; Shift 12 bits 
00001000                            34  
00001000                            35  * Program starts here
00001000                            36  
00001000  4FF8 7000                 37          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E             38          LEA     table,A0            ; Index into the table
0000100A  4280                      39          CLR.L   D0                  ; Zero it
0000100C  303C 7EFF                 40          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                 41          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                      42          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                            43                                      ; and the rest are zeroed out)
00001016  C0FC 0006                 44          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                 45          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                            46  
0000101E  4EF9 0000107E             47  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084             48          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090             49          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096             50          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C             51          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS
0000103C  4EF9 000010A8             52          JMP     code0101
00001042  4EF9 000010AC             53          JMP     code0110
00001048  4EF9 000010B0             54          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010B6             55          JMP     code1000
00001054  4EF9 000010BA             56          JMP     code1001
0000105A  4EF9 000010BE             57          JMP     code1010
00001060  4EF9 000010C2             58          JMP     code1011
00001066  4EF9 000010C6             59          JMP     code1100
0000106C  4EF9 000010CA             60          JMP     code1101
00001072  4EF9 000010CE             61          JMP     code1110
00001078  4EF9 000010D2             62          JMP     code1111
0000107E                            63         
0000107E                            64  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                            65  
0000107E  4EB9 00001362             66  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 0000166E             67  code0001 JSR   ISMOVEB
0000108A  4EB9 000016C6             68           JSR   DONE
00001090  4EB9 000013BC             69  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 00001470             70  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 0000127C             71  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 000016C6             72           JSR    DONE
000010A8  4E72 2700                 73  code0101 STOP  #$2700
000010AC  4E72 2700                 74  code0110 STOP  #$2700
000010B0  4EB9 00001524             75  code0111 JSR    ISMOVEQL
000010B6  4E72 2700                 76  code1000 STOP  #$2700
000010BA  4E72 2700                 77  code1001 STOP  #$2700
000010BE  4E72 2700                 78  code1010 STOP  #$2700
000010C2  4E72 2700                 79  code1011 STOP  #$2700
000010C6  4E72 2700                 80  code1100 STOP  #$2700
000010CA  4E72 2700                 81  code1101 STOP  #$2700
000010CE  4E72 2700                 82  code1110 STOP  #$2700
000010D2  4E72 2700                 83  code1111 STOP  #$2700
000010D6                            84  
000010D6                            85  *****************************someCLR ************************************
000010D6  4FF8 7000                 86  someCLR     LEA     STACK,SP            ; Load the SP
000010DA  41F9 00001100             87                      LEA     tableSomeCLR, A0            ; Index into the table
000010E0  4280                      88                      CLR.L   D0                  ; Zero it
000010E2  303C 7EFF                 89                      MOVE.W  #example,D0         ; We'll play with it here
000010E6  123C 0008                 90                      MOVE.B  #8,D1           ; Shift 9 bits left 
000010EA  E360                      91                      ASL.W   D1,D0            
000010EC  123C 000C                 92                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000010F0  E268                      93                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000010F2                            94                                      ; and the rest are zeroed out)           
000010F2  123C 0002                 95                      MOVE.B  #2,D1           ; Shift 2 bits right
000010F6  E260                      96                      ASR.W   D1,D0 
000010F8                            97                      
000010F8  C0FC 0006                 98                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000010FC  4EB0 0000                 99                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001100                           100  
00001100  4EF9 00001112            101  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001106  4EF9 0000111E            102                      JMP     CLRcode01   *CLR.W                                      
0000110C  4EF9 0000112A            103                      JMP     CLRcode10   *CLR.L
00001112                           104  
00001112  4EB9 0000153A            105  CLRcode00   JSR     ISCLRB
00001118  4EB9 000016C6            106              JSR     DONE
0000111E  4EB9 00001550            107  CLRcode01   JSR     ISCLRW  
00001124  4EB9 000016C6            108              JSR     DONE                                 
0000112A  4EB9 00001566            109  CLRcode10   JSR     ISCLRL  
00001130  4EB9 000016C6            110              JSR     DONE                    
00001136                           111  
00001136                           112  *****************************END someCLR ************************************
00001136                           113  
00001136                           114  *****************************NOPorCLRorRTSorJSR ************************************
00001136  4FF8 7000                115  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
0000113A  41F9 0000116E            116                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
00001140  4280                     117                      CLR.L   D0                  ; Zero it
00001142  303C 7EFF                118                      MOVE.W  #example,D0         ; We'll play with it here
00001146                           119                      
00001146  323C 4E71                120                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
0000114A  B240                     121                      CMP.W   D0, D1
0000114C  6700 008C                122                      BEQ     NOPcommand
00001150                           123   
00001150  323C 4E75                124                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
00001154  B240                     125                      CMP.W   D0, D1
00001156  6700 0076                126                      BEQ     RTScommand
0000115A                           127    
0000115A  123C 0004                128                      MOVE.B  #4,D1           ; Shift 4 bits left 
0000115E  E360                     129                      ASL.W   D1,D0            
00001160  123C 000C                130                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001164  E268                     131                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001166                           132                                      ; and the rest are zeroed out)           
00001166                           133    
00001166                           134                      
00001166  C0FC 0006                135                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000116A  4EB0 0000                136                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000116E                           137  
0000116E  4EF9 000011E6            138  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
00001174  4EF9 000011EA            139                             JMP     JSRorCLRcode0001
0000117A  4EF9 000011EE            140                             JMP     JSRorCLRcode0010   
00001180  4EF9 000011F8            141                             JMP     JSRorCLRcode0011
00001186  4EF9 000011FC            142                             JMP     JSRorCLRcode0100
0000118C  4EF9 00001200            143                             JMP     JSRorCLRcode0101
00001192  4EF9 00001204            144                             JMP     JSRorCLRcode0110
00001198  4EF9 00001208            145                             JMP     JSRorCLRcode0111
0000119E  4EF9 0000120C            146                             JMP     JSRorCLRcode1000
000011A4  4EF9 00001210            147                             JMP     JSRorCLRcode1001
000011AA  4EF9 00001214            148                             JMP     JSRorCLRcode1010
000011B0  4EF9 00001218            149                             JMP     JSRorCLRcode1011
000011B6  4EF9 0000121C            150                             JMP     JSRorCLRcode1100
000011BC  4EF9 00001220            151                             JMP     JSRorCLRcode1101
000011C2  4EF9 00001224            152                             JMP     JSRorCLRcode1110
000011C8  4EF9 00001230            153                             JMP     JSRorCLRcode1111
000011CE                           154  
000011CE  4EB9 000015D4            155  RTScommand          JSR     ISRTS
000011D4  4EB9 000016C6            156                      JSR     DONE
000011DA  4EB9 00001600            157  NOPcommand          JSR     ISNOP 
000011E0  4EB9 000016C6            158                      JSR     DONE                                                                  
000011E6  4E72 2700                159  JSRorCLRcode0000     STOP  #$2700
000011EA  4E72 2700                160  JSRorCLRcode0001     STOP  #$2700
000011EE  4EB8 10D6                161  JSRorCLRcode0010    JSR      someCLR
000011F2  4EB9 000016C6            162                      JSR     DONE
000011F8  4E72 2700                163  JSRorCLRcode0011     STOP  #$2700
000011FC  4E72 2700                164  JSRorCLRcode0100     STOP  #$2700
00001200  4E72 2700                165  JSRorCLRcode0101     STOP  #$2700
00001204  4E72 2700                166  JSRorCLRcode0110     STOP  #$2700
00001208  4E72 2700                167  JSRorCLRcode0111     STOP  #$2700
0000120C  4E72 2700                168  JSRorCLRcode1000     STOP  #$2700
00001210  4E72 2700                169  JSRorCLRcode1001     STOP  #$2700
00001214  4E72 2700                170  JSRorCLRcode1010     STOP  #$2700
00001218  4E72 2700                171  JSRorCLRcode1011     STOP  #$2700
0000121C  4E72 2700                172  JSRorCLRcode1100     STOP  #$2700
00001220  4E72 2700                173  JSRorCLRcode1101     STOP  #$2700
00001224  4EB9 000015BE            174  JSRorCLRcode1110    JSR     ISJSR
0000122A  4EB9 000016C6            175                      JSR     DONE
00001230  4E72 2700                176  JSRorCLRcode1111     STOP  #$2700
00001234                           177  
00001234                           178  *****************************END NOPorCLRorRTSorJSR ************************************
00001234                           179  
00001234                           180  
00001234                           181  *****************************someMOVEM ************************************
00001234  4FF8 7000                182  someMOVEM     LEA     STACK,SP            ; Load the SP
00001238  41F9 00001258            183                      LEA     tableSomeMOVEM, A0            ; Index into the table
0000123E  4280                     184                      CLR.L   D0                  ; Zero it
00001240  303C 7EFF                185                      MOVE.W  #example,D0         ; We'll play with it here
00001244  123C 0009                186                      MOVE.B  #9,D1           ; Shift 9 bits left 
00001248  E360                     187                      ASL.W   D1,D0            
0000124A  123C 000C                188                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000124E  E268                     189                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001250                           190                                      ; and the rest are zeroed out)           
00001250                           191    
00001250                           192                      
00001250  C0FC 0006                193                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001254  4EB0 0000                194                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001258                           195  
00001258  4EF9 00001264            196  tableSomeMOVEM    JMP     MOVEMcode00   ;MOVEM.W
0000125E  4EF9 00001270            197                    JMP     MOVEMcode01   ;MOVEM.L                                      
00001264                           198                        
00001264                           199  
00001264                           200                            
00001264  4EB9 00001592            201  MOVEMcode00         JSR     ISMOVEMW
0000126A  4EB9 000016C6            202                      JSR     DONE
00001270  4EB9 0000157C            203  MOVEMcode01         JSR     ISMOVEML
00001276  4EB9 000016C6            204                      JSR     DONE
0000127C                           205  
0000127C                           206  *****************************END someMOVEM ************************************
0000127C                           207  
0000127C                           208  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
0000127C  4FF8 7000                209  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
00001280  41F9 000012A6            210                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001286  4280                     211                      CLR.L   D0                  ; Zero it
00001288  303C 7EFF                212                      MOVE.W  #example,D0         ; We'll play with it here
0000128C  123C 0007                213                      MOVE.B  #7,D1           ; Shift 7 bits right 
00001290  E260                     214                      ASR.W   D1,D0 
00001292                           215  
00001292  123C 000D                216                      MOVE.B  #13,D1           ; Shift 6 bits left 
00001296  E360                     217                      ASL.W   D1,D0            
00001298  123C 000C                218                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000129C  E268                     219                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000129E                           220                                      ; and the rest are zeroed out)         
0000129E                           221    
0000129E                           222                      
0000129E  C0FC 0006                223                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012A2  4EB0 0000                224                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012A6                           225  
000012A6  4EF9 00001300            226  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
000012AC  4EF9 00001304            227                                    JMP     LOTScode0001
000012B2  4EF9 00001308            228                                    JMP     LOTScode0010
000012B8  4EF9 00001312            229                                    JMP     LOTScode0011
000012BE  4EF9 00001316            230                                    JMP     LOTScode0100
000012C4  4EF9 0000131A            231                                    JMP     LOTScode0101
000012CA  4EF9 0000131E            232                                    JMP     LOTScode0110
000012D0  4EF9 0000132A            233                                    JMP     LOTScode0111
000012D6  4EF9 0000132E            234                                    JMP     LOTScode1000
000012DC  4EF9 00001338            235                                    JMP     LOTScode1001
000012E2  4EF9 0000133C            236                                    JMP     LOTScode1010
000012E8  4EF9 00001346            237                                    JMP     LOTScode1011
000012EE  4EF9 0000134A            238                                    JMP     LOTScode1100
000012F4  4EF9 0000134E            239                                    JMP     LOTScode1101                               JMP     LOTScode1110
000012FA  4EF9 0000135E            240                                    JMP     LOTScode1111                           
00001300                           241                        
00001300                           242  
00001300                           243                            
00001300  4E72 2700                244  LOTScode0000       STOP  #$2700
00001304  4E72 2700                245  LOTScode0001       STOP  #$2700
00001308  4EB8 1234                246  LOTScode0010        JSR    someMOVEM
0000130C  4EB9 000016C6            247                     JSR    DONE
00001312  4E72 2700                248  LOTScode0011       STOP  #$2700                   
00001316  4E72 2700                249  LOTScode0100        STOP  #$2700
0000131A  4E72 2700                250  LOTScode0101        STOP  #$2700
0000131E  4EB9 000015A8            251  LOTScode0110        JSR    ISLEA  
00001324  4EB9 000016C6            252                     JSR    DONE 
0000132A  4E72 2700                253  LOTScode0111        STOP  #$2700 
0000132E  4EB8 1136                254  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001332  4EB9 000016C6            255                     JSR    DONE
00001338  4E72 2700                256  LOTScode1001        STOP  #$2700               
0000133C  4EB8 1136                257  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001340  4EB9 000016C6            258                     JSR    DONE
00001346  4E72 2700                259  LOTScode1011        STOP  #$2700                   
0000134A  4E72 2700                260  LOTScode1100        STOP  #$2700
0000134E  4E72 2700                261  LOTScode1101     STOP  #$2700
00001352  4EB9 000015A8            262  LOTScode1110        JSR    ISLEA 
00001358  4EB9 000016C6            263                     JSR    DONE
0000135E  4E72 2700                264  LOTScode1111       STOP  #$2700                
00001362                           265                     
00001362                           266  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001362                           267  
00001362                           268  
00001362                           269  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001362  4FF8 7000                270  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001366  41F9 00001386            271                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
0000136C  4280                     272                      CLR.L   D0                  ; Zero it
0000136E  303C 7EFF                273                      MOVE.W  #example,D0         ; We'll play with it here
00001372  123C 0007                274                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001376  E360                     275                      ASL.W   D1,D0            
00001378  123C 000D                276                      MOVE.B  #13,D1           
0000137C  E260                     277                      ASR.W   D1,D0             
0000137E                           278    
0000137E                           279                      
0000137E  C0FC 0006                280                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001382  4EB0 0000                281                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001386                           282  
00001386  4EF9 00001398            283  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
0000138C  4EF9 000013A4            284                                 JMP     ADDIWcode01
00001392  4EF9 000013B0            285                                 JMP     ADDILcode10
00001398                           286  
00001398                           287                            
00001398  4EB9 000016B0            288  ADDIBcode00        JSR     ISADDIB
0000139E  4EB9 000016C6            289                      JSR    DONE
000013A4  4EB9 00001684            290  ADDIWcode01        JSR     ISADDIW
000013AA  4EB9 000016C6            291                      JSR    DONE
000013B0  4EB9 0000169A            292  ADDILcode10        JSR     ISADDIL
000013B6  4EB9 000016C6            293                      JSR    DONE
000013BC                           294  
000013BC                           295  *****************************END ADDI_BorADDI_WorADDI_L ************************************
000013BC                           296  
000013BC                           297  
000013BC                           298  
000013BC                           299  
000013BC                           300  *****************************MOVEA_LorMOVE_L ************************************
000013BC  4FF8 7000                301  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
000013C0  41F9 000013E0            302                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
000013C6  4280                     303                      CLR.L   D0                  ; Zero it
000013C8  303C 7EFF                304                      MOVE.W  #example,D0         ; We'll play with it here
000013CC  123C 0007                305                      MOVE.B  #7,D1           ; Shift 7 bits left 
000013D0  E360                     306                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
000013D2  123C 000D                307                      MOVE.B  #13,D1           ; Shift 13 bits right
000013D6  E260                     308                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
000013D8                           309    
000013D8                           310                      
000013D8  C0FC 0006                311                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013DC  4EB0 0000                312                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013E0                           313  
000013E0  4EF9 00001410            314  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
000013E6  4EF9 0000141C            315                          JMP     MOVEAcode001
000013EC  4EF9 00001428            316                          JMP     MOVEcode010
000013F2  4EF9 00001434            317                          JMP     MOVEcode011
000013F8  4EF9 00001440            318                          JMP     MOVEcode100
000013FE  4EF9 0000144C            319                          JMP     MOVEcode101
00001404  4EF9 00001458            320                          JMP     MOVEcode110
0000140A  4EF9 00001464            321                          JMP     MOVEcode111
00001410                           322                            
00001410  4EB9 00001642            323  MOVEcode000     JSR     ISMOVEL
00001416  4EB9 000016C6            324                  JSR    DONE
0000141C  4EB9 00001658            325  MOVEAcode001    JSR     ISMOVEAL
00001422  4EB9 000016C6            326                  JSR    DONE
00001428  4EB9 00001642            327  MOVEcode010     JSR     ISMOVEL
0000142E  4EB9 000016C6            328                  JSR    DONE
00001434  4EB9 00001642            329  MOVEcode011     JSR     ISMOVEL
0000143A  4EB9 000016C6            330                  JSR    DONE
00001440  4EB9 00001642            331  MOVEcode100     JSR     ISMOVEL
00001446  4EB9 000016C6            332                  JSR    DONE
0000144C  4EB9 00001642            333  MOVEcode101     JSR     ISMOVEL
00001452  4EB9 000016C6            334                  JSR    DONE
00001458  4EB9 00001642            335  MOVEcode110     JSR     ISMOVEL
0000145E  4EB9 000016C6            336                  JSR    DONE
00001464  4EB9 00001642            337  MOVEcode111     JSR     ISMOVEL 
0000146A  4EB9 000016C6            338                  JSR    DONE
00001470                           339  *****************************END MOVEA_LorMOVE_L ************************************
00001470                           340  
00001470                           341  *****************************MOVEA_WorMOVE_W ************************************
00001470  4FF8 7000                342  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001474  41F9 00001494            343                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
0000147A  4280                     344                      CLR.L   D0                  ; Zero it
0000147C  303C 7EFF                345                      MOVE.W  #example,D0         ; We'll play with it here
00001480  123C 0007                346                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001484  E360                     347                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001486  123C 000D                348                      MOVE.B  #13,D1           ; Shift 13 bits right
0000148A  E260                     349                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
0000148C                           350    
0000148C                           351                      
0000148C  C0FC 0006                352                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001490  4EB0 0000                353                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001494                           354  
00001494  4EF9 000014C4            355  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
0000149A  4EF9 000014D0            356                          JMP     MOVEAWcode001
000014A0  4EF9 000014DC            357                          JMP     MOVEWcode010
000014A6  4EF9 000014E8            358                          JMP     MOVEWcode011
000014AC  4EF9 000014F4            359                          JMP     MOVEWcode100
000014B2  4EF9 00001500            360                          JMP     MOVEWcode101
000014B8  4EF9 0000150C            361                          JMP     MOVEWcode110
000014BE  4EF9 00001518            362                          JMP     MOVEWcode111
000014C4                           363                            
000014C4  4EB9 00001616            364  MOVEWcode000     JSR     ISMOVEW
000014CA  4EB9 000016C6            365                  JSR    DONE
000014D0  4EB9 0000162C            366  MOVEAWcode001    JSR     ISMOVEAW
000014D6  4EB9 000016C6            367                  JSR    DONE
000014DC  4EB9 00001616            368  MOVEWcode010     JSR     ISMOVEW
000014E2  4EB9 000016C6            369                  JSR    DONE
000014E8  4EB9 00001616            370  MOVEWcode011     JSR     ISMOVEW
000014EE  4EB9 000016C6            371                  JSR    DONE
000014F4  4EB9 00001616            372  MOVEWcode100     JSR     ISMOVEW
000014FA  4EB9 000016C6            373                  JSR    DONE
00001500  4EB9 00001616            374  MOVEWcode101     JSR     ISMOVEW
00001506  4EB9 000016C6            375                  JSR    DONE
0000150C  4EB9 00001616            376  MOVEWcode110     JSR     ISMOVEW
00001512  4EB9 000016C6            377                  JSR    DONE
00001518  4EB9 00001616            378  MOVEWcode111     JSR     ISMOVEW 
0000151E  4EB9 000016C6            379                  JSR    DONE
00001524                           380  *****************************END MOVEA_WorMOVE_W ************************************
00001524                           381  
00001524  48A7 FFFF                382  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001528  43F9 00001760            383              LEA MESSAGEMOVEQL, A1         *OPCODE is CLR.B
0000152E  103C 000E                384              MOVE.B  #14, D0
00001532  4E4F                     385              TRAP    #15
00001534                           386     
00001534  4C9F FFFF                387              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001538  4E75                     388              RTS
0000153A                           389  
0000153A  48A7 FFFF                390  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000153E  43F9 00001748            391              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00001544  103C 000E                392              MOVE.B  #14, D0
00001548  4E4F                     393              TRAP    #15
0000154A                           394     
0000154A  4C9F FFFF                395              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000154E  4E75                     396              RTS
00001550                           397  
00001550  48A7 FFFF                398  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001554  43F9 00001750            399              LEA MESSAGECLRW, A1         *OPCODE is CLR.B
0000155A  103C 000E                400              MOVE.B  #14, D0
0000155E  4E4F                     401              TRAP    #15
00001560                           402     
00001560  4C9F FFFF                403              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001564  4E75                     404              RTS
00001566                           405  
00001566  48A7 FFFF                406  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000156A  43F9 00001758            407              LEA MESSAGECLRL, A1         *OPCODE is CLR.B
00001570  103C 000E                408              MOVE.B  #14, D0
00001574  4E4F                     409              TRAP    #15
00001576                           410     
00001576  4C9F FFFF                411              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000157A  4E75                     412              RTS
0000157C                           413              
0000157C  48A7 FFFF                414  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001580  43F9 0000171C            415              LEA MESSAGEMOVEML, A1         *OPCODE is MOVE.L so display MOVE.L message
00001586  103C 000E                416              MOVE.B  #14, D0
0000158A  4E4F                     417              TRAP    #15
0000158C                           418     
0000158C  4C9F FFFF                419              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001590  4E75                     420              RTS
00001592                           421  
00001592  48A7 FFFF                422  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001596  43F9 00001726            423              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVE.W so display MOVE.W message
0000159C  103C 000E                424              MOVE.B  #14, D0
000015A0  4E4F                     425              TRAP    #15
000015A2                           426     
000015A2  4C9F FFFF                427              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015A6  4E75                     428              RTS  
000015A8                           429  
000015A8  48A7 FFFF                430  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015AC  43F9 00001742            431              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
000015B2  103C 000E                432              MOVE.B  #14, D0
000015B6  4E4F                     433              TRAP    #15
000015B8                           434     
000015B8  4C9F FFFF                435              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015BC  4E75                     436              RTS                          ; Exit subroutine
000015BE                           437  
000015BE  48A7 FFFF                438  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015C2  43F9 00001730            439              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
000015C8  103C 000E                440              MOVE.B  #14, D0
000015CC  4E4F                     441              TRAP    #15
000015CE  4C9F FFFF                442              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015D2  4E75                     443              RTS                          ; Exit subroutine
000015D4                           444              
000015D4  48A7 FFFF                445  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015D8  43F9 0000173C            446              LEA MESSAGERTS, A1         *OPCODE is RTS
000015DE  103C 000E                447              MOVE.B  #14, D0
000015E2  4E4F                     448              TRAP    #15
000015E4  4C9F FFFF                449              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015E8  4E75                     450              RTS  
000015EA                           451  
000015EA  48A7 FFFF                452  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015EE  43F9 00001736            453              LEA MESSAGECLR, A1         *OPCODE is CLR
000015F4  103C 000E                454              MOVE.B  #14, D0
000015F8  4E4F                     455              TRAP    #15
000015FA  4C9F FFFF                456              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015FE  4E75                     457              RTS  
00001600                           458              
00001600  48A7 FFFF                459  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001604  43F9 000016CC            460              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
0000160A  103C 000E                461              MOVE.B  #14, D0
0000160E  4E4F                     462              TRAP    #15
00001610  4C9F FFFF                463              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001614  4E75                     464              RTS                          ; Exit subroutine
00001616                           465           
00001616  48A7 FFFF                466  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000161A  43F9 000016D2            467              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00001620  103C 000E                468              MOVE.B  #14, D0
00001624  4E4F                     469              TRAP    #15
00001626                           470     
00001626  4C9F FFFF                471              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000162A  4E75                     472              RTS                          ; Exit subroutine
0000162C                           473              
0000162C  48A7 FFFF                474  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001630  43F9 00001712            475              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
00001636  103C 000E                476              MOVE.B  #14, D0
0000163A  4E4F                     477              TRAP    #15
0000163C                           478     
0000163C  4C9F FFFF                479              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001640  4E75                     480              RTS                          ; Exit subroutine
00001642                           481              
00001642  48A7 FFFF                482  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001646  43F9 000016DB            483              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
0000164C  103C 000E                484              MOVE.B  #14, D0
00001650  4E4F                     485              TRAP    #15
00001652                           486              
00001652  4C9F FFFF                487              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001656  4E75                     488              RTS                          ; Exit subroutine
00001658                           489              
00001658  48A7 FFFF                490  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000165C  43F9 00001708            491              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
00001662  103C 000E                492              MOVE.B  #14, D0
00001666  4E4F                     493              TRAP    #15
00001668                           494              
00001668  4C9F FFFF                495              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000166C  4E75                     496              RTS                          ; Exit subroutine
0000166E                           497         
0000166E  48A7 FFFF                498  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001672  43F9 000016E4            499              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
00001678  103C 000E                500              MOVE.B  #14, D0
0000167C  4E4F                     501              TRAP    #15
0000167E                           502              
0000167E  4C9F FFFF                503              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001682  4E75                     504              RTS                          ; Exit subroutine
00001684                           505           
00001684  48A7 FFFF                506  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001688  43F9 000016ED            507              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
0000168E  103C 000E                508              MOVE.B  #14, D0
00001692  4E4F                     509              TRAP    #15
00001694                           510              
00001694  4C9F FFFF                511              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001698  4E75                     512              RTS                          ; Exit subroutine
0000169A                           513              
0000169A  48A7 FFFF                514  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000169E  43F9 000016F6            515              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
000016A4  103C 000E                516              MOVE.B  #14, D0
000016A8  4E4F                     517              TRAP    #15
000016AA                           518              
000016AA  4C9F FFFF                519              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016AE  4E75                     520              RTS                          ; Exit subroutine
000016B0                           521                  
000016B0  48A7 FFFF                522  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016B4  43F9 000016FF            523              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
000016BA  103C 000E                524              MOVE.B  #14, D0
000016BE  4E4F                     525              TRAP    #15
000016C0                           526              
000016C0  4C9F FFFF                527              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016C4  4E75                     528              RTS                          ; Exit subroutine
000016C6                           529                        
000016C6  103C 0009                530  DONE        MOVE.B      #9, D0
000016CA  4E4F                     531              TRAP        #15
000016CC                           532  
000016CC  =0000000D                533  CR  EQU     $0D 
000016CC  =0000000A                534  LF  EQU     $0A
000016CC= 4E 4F 50 0D 0A 00        535  MESSAGENOP DC.B    'NOP',CR,LF, 0    
000016D2                           536      
000016D2= 4D 4F 56 45 2E 57 ...    537  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
000016DB= 4D 4F 56 45 2E 4C ...    538  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
000016E4= 4D 4F 56 45 2E 42 ...    539  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
000016ED                           540  
000016ED= 41 44 44 49 2E 57 ...    541  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
000016F6= 41 44 44 49 2E 4C ...    542  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
000016FF= 41 44 44 49 2E 42 ...    543  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
00001708                           544  
00001708= 4D 4F 56 45 41 2E ...    545  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
00001712= 4D 4F 56 45 41 2E ...    546  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
0000171C                           547  
0000171C= 4D 4F 56 45 4D 2E ...    548  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
00001726= 4D 4F 56 45 4D 2E ...    549  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00001730                           550  
00001730= 4A 53 52 0D 0A 00        551  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
00001736                           552  
00001736= 43 4C 52 0D 0A 00        553  MESSAGECLR DC.B    'CLR',CR,LF, 0
0000173C                           554  
0000173C= 52 54 53 0D 0A 00        555  MESSAGERTS DC.B    'RTS',CR,LF, 0
00001742                           556  
00001742= 4C 45 41 0D 0A 00        557  MESSAGELEA DC.B    'LEA',CR,LF, 0
00001748                           558  
00001748= 43 4C 52 2E 42 0D ...    559  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00001750= 43 4C 52 2E 57 0D ...    560  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00001758= 43 4C 52 2E 4C 0D ...    561  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00001760                           562  
00001760= 4D 4F 56 45 51 2E ...    563  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
0000176A                           564  
0000176A  FFFF FFFF                565      SIMHALT             ; halt simulator
0000176E                           566  
0000176E                           567  * Put variables and constants here
0000176E                           568  
0000176E                           569      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIBCODE00         1398
ADDILCODE10         13B0
ADDIWCODE01         13A4
ADDI_BORADDI_WORADDI_L  1362
CLRCODE00           1112
CLRCODE01           111E
CLRCODE10           112A
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10AC
CODE0111            10B0
CODE1000            10B6
CODE1001            10BA
CODE1010            10BE
CODE1011            10C2
CODE1100            10C6
CODE1101            10CA
CODE1110            10CE
CODE1111            10D2
CR                  D
DONE                16C6
EXAMPLE             7EFF
ISADDIB             16B0
ISADDIL             169A
ISADDIW             1684
ISCLR               15EA
ISCLRB              153A
ISCLRL              1566
ISCLRW              1550
ISJSR               15BE
ISLEA               15A8
ISMOVEAL            1658
ISMOVEAW            162C
ISMOVEB             166E
ISMOVEL             1642
ISMOVEML            157C
ISMOVEMW            1592
ISMOVEQL            1524
ISMOVEW             1616
ISNOP               1600
ISRTS               15D4
JSRORCLRCODE0000    11E6
JSRORCLRCODE0001    11EA
JSRORCLRCODE0010    11EE
JSRORCLRCODE0011    11F8
JSRORCLRCODE0100    11FC
JSRORCLRCODE0101    1200
JSRORCLRCODE0110    1204
JSRORCLRCODE0111    1208
JSRORCLRCODE1000    120C
JSRORCLRCODE1001    1210
JSRORCLRCODE1010    1214
JSRORCLRCODE1011    1218
JSRORCLRCODE1100    121C
JSRORCLRCODE1101    1220
JSRORCLRCODE1110    1224
JSRORCLRCODE1111    1230
LF                  A
LOTSCODE0000        1300
LOTSCODE0001        1304
LOTSCODE0010        1308
LOTSCODE0011        1312
LOTSCODE0100        1316
LOTSCODE0101        131A
LOTSCODE0110        131E
LOTSCODE0111        132A
LOTSCODE1000        132E
LOTSCODE1001        1338
LOTSCODE1010        133C
LOTSCODE1011        1346
LOTSCODE1100        134A
LOTSCODE1101        134E
LOTSCODE1110        1352
LOTSCODE1111        135E
MESSAGEADDIB        16FF
MESSAGEADDIL        16F6
MESSAGEADDIW        16ED
MESSAGECLR          1736
MESSAGECLRB         1748
MESSAGECLRL         1758
MESSAGECLRW         1750
MESSAGEJSR          1730
MESSAGELEA          1742
MESSAGEMOVEAL       1708
MESSAGEMOVEAW       1712
MESSAGEMOVEB        16E4
MESSAGEMOVEL        16DB
MESSAGEMOVEML       171C
MESSAGEMOVEMW       1726
MESSAGEMOVEQL       1760
MESSAGEMOVEW        16D2
MESSAGENOP          16CC
MESSAGERTS          173C
MOVEACODE001        141C
MOVEAWCODE001       14D0
MOVEA_LORMOVE_L     13BC
MOVEA_WORMOVE_W     1470
MOVECODE000         1410
MOVECODE010         1428
MOVECODE011         1434
MOVECODE100         1440
MOVECODE101         144C
MOVECODE110         1458
MOVECODE111         1464
MOVEMCODE00         1264
MOVEMCODE01         1270
MOVEWCODE000        14C4
MOVEWCODE010        14DC
MOVEWCODE011        14E8
MOVEWCODE100        14F4
MOVEWCODE101        1500
MOVEWCODE110        150C
MOVEWCODE111        1518
NOPCOMMAND          11DA
NOPORCLRORRTSORJSR  1136
NOP_MOVEM_LEA_JSR_CLR_RTS  127C
RTSCOMMAND          11CE
SHIFT               C
SOMECLR             10D6
SOMEMOVEM           1234
STACK               7000
START               1000
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1386
TABLEMOVEA_LORMOVE_L  13E0
TABLEMOVEA_WORMOVE_W  1494
TABLENOPORCLRORRTSORJSR  116E
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  12A6
TABLESOMECLR        1100
TABLESOMEMOVEM      1258
