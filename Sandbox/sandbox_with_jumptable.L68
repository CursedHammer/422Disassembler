00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2016 4:10:30 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  
00001000  =000042C7                 31  example EQU     %0100001011000111 ; INVALID = 0100 0010 1100 0111
00001000                            32  
00001000                            33  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            34  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            35  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            36  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            37  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            38  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            39  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            40  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            41  
00001000                            42  *example EQU     %1011100011000011 ;         INVALID 1011 100 011 000 011
00001000                            43  
00001000                            44  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            45  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            46  
00001000                            47  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            48  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            49  
00001000                            50  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            51  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            52  
00001000                            53  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            54  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            55  
00001000                            56  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            57  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            58  
00001000                            59  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            60  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            61  
00001000                            62  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            63  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            64  
00001000                            65  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            66  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            67  
00001000                            68  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            69  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            70  
00001000                            71  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            72  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            73  
00001000                            74  *example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            75  
00001000                            76  *example EQU     %0100110000000011 ; MULS.L D3, D4 = 01001 1 0000 000 011
00001000                            77  
00001000                            78  *example EQU     %0100100010010100 ; MOVEM.W (A4), (D16A6) = 0100 1000 10 010 100
00001000                            79  *example EQU     %0100110010101110 ; MOVEM.W (D16A6), (A4) = 0100 1100 10 101 110
00001000                            80  
00001000                            81  *example EQU     %0100100011010100 ; MOVEM.L (A4), (D16A6) = 0100 1000 11 010 100
00001000                            82  *example EQU     %0100110011101110 ; MOVEM.L (D16A6), (A4) = 0100 1100 11 101 110
00001000                            83  
00001000                            84  *example EQU     %1110111100011010  ; ROL.B  D1,D2 = 1110 111 1 00 0 11 010 where D1 = 0x111 or 7
00001000                            85  *example EQU     %1110111101011010  ; ROL.W  D1,D2 = 1110 111 1 01 0 11 010 where D1 = 0x111 or 7
00001000                            86  *example EQU     %1110111110011010  ; ROL.L  D1,D2 = 1110 111 1 10 0 11 010 where D1 = 0x111 or 7
00001000                            87  
00001000                            88  *example EQU     %1110111000011010  ; ROR.B  D1,D2 = 1110 111 0 00 0 11 010 where D1 = 0x111 or 7
00001000                            89  *example EQU     %1110111001011010  ; ROR.W  D1,D2 = 1110 111 0 01 0 11 010 where D1 = 0x111 or 7
00001000                            90  *example EQU     %1110111010011010  ; ROR.L  D1,D2 = 1110 111 0 10 0 11 010 where D1 = 0x111 or 7
00001000                            91  
00001000                            92  *example EQU     %1110111100001010  ; LSL.B  D1,D2 = 1110 111 1 00 0 01 010 where D1 = 0x111 or 7
00001000                            93  *example EQU     %1110111101001010  ; LSL.W  D1,D2 = 1110 111 1 01 0 01 010 where D1 = 0x111 or 7
00001000                            94  *example EQU     %1110111110001010  ; LSL.L  D1,D2 = 1110 111 1 10 0 01 010 where D1 = 0x111 or 7
00001000                            95  
00001000                            96  *example EQU     %1110111000001010  ; LSR.B  D1,D2 = 1110 111 0 00 0 01 010 where D1 = 0x111 or 7
00001000                            97  *example EQU     %1110111001001010  ; LSR.W  D1,D2 = 1110 111 0 01 0 01 010 where D1 = 0x111 or 7
00001000                            98  *example EQU     %1110111010001010  ; LSR.L  D1,D2 = 1110 111 0 10 0 01 010 where D1 = 0x111 or 7
00001000                            99  
00001000                           100  *example EQU     %1110111100000010  ; ASL.B  D1,D2 = 1110 111 1 00 0 00 010 where D1 = 0x111 or 7
00001000                           101  *example EQU     %1110111101000010  ; ASL.W  D1,D2 = 1110 111 1 01 0 00 010 where D1 = 0x111 or 7
00001000                           102  *example EQU     %1110111110000010  ; ASL.L  D1,D2 = 1110 111 1 10 0 00 010 where D1 = 0x111 or 7
00001000                           103  
00001000                           104  *example EQU     %1110111000000010  ; ASR.B  D1,D2 = 1110 111 0 00 0 00 010 where D1 = 0x111 or 7
00001000                           105  *example EQU     %1110111001000010  ; ASR.W  D1,D2 = 1110 111 0 01 0 00 010 where D1 = 0x111 or 7
00001000                           106  *example EQU     %1110111010000010  ; ASR.L  D1,D2 = 1110 111 0 10 0 00 010 where D1 = 0x111 or 7
00001000                           107  
00001000                           108  *example EQU     %1000100011000011 ; DIVU.W D3,D4 = 1000 100 011 000 011
00001000                           109  *example EQU     %0100110001000011 ; DIVU.L D3,D4 = 0100 110001 000 011
00001000                           110  
00001000                           111  *example EQU     %1000100000000011 ; OR.B D3,D4 = 1000 100 000 000 011
00001000                           112  *example EQU     %1000100100000011 ; OR.B D3,D4 = 1000 100 100 000 011
00001000                           113  *example EQU     %1000100001000011 ; OR.W D3,D4 = 1000 100 001 000 011
00001000                           114  *example EQU     %1000100101000011 ; OR.W D3,D4 = 1000 100 101 000 011
00001000                           115  *example EQU     %1000100010000011 ; OR.L D3,D4 = 1000 100 010 000 011
00001000                           116  *example EQU     %1000100110000011 ; OR.L D3,D4 = 1000 100 110 000 011
00001000                           117  
00001000                           118  *example EQU     %0110010000000000 ; BCC = 0110 0100 0000 0000
00001000                           119  *example EQU     %0110111000000000 ; BGT = 0110 1110 0000 0000
00001000                           120  *example EQU     %0110111100000000  ; BLE = 0110 1111 0000 0000
00001000                           121  
00001000                           122  *example EQU     %1010111100000000  ; INVALID
00001000                           123  
00001000  =0000000C                124  shift   EQU     12                 ; Shift 12 bits
00001000                           125  
00001000                           126  * Program starts here
00001000                           127  
00001000  4FF8 7000                128          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E            129          LEA     table,A0            ; Index into the table
0000100A  4280                     130          CLR.L   D0                  ; Zero it
0000100C  303C 42C7                131          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                132          MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001014  E268                     133          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                           134                                      ; and the rest are zeroed out)
00001016  C0FC 0006                135          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EF0 0000                136          JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000101E                           137  
0000101E  4EF9 0000107E            138  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084            139          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090            140          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096            141          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C            142          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS or MULS.W
0000103C  4EF9 000010A8            143          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4            144          JMP     code0110        ; BCC or BGT or BLE
00001048  4EF9 000010C0            145          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010CC            146          JMP     code1000        ; OR.B or OR.W or OR.L or DIVU.W
00001054  4EF9 000010D8            147          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010E4            148          JMP     code1010
00001060  4EF9 000010EC            149          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010F8            150          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 00001104            151          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 00001110            152          JMP     code1110        ; ROd_LSd_ASd
00001078  4EF9 0000111C            153          JMP     code1111
0000107E                           154  
0000107E                           155  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           156  
0000107E  4EB9 00001B42            157  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 00002250            158  code0001 JSR   ISMOVEB
0000108A  4EB9 000022A8            159           JSR   DONE
00001090  4EB9 00001BAA            160  code0010 JSR   MOVEA_LorMOVE_L
00001096  4EB9 00001C5E            161  code0011 JSR  MOVEA_WorMOVE_W
0000109C  4EB9 00001A2E            162  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 000022A8            163           JSR    DONE
000010A8  4EB9 000017FE            164  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 000022A8            165           JSR    DONE
000010B4  4EB9 00001124            166  code0110 JSR    BCCorBGTorBLE
000010BA  4EB9 000022A8            167           JSR    DONE
000010C0  4EB9 00002106            168  code0111 JSR    ISMOVEQL
000010C6  4EB9 000022A8            169           JSR    DONE
000010CC  4EB9 000011C6            170  code1000 JSR    OR_BorOR_WorOR_LorDIVU
000010D2  4EB9 000022A8            171           JSR    DONE
000010D8  4EB9 00001702            172  code1001 JSR    SUB_BorSUB_WorSUB_L
000010DE  4EB9 000022A8            173           JSR    DONE
000010E4  4EB9 00001D12            174  code1010 JSR    OPCODE_INVALID              ;INVALID
000010EA  4E75                     175           RTS   
000010EC  4EB9 0000179C            176  code1011 JSR    CMP_BorCMP_WorCMP_L
000010F2  4EB9 000022A8            177           JSR DONE
000010F8  4EB9 000015CE            178  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010FE  4EB9 000022A8            179           JSR    DONE
00001104  4EB9 00001668            180  code1101 JSR    ADD_BorADD_WorADD_L
0000110A  4EB9 000022A8            181           JSR    DONE
00001110  4EB9 00001572            182  code1110 JSR    ROd_LSd_ASd
00001116  4EB9 000022A8            183           JSR    DONE
0000111C  4EB9 00001D12            184  code1111 JSR    OPCODE_INVALID              ;INVALID
00001122  4E75                     185           RTS 
00001124                           186  
00001124                           187  *****************************  BCCorBGTorBLE ************************************
00001124  4FF8 7000                188  BCCorBGTorBLE       LEA     STACK,SP            ; Load the SP
00001128  41F9 0000114E            189                      LEA     tableBCCorBGTorBLE, A0            ; Index into the table
0000112E  4280                     190                      CLR.L   D0                  ; Zero it
00001130  303C 42C7                191                      MOVE.W  #example,D0         ; We'll play with it here
00001134  123C 0006                192                      MOVE.B  #6,D1           ; Shift 6 bits left
00001138  E360                     193                      ASL.W   D1,D0
0000113A  123C 000C                194                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000113E  E268                     195                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001140                           196                                      ; and the rest are zeroed out)
00001140  123C 0002                197                      MOVE.B  #2,D1           ; Shift 2 bits right
00001144  E260                     198                      ASR.W   D1,D0
00001146                           199  
00001146  C0FC 0006                200                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000114A  4EF0 0000                201                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000114E                           202  
0000114E  4EF9 00001166            203  tableBCCorBGTorBLE   JMP    BCCorBGTorBLEcode00   ; BCC
00001154  4EF9 0000116E            204                       JMP    BCCorBGTorBLEcode01   ;
0000115A  4EF9 00001176            205                       JMP    BCCorBGTorBLEcode10   ; BGT
00001160  4EF9 0000117E            206                       JMP    BCCorBGTorBLEcode11   ; BLE
00001166                           207  
00001166                           208  
00001166                           209  
00001166  4EB9 00001D28            210  BCCorBGTorBLEcode00    JSR     ISBCC
0000116C  4E75                     211                         RTS
0000116E  4EB9 00001D12            212  BCCorBGTorBLEcode01    JSR    OPCODE_INVALID              ;INVALID
00001174  4E75                     213                         RTS 
00001176  4EB9 00001D3E            214  BCCorBGTorBLEcode10    JSR     ISBGT
0000117C  4E75                     215                         RTS
0000117E  4EB9 00001D54            216  BCCorBGTorBLEcode11    JSR     ISBLE
00001184  4E75                     217                         RTS
00001186                           218  
00001186                           219  ***************************** END  BCCorBGTorBLE ************************************
00001186                           220  
00001186                           221  *****************************  MULSLorDIVUL ************************************
00001186  4FF8 7000                222  MULSLorDIVUL        LEA     STACK,SP            ; Load the SP
0000118A  41F9 000011AA            223                      LEA     tableMULSLorDIVUL, A0            ; Index into the table
00001190  4280                     224                      CLR.L   D0                  ; Zero it
00001192  303C 42C7                225                      MOVE.W  #example,D0         ; We'll play with it here
00001196  123C 0006                226                      MOVE.B  #6,D1           ; Shift 6 bits left
0000119A  E360                     227                      ASL.W   D1,D0
0000119C  123C 000C                228                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000011A0  E268                     229                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011A2                           230  
000011A2  C0FC 0006                231                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011A6  4EF0 0000                232                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000011AA                           233  
000011AA  4EF9 000011B6            234  tableMULSLorDIVUL             JMP    MULSLorDIVULcode0   ;  MULS.L
000011B0  4EF9 000011BE            235                                JMP    MULSLorDIVULcode1   ;  DIVU.L
000011B6                           236  
000011B6  4EB9 00001F64            237  MULSLorDIVULcode0   JSR     ISMULSL
000011BC  4E75                     238                      RTS
000011BE  4EB9 00001D6A            239  MULSLorDIVULcode1   JSR     ISDIVUL
000011C4  4E75                     240                      RTS
000011C6                           241  ***************************** END  MULSLorDIVUL ************************************
000011C6                           242  
000011C6                           243  *****************************  OR_BorOR_WorOR_LorDIVU ************************************
000011C6  4FF8 7000                244  OR_BorOR_WorOR_LorDIVU     LEA     STACK,SP            ; Load the SP
000011CA  41F9 000011F0            245                      LEA     tableOR_BorOR_WorOR_LorDIVU, A0            ; Index into the table
000011D0  4280                     246                      CLR.L   D0                  ; Zero it
000011D2  303C 42C7                247                      MOVE.W  #example,D0         ; We'll play with it here
000011D6  123C 0007                248                      MOVE.B  #7,D1           ; Shift 7 bits left
000011DA  E360                     249                      ASL.W   D1,D0
000011DC  123C 000C                250                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000011E0  E268                     251                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011E2                           252                                      ; and the rest are zeroed out)
000011E2  123C 0001                253                      MOVE.B  #1,D1           ; Shift 1 bits right
000011E6  E260                     254                      ASR.W   D1,D0
000011E8                           255  
000011E8  C0FC 0006                256                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011EC  4EF0 0000                257                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000011F0                           258  
000011F0  4EF9 00001220            259  tableOR_BorOR_WorOR_LorDIVU             JMP    OR_DIVUcode000   ; OR.B
000011F6  4EF9 00001228            260                                          JMP    OR_DIVUcode001   ; OR.W
000011FC  4EF9 00001230            261                                          JMP    OR_DIVUcode010   ; OR.L
00001202                           262  
00001202  4EF9 00001238            263                                          JMP    OR_DIVUcode011   ; DIVU.W
00001208  4EF9 00001240            264                                          JMP    OR_DIVUcode100   ; OR.B
0000120E  4EF9 00001248            265                                          JMP    OR_DIVUcode101   ; OR.W
00001214  4EF9 00001250            266                                          JMP    OR_DIVUcode110   ; OR.L
0000121A  4EF9 00001258            267                                          JMP    OR_DIVUcode111    ; INVALID
00001220                           268  
00001220                           269  
00001220  4EB9 00001D96            270  OR_DIVUcode000      JSR     ISORB
00001226  4E75                     271                      RTS
00001228  4EB9 00001DAC            272  OR_DIVUcode001      JSR     ISORW
0000122E  4E75                     273                      RTS
00001230  4EB9 00001DC2            274  OR_DIVUcode010      JSR     ISORL
00001236  4E75                     275                      RTS
00001238  4EB9 00001D80            276  OR_DIVUcode011      JSR     ISDIVUW
0000123E  4E75                     277                      RTS
00001240  4EB9 00001D96            278  OR_DIVUcode100      JSR     ISORB
00001246  4E75                     279                      RTS
00001248  4EB9 00001DAC            280  OR_DIVUcode101      JSR     ISORW
0000124E  4E75                     281                      RTS
00001250  4EB9 00001DC2            282  OR_DIVUcode110      JSR     ISORL
00001256  4E75                     283                      RTS
00001258  4EB9 00001D12            284  OR_DIVUcode111      JSR    OPCODE_INVALID              ;INVALID
0000125E  4E75                     285                      RTS                
00001260                           286  
00001260                           287  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001260                           288  
00001260                           289  *****************************someASR ************************************
00001260  4FF8 7000                290  someASR    LEA     STACK,SP            ; Load the SP
00001264  41F9 0000128A            291                      LEA     tableSomeASR, A0            ; Index into the table
0000126A  4280                     292                      CLR.L   D0                  ; Zero it
0000126C  303C 42C7                293                      MOVE.W  #example,D0         ; We'll play with it here
00001270  123C 0008                294                      MOVE.B  #8,D1           ; Shift 8 bits left
00001274  E360                     295                      ASL.W   D1,D0
00001276  123C 000C                296                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000127A  E268                     297                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000127C                           298                                      ; and the rest are zeroed out)
0000127C  123C 0002                299                      MOVE.B  #2,D1           ; Shift 2 bits right
00001280  E260                     300                      ASR.W   D1,D0
00001282                           301  
00001282  C0FC 0006                302                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001286  4EF0 0000                303                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000128A                           304  
0000128A  4EF9 000012A2            305  tableSomeASR        JMP     ASRcode00   *ASR.B
00001290  4EF9 000012AA            306                      JMP     ASRcode01   *ASR.W
00001296  4EF9 000012B2            307                      JMP     ASRcode10   *ASR.L
0000129C  4EF9 000012BA            308                      JMP     ASRcode11   ; INVALID
000012A2                           309  
000012A2                           310  
000012A2  4EB9 00001DD8            311  ASRcode00   JSR     ISASRB
000012A8  4E75                     312              RTS
000012AA  4EB9 00001DEE            313  ASRcode01   JSR     ISASRW
000012B0  4E75                     314              RTS
000012B2  4EB9 00001E04            315  ASRcode10   JSR     ISASRL
000012B8  4E75                     316              RTS
000012BA  4EB9 00001D12            317  ASRcode11   JSR    OPCODE_INVALID              ;INVALID
000012C0  4E75                     318              RTS
000012C2                           319  
000012C2                           320  *****************************END someLSL ************************************
000012C2                           321  
000012C2                           322  
000012C2                           323  *****************************someASL ************************************
000012C2  4FF8 7000                324  someASL    LEA     STACK,SP            ; Load the SP
000012C6  41F9 000012EC            325                      LEA     tableSomeASL, A0            ; Index into the table
000012CC  4280                     326                      CLR.L   D0                  ; Zero it
000012CE  303C 42C7                327                      MOVE.W  #example,D0         ; We'll play with it here
000012D2  123C 0008                328                      MOVE.B  #8,D1           ; Shift 8 bits left
000012D6  E360                     329                      ASL.W   D1,D0
000012D8  123C 000C                330                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000012DC  E268                     331                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012DE                           332                                      ; and the rest are zeroed out)
000012DE  123C 0002                333                      MOVE.B  #2,D1           ; Shift 2 bits right
000012E2  E260                     334                      ASR.W   D1,D0
000012E4                           335  
000012E4  C0FC 0006                336                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012E8  4EF0 0000                337                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000012EC                           338  
000012EC  4EF9 00001304            339  tableSomeASL        JMP     ASLcode00   *ASL.B
000012F2  4EF9 0000130C            340                      JMP     ASLcode01   *ASL.W
000012F8  4EF9 00001314            341                      JMP     ASLcode10   *ASL.L
000012FE  4EF9 0000131C            342                      JMP     ASLcode11   ; INVALID
00001304                           343  
00001304                           344  
00001304  4EB9 00001E1A            345  ASLcode00   JSR     ISASLB
0000130A  4E75                     346              RTS
0000130C  4EB9 00001E30            347  ASLcode01   JSR     ISASLW
00001312  4E75                     348              RTS
00001314  4EB9 00001E46            349  ASLcode10   JSR     ISASLL
0000131A  4E75                     350              RTS
0000131C  4EB9 00001D12            351  ASLcode11   JSR    OPCODE_INVALID              ;INVALID
00001322  4E75                     352              RTS
00001324                           353  *****************************END someLSL ************************************
00001324                           354  
00001324                           355  
00001324                           356  *****************************someLSR ************************************
00001324  4FF8 7000                357  someLSR    LEA     STACK,SP            ; Load the SP
00001328  41F9 0000134E            358                      LEA     tableSomeLSR, A0            ; Index into the table
0000132E  4280                     359                      CLR.L   D0                  ; Zero it
00001330  303C 42C7                360                      MOVE.W  #example,D0         ; We'll play with it here
00001334  123C 0008                361                      MOVE.B  #8,D1           ; Shift 8 bits left
00001338  E360                     362                      ASL.W   D1,D0
0000133A  123C 000C                363                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000133E  E268                     364                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001340                           365                                      ; and the rest are zeroed out)
00001340  123C 0002                366                      MOVE.B  #2,D1           ; Shift 2 bits right
00001344  E260                     367                      ASR.W   D1,D0
00001346                           368  
00001346  C0FC 0006                369                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000134A  4EF0 0000                370                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000134E                           371  
0000134E  4EF9 00001366            372  tableSomeLSR        JMP     LSRcode00   *LSR.B
00001354  4EF9 0000136E            373                      JMP     LSRcode01   *LSR.W
0000135A  4EF9 00001376            374                      JMP     LSRcode10   *LSR.L
00001360  4EF9 0000137E            375                      JMP     LSRcode11   ; INVALID
00001366                           376                      
00001366  4EB9 00001E5C            377  LSRcode00   JSR     ISLSRB
0000136C  4E75                     378              RTS
0000136E  4EB9 00001E72            379  LSRcode01   JSR     ISLSRW
00001374  4E75                     380              RTS
00001376  4EB9 00001E88            381  LSRcode10   JSR     ISLSRL
0000137C  4E75                     382              RTS
0000137E  4EB9 00001D12            383  LSRcode11   JSR    OPCODE_INVALID              ;INVALID
00001384  4E75                     384              RTS
00001386                           385  *****************************END someLSR ************************************
00001386                           386  
00001386                           387  
00001386                           388  *****************************someLSL ************************************
00001386  4FF8 7000                389  someLSL    LEA     STACK,SP            ; Load the SP
0000138A  41F9 000013B0            390                      LEA     tableSomeLSL, A0            ; Index into the table
00001390  4280                     391                      CLR.L   D0                  ; Zero it
00001392  303C 42C7                392                      MOVE.W  #example,D0         ; We'll play with it here
00001396  123C 0008                393                      MOVE.B  #8,D1           ; Shift 8 bits left
0000139A  E360                     394                      ASL.W   D1,D0
0000139C  123C 000C                395                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000013A0  E268                     396                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013A2                           397                                      ; and the rest are zeroed out)
000013A2  123C 0002                398                      MOVE.B  #2,D1           ; Shift 2 bits right
000013A6  E260                     399                      ASR.W   D1,D0
000013A8                           400  
000013A8  C0FC 0006                401                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013AC  4EF0 0000                402                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000013B0                           403  
000013B0  4EF9 000013C8            404  tableSomeLSL        JMP     LSLcode00   *LSL.B
000013B6  4EF9 000013D0            405                      JMP     LSLcode01   *LSL.W
000013BC  4EF9 000013D8            406                      JMP     LSLcode10   *LSL.L
000013C2  4EF9 000013E0            407                      JMP     LSLcode11   ; INVALID
000013C8                           408  
000013C8  4EB9 00001E9E            409  LSLcode00   JSR     ISLSLB
000013CE  4E75                     410              RTS
000013D0  4EB9 00001EB4            411  LSLcode01   JSR     ISLSLW
000013D6  4E75                     412              RTS
000013D8  4EB9 00001ECA            413  LSLcode10   JSR     ISLSLL
000013DE  4E75                     414              RTS
000013E0  4EB9 00001D12            415  LSLcode11   JSR    OPCODE_INVALID              ;INVALID
000013E6  4E75                     416              RTS
000013E8                           417  *****************************END someLSL ************************************
000013E8                           418  
000013E8                           419  
000013E8                           420  *****************************someROL ************************************
000013E8  4FF8 7000                421  someROL    LEA     STACK,SP            ; Load the SP
000013EC  41F9 00001412            422                      LEA     tableSomeROL, A0            ; Index into the table
000013F2  4280                     423                      CLR.L   D0                  ; Zero it
000013F4  303C 42C7                424                      MOVE.W  #example,D0         ; We'll play with it here
000013F8  123C 0008                425                      MOVE.B  #8,D1           ; Shift 8 bits left
000013FC  E360                     426                      ASL.W   D1,D0
000013FE  123C 000C                427                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001402  E268                     428                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001404                           429                                      ; and the rest are zeroed out)
00001404  123C 0002                430                      MOVE.B  #2,D1           ; Shift 2 bits right
00001408  E260                     431                      ASR.W   D1,D0
0000140A                           432  
0000140A  C0FC 0006                433                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000140E  4EF0 0000                434                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001412                           435  
00001412  4EF9 0000142A            436  tableSomeROL        JMP     ROLcode00   *ROL.B
00001418  4EF9 00001432            437                      JMP     ROLcode01   *ROL.W
0000141E  4EF9 0000143A            438                      JMP     ROLcode10   *ROL.L
00001424  4EF9 00001442            439                      JMP     ROLcode11   ; INVALID
0000142A                           440  
0000142A  4EB9 00001F22            441  ROLcode00   JSR     ISROLB
00001430  4E75                     442              RTS
00001432  4EB9 00001F38            443  ROLcode01   JSR     ISROLW
00001438  4E75                     444              RTS
0000143A  4EB9 00001F4E            445  ROLcode10   JSR     ISROLL
00001440  4E75                     446              RTS
00001442  4EB9 00001D12            447  ROLcode11   JSR    OPCODE_INVALID              ;INVALID
00001448  4E75                     448              RTS
0000144A                           449  *****************************END someROR ************************************
0000144A                           450  
0000144A                           451  
0000144A                           452  *****************************someROR ************************************
0000144A  4FF8 7000                453  someROR     LEA     STACK,SP            ; Load the SP
0000144E  41F9 00001474            454                      LEA     tableSomeROR, A0            ; Index into the table
00001454  4280                     455                      CLR.L   D0                  ; Zero it
00001456  303C 42C7                456                      MOVE.W  #example,D0         ; We'll play with it here
0000145A  123C 0008                457                      MOVE.B  #8,D1           ; Shift 8 bits left
0000145E  E360                     458                      ASL.W   D1,D0
00001460  123C 000C                459                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001464  E268                     460                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001466                           461                                      ; and the rest are zeroed out)
00001466  123C 0002                462                      MOVE.B  #2,D1           ; Shift 2 bits right
0000146A  E260                     463                      ASR.W   D1,D0
0000146C                           464  
0000146C  C0FC 0006                465                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001470  4EF0 0000                466                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001474                           467  
00001474  4EF9 0000148C            468  tableSomeROR        JMP     RORcode00   *ROR.B
0000147A  4EF9 00001494            469                      JMP     RORcode01   *ROR.W
00001480  4EF9 0000149C            470                      JMP     RORcode10   *ROR.L
00001486  4EF9 000014A4            471                      JMP     RORcode11   ; INVALID
0000148C                           472  
0000148C  4EB9 00001EE0            473  RORcode00   JSR     ISRORB
00001492  4E75                     474              RTS
00001494  4EB9 00001EF6            475  RORcode01   JSR     ISRORW
0000149A  4E75                     476              RTS
0000149C  4EB9 00001F0C            477  RORcode10   JSR     ISRORL
000014A2  4E75                     478              RTS
000014A4  4EB9 00001D12            479  RORcode11   JSR    OPCODE_INVALID              ;INVALID
000014AA  4E75                     480              RTS
000014AC                           481  *****************************END someROR ************************************
000014AC                           482  
000014AC                           483  
000014AC                           484  *****************************  ROL_ROR ************************************
000014AC  4FF8 7000                485  ROL_ROR     LEA     STACK,SP            ; Load the SP
000014B0  41F9 000014D6            486                      LEA     tableROL_ROR, A0            ; Index into the table
000014B6  4280                     487                      CLR.L   D0                  ; Zero it
000014B8  303C 42C7                488                      MOVE.W  #example,D0         ; We'll play with it here
000014BC  123C 0007                489                      MOVE.B  #7,D1           ; Shift 7 bits left
000014C0  E360                     490                      ASL.W   D1,D0
000014C2  123C 000C                491                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000014C6  E268                     492                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014C8                           493                                      ; and the rest are zeroed out)
000014C8  123C 0003                494                      MOVE.B  #3,D1           ; Shift 3 bits right
000014CC  E260                     495                      ASR.W   D1,D0
000014CE                           496  
000014CE  C0FC 0006                497                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014D2  4EF0 0000                498                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000014D6                           499  
000014D6  4EF9 000014E2            500  tableROL_ROR            JMP    ROL_RORcode0   ; ROR
000014DC  4EF9 000014E8            501                          JMP    ROL_RORcode1   ; ROL
000014E2                           502  
000014E2                           503  
000014E2                           504  
000014E2                           505  
000014E2  4EB8 144A                506  ROL_RORcode0   JSR     someROR
000014E6  4E75                     507                 RTS
000014E8  4EB8 13E8                508  ROL_RORcode1   JSR     someROL
000014EC  4E75                     509                 RTS
000014EE                           510  
000014EE                           511  
000014EE                           512  ***************************** END ROL_ROR ************************************
000014EE                           513  
000014EE                           514  
000014EE                           515  *****************************  LSL_LSR ************************************
000014EE  4FF8 7000                516  LSL_LSR     LEA     STACK,SP            ; Load the SP
000014F2  41F9 00001518            517                      LEA     tableLSL_LSR, A0            ; Index into the table
000014F8  4280                     518                      CLR.L   D0                  ; Zero it
000014FA  303C 42C7                519                      MOVE.W  #example,D0         ; We'll play with it here
000014FE  123C 0007                520                      MOVE.B  #7,D1           ; Shift 7 bits left
00001502  E360                     521                      ASL.W   D1,D0
00001504  123C 000C                522                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001508  E268                     523                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000150A                           524                                      ; and the rest are zeroed out)
0000150A  123C 0003                525                      MOVE.B  #3,D1           ; Shift 3 bits right
0000150E  E260                     526                      ASR.W   D1,D0
00001510                           527  
00001510  C0FC 0006                528                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001514  4EF0 0000                529                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001518                           530  
00001518  4EF9 00001524            531  tableLSL_LSR            JMP    LSL_LSRcode0   ; LSR
0000151E  4EF9 0000152A            532                          JMP    LSL_LSRcode1   ; LSL
00001524                           533  
00001524                           534  
00001524                           535  
00001524                           536  
00001524  4EB8 1324                537  LSL_LSRcode0   JSR     someLSR
00001528  4E75                     538                 RTS
0000152A  4EB8 1386                539  LSL_LSRcode1   JSR     someLSL
0000152E  4E75                     540                 RTS
00001530                           541  
00001530                           542  
00001530                           543  ***************************** END LSL_LSR ************************************
00001530                           544  
00001530                           545  
00001530                           546  *****************************  ASL_ASR ************************************
00001530  4FF8 7000                547  ASL_ASR     LEA     STACK,SP            ; Load the SP
00001534  41F9 0000155A            548                      LEA     tableASL_ASR, A0            ; Index into the table
0000153A  4280                     549                      CLR.L   D0                  ; Zero it
0000153C  303C 42C7                550                      MOVE.W  #example,D0         ; We'll play with it here
00001540  123C 0007                551                      MOVE.B  #7,D1           ; Shift 7 bits left
00001544  E360                     552                      ASL.W   D1,D0
00001546  123C 000C                553                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000154A  E268                     554                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000154C                           555                                      ; and the rest are zeroed out)
0000154C  123C 0003                556                      MOVE.B  #3,D1           ; Shift 3 bits right
00001550  E260                     557                      ASR.W   D1,D0
00001552                           558  
00001552  C0FC 0006                559                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001556  4EF0 0000                560                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000155A                           561  
0000155A  4EF9 00001566            562  tableASL_ASR            JMP    ASL_ASRcode0   ; ASR
00001560  4EF9 0000156C            563                          JMP    ASL_ASRcode1   ; ASL
00001566                           564  
00001566                           565  
00001566                           566  
00001566                           567  
00001566  4EB8 1260                568  ASL_ASRcode0   JSR     someASR
0000156A  4E75                     569                 RTS
0000156C  4EB8 12C2                570  ASL_ASRcode1   JSR     someASL
00001570  4E75                     571                 RTS
00001572                           572  
00001572                           573  
00001572                           574  ***************************** END ASL_ASR ************************************
00001572                           575  
00001572                           576  
00001572                           577  *****************************  ROd_LSd_ASd ************************************
00001572  4FF8 7000                578  ROd_LSd_ASd     LEA     STACK,SP            ; Load the SP
00001576  41F9 0000159C            579                      LEA     tableROd_LSd_ASd, A0            ; Index into the table
0000157C  4280                     580                      CLR.L   D0                  ; Zero it
0000157E  303C 42C7                581                      MOVE.W  #example,D0         ; We'll play with it here
00001582  123C 000B                582                      MOVE.B  #11,D1           ; Shift 11 bits left
00001586  E360                     583                      ASL.W   D1,D0
00001588  123C 000C                584                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000158C  E268                     585                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000158E                           586                                      ; and the rest are zeroed out)
0000158E  123C 0002                587                      MOVE.B  #2,D1           ; Shift 2 bits right
00001592  E260                     588                      ASR.W   D1,D0
00001594                           589  
00001594  C0FC 0006                590                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001598  4EF0 0000                591                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000159C                           592  
0000159C  4EF9 000015B4            593  tableROd_LSd_ASd        JMP    ROd_LSd_ASdcode00   ; ASL_ASR
000015A2  4EF9 000015BA            594                          JMP    ROd_LSd_ASdcode01   ; LSL_LSR
000015A8  4EF9 000015C0            595                          JMP    ROd_LSd_ASdcode10
000015AE  4EF9 000015C8            596                          JMP    ROd_LSd_ASdcode11   ; ROL_ROR
000015B4                           597  
000015B4                           598  
000015B4                           599  
000015B4  4EB8 1530                600  ROd_LSd_ASdcode00   JSR     ASL_ASR
000015B8  4E75                     601                      RTS
000015BA  4EB8 14EE                602  ROd_LSd_ASdcode01   JSR     LSL_LSR
000015BE  4E75                     603                      RTS
000015C0  4EB9 00001D12            604  ROd_LSd_ASdcode10   JSR    OPCODE_INVALID              ;INVALID
000015C6  4E75                     605                      RTS 
000015C8  4EB8 14AC                606  ROd_LSd_ASdcode11   JSR     ROL_ROR
000015CC  4E75                     607                      RTS
000015CE                           608  
000015CE                           609  ***************************** END  ROd_LSd_ASd ************************************
000015CE                           610  
000015CE                           611  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
000015CE  4FF8 7000                612  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
000015D2  41F9 000015F8            613                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
000015D8  4280                     614                      CLR.L   D0                  ; Zero it
000015DA  303C 42C7                615                      MOVE.W  #example,D0         ; We'll play with it here
000015DE  123C 0007                616                      MOVE.B  #7,D1           ; Shift 7 bits left
000015E2  E360                     617                      ASL.W   D1,D0
000015E4  123C 000C                618                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000015E8  E268                     619                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000015EA                           620                                      ; and the rest are zeroed out)
000015EA  123C 0001                621                      MOVE.B  #1,D1           ; Shift 1 bits right
000015EE  E260                     622                      ASR.W   D1,D0
000015F0                           623  
000015F0  C0FC 0006                624                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000015F4  4EF0 0000                625                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000015F8                           626  
000015F8  4EF9 00001628            627  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
000015FE  4EF9 00001630            628                                          JMP    ANDcode001   ; AND.W
00001604  4EF9 00001638            629                                          JMP    ANDcode010   ; AND.L
0000160A                           630  
0000160A  4EF9 00001640            631                                          JMP    ANDcode011
00001610  4EF9 00001648            632                                          JMP    ANDcode100   ; AND.B
00001616  4EF9 00001650            633                                          JMP    ANDcode101   ; AND.W
0000161C  4EF9 00001658            634                                          JMP    ANDcode110   ; AND.L
00001622  4EF9 00001660            635                                          JMP    ANDcode111   ; MULS.W
00001628                           636  
00001628                           637  
00001628  4EB9 00001F90            638  ANDcode000   JSR     ISANDB
0000162E  4E75                     639               RTS
00001630  4EB9 00001FA6            640  ANDcode001   JSR     ISANDW
00001636  4E75                     641               RTS
00001638  4EB9 00001FBC            642  ANDcode010   JSR     ISANDL
0000163E  4E75                     643               RTS
00001640  4EB9 00001D12            644  ANDcode011   JSR    OPCODE_INVALID              ;INVALID
00001646  4E75                     645               RTS 
00001648  4EB9 00001F90            646  ANDcode100   JSR     ISANDB
0000164E  4E75                     647               RTS
00001650  4EB9 00001FA6            648  ANDcode101   JSR     ISANDW
00001656  4E75                     649               RTS
00001658  4EB9 00001FBC            650  ANDcode110   JSR     ISANDL
0000165E  4E75                     651               RTS
00001660  4EB9 00001F7A            652  ANDcode111   JSR     ISMULSW
00001666  4E75                     653               RTS
00001668                           654  
00001668                           655  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001668                           656  
00001668                           657  *****************************  ADD_BorADD_WorADD_L ************************************
00001668  4FF8 7000                658  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
0000166C  41F9 00001692            659                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
00001672  4280                     660                      CLR.L   D0                  ; Zero it
00001674  303C 42C7                661                      MOVE.W  #example,D0         ; We'll play with it here
00001678  123C 0007                662                      MOVE.B  #7,D1           ; Shift 7 bits left
0000167C  E360                     663                      ASL.W   D1,D0
0000167E  123C 000C                664                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001682  E268                     665                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001684                           666                                      ; and the rest are zeroed out)
00001684  123C 0001                667                      MOVE.B  #1,D1           ; Shift 1 bits right
00001688  E260                     668                      ASR.W   D1,D0
0000168A                           669  
0000168A  C0FC 0006                670                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000168E  4EF0 0000                671                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001692                           672  
00001692  4EF9 000016C2            673  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
00001698  4EF9 000016CA            674                                   JMP    ADDcode001   *ADD.W
0000169E  4EF9 000016D2            675                                   JMP    ADDcode010   *ADD.L
000016A4                           676  
000016A4  4EF9 000016DA            677                                   JMP    ADDcode011   *ADDA.W
000016AA  4EF9 000016E2            678                                   JMP    ADDcode100   *ADD.B
000016B0  4EF9 000016EA            679                                   JMP    ADDcode101   *ADD.W
000016B6  4EF9 000016F2            680                                   JMP    ADDcode110   *ADD.L
000016BC  4EF9 000016FA            681                                   JMP    ADDcode111   *ADDA.L
000016C2                           682  
000016C2                           683  
000016C2  4EB9 00001FFE            684  ADDcode000   JSR     ISADDB
000016C8  4E75                     685               RTS
000016CA  4EB9 00002014            686  ADDcode001   JSR     ISADDW
000016D0  4E75                     687               RTS
000016D2  4EB9 0000202A            688  ADDcode010   JSR     ISADDL
000016D8  4E75                     689               RTS
000016DA  4EB9 00001FD2            690  ADDcode011   JSR     ISADDAW
000016E0  4E75                     691               RTS
000016E2  4EB9 00001FFE            692  ADDcode100   JSR     ISADDB
000016E8  4E75                     693               RTS
000016EA  4EB9 00002014            694  ADDcode101   JSR     ISADDW
000016F0  4E75                     695               RTS
000016F2  4EB9 0000202A            696  ADDcode110   JSR     ISADDL
000016F8  4E75                     697               RTS
000016FA  4EB9 00001FE8            698  ADDcode111   JSR     ISADDAL
00001700  4E75                     699               RTS
00001702                           700  
00001702                           701  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001702                           702  
00001702                           703  *****************************  SUB_BorSUB_WorSUB_L ************************************
00001702  4FF8 7000                704  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
00001706  41F9 0000172C            705                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
0000170C  4280                     706                      CLR.L   D0                  ; Zero it
0000170E  303C 42C7                707                      MOVE.W  #example,D0         ; We'll play with it here
00001712  123C 0007                708                      MOVE.B  #7,D1           ; Shift 7 bits left
00001716  E360                     709                      ASL.W   D1,D0
00001718  123C 000C                710                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000171C  E268                     711                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000171E                           712                                      ; and the rest are zeroed out)
0000171E  123C 0001                713                      MOVE.B  #1,D1           ; Shift 1 bits right
00001722  E260                     714                      ASR.W   D1,D0
00001724                           715  
00001724  C0FC 0006                716                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001728  4EF0 0000                717                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000172C                           718  
0000172C  4EF9 0000175C            719  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
00001732  4EF9 00001764            720                                   JMP    SUBcode001   *SUB.W
00001738  4EF9 0000176C            721                                   JMP    SUBcode010   *SUB.L
0000173E                           722  
0000173E  4EF9 00001774            723                                   JMP    SUBcode011
00001744  4EF9 0000177C            724                                   JMP    SUBcode100   *SUB.B
0000174A  4EF9 00001784            725                                   JMP    SUBcode101   *SUB.W
00001750  4EF9 0000178C            726                                   JMP    SUBcode110   *SUB.L
00001756  4EF9 00001794            727                                   JMP    SUBcode111   ; INVALID
0000175C                           728  
0000175C                           729  
0000175C  4EB9 00002040            730  SUBcode000   JSR     ISSUBB
00001762  4E75                     731               RTS
00001764  4EB9 00002056            732  SUBcode001   JSR     ISSUBW
0000176A  4E75                     733               RTS
0000176C  4EB9 0000206C            734  SUBcode010   JSR     ISSUBL
00001772  4E75                     735               RTS
00001774  4EB9 00001D12            736  SUBcode011   JSR    OPCODE_INVALID              ;INVALID
0000177A  4E75                     737               RTS 
0000177C  4EB9 00002040            738  SUBcode100   JSR     ISSUBB
00001782  4E75                     739               RTS
00001784  4EB9 00002056            740  SUBcode101   JSR     ISSUBW
0000178A  4E75                     741               RTS
0000178C  4EB9 0000206C            742  SUBcode110   JSR     ISSUBL
00001792  4E75                     743               RTS
00001794  4EB9 00001D12            744  SUBcode111   JSR    OPCODE_INVALID              ;INVALID
0000179A  4E75                     745               RTS
0000179C                           746  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
0000179C                           747  
0000179C                           748  
0000179C                           749  ***************************** CMP_BorCMP_WorCMP_L ************************************
0000179C  4FF8 7000                750  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
000017A0  41F9 000017C6            751                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
000017A6  4280                     752                      CLR.L   D0                  ; Zero it
000017A8  303C 42C7                753                      MOVE.W  #example,D0         ; We'll play with it here
000017AC  123C 0008                754                      MOVE.B  #8,D1           ; Shift 8 bits left
000017B0  E360                     755                      ASL.W   D1,D0
000017B2  123C 000C                756                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000017B6  E268                     757                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000017B8                           758                                      ; and the rest are zeroed out)
000017B8  123C 0002                759                      MOVE.B  #2,D1           ; Shift 2 bits right
000017BC  E260                     760                      ASR.W   D1,D0
000017BE                           761  
000017BE  C0FC 0006                762                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000017C2  4EF0 0000                763                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000017C6                           764  
000017C6  4EF9 000017DE            765  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode00   *CMP.B
000017CC  4EF9 000017E6            766                                   JMP    CMPcode01   *CMP.W
000017D2  4EF9 000017EE            767                                   JMP    CMPcode10   *CMP.L
000017D8  4EF9 000017F6            768                                   JMP    CMPcode11   ; INVALID
000017DE                           769  
000017DE                           770  
000017DE  4EB9 00002082            771  CMPcode00   JSR     ISCMPB
000017E4  4E75                     772              RTS
000017E6  4EB9 00002098            773  CMPcode01   JSR     ISCMPW
000017EC  4E75                     774              RTS
000017EE  4EB9 000020AE            775  CMPcode10   JSR     ISCMPL
000017F4  4E75                     776              RTS
000017F6  4EB9 00001D12            777  CMPcode11   JSR    OPCODE_INVALID              ;INVALID
000017FC  4E75                     778              RTS
000017FE                           779   
000017FE                           780  ***************************** END CMP_BorCMP_WorCMP_L ************************************
000017FE                           781  
000017FE                           782  
000017FE                           783  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
000017FE  4FF8 7000                784  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
00001802  41F9 00001828            785                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
00001808  4280                     786                      CLR.L   D0                  ; Zero it
0000180A  303C 42C7                787                      MOVE.W  #example,D0         ; We'll play with it here
0000180E  123C 0008                788                      MOVE.B  #8,D1           ; Shift 8 bits left
00001812  E360                     789                      ASL.W   D1,D0
00001814  123C 000C                790                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001818  E268                     791                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000181A                           792                                      ; and the rest are zeroed out)
0000181A  123C 0002                793                      MOVE.B  #2,D1           ; Shift 2 bits right
0000181E  E260                     794                      ASR.W   D1,D0
00001820                           795  
00001820  C0FC 0006                796                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001824  4EF0 0000                797                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001828                           798  
00001828  4EF9 00001840            799  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
0000182E  4EF9 00001848            800                                      JMP     ADDQcode01   *ADDQ.W
00001834  4EF9 00001850            801                                      JMP     ADDQcode10   *ADDQ.L
0000183A  4EF9 00001858            802                                      JMP     ADDQcode11   ; INVALID
00001840                           803  
00001840  4EB9 000020C4            804  ADDQcode00   JSR     ISADDQB
00001846  4E75                     805              RTS
00001848  4EB9 000020DA            806  ADDQcode01   JSR     ISADDQW
0000184E  4E75                     807              RTS
00001850  4EB9 000020F0            808  ADDQcode10   JSR     ISADDQL
00001856  4E75                     809              RTS
00001858  4EB9 00001D12            810  ADDQcode11   JSR    OPCODE_INVALID              ;INVALID
0000185E  4E75                     811              RTS
00001860                           812  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
00001860                           813  
00001860                           814  
00001860                           815  *****************************someCLR ************************************
00001860  4FF8 7000                816  someCLR     LEA     STACK,SP            ; Load the SP
00001864  41F9 0000188A            817                      LEA     tableSomeCLR, A0            ; Index into the table
0000186A  4280                     818                      CLR.L   D0                  ; Zero it
0000186C  303C 42C7                819                      MOVE.W  #example,D0         ; We'll play with it here
00001870  123C 0008                820                      MOVE.B  #8,D1           ; Shift 8 bits left
00001874  E360                     821                      ASL.W   D1,D0
00001876  123C 000C                822                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000187A  E268                     823                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000187C                           824                                      ; and the rest are zeroed out)
0000187C  123C 0002                825                      MOVE.B  #2,D1           ; Shift 2 bits right
00001880  E260                     826                      ASR.W   D1,D0
00001882                           827  
00001882  C0FC 0006                828                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001886  4EF0 0000                829                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000188A                           830  
0000188A  4EF9 000018A2            831  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001890  4EF9 000018AA            832                      JMP     CLRcode01   *CLR.W
00001896  4EF9 000018B2            833                      JMP     CLRcode10   *CLR.L
0000189C  4EF9 000018BA            834                      JMP     CLRcode11   ; INVALID
000018A2                           835  
000018A2  4EB9 0000211C            836  CLRcode00   JSR     ISCLRB
000018A8  4E75                     837              RTS
000018AA  4EB9 00002132            838  CLRcode01   JSR     ISCLRW
000018B0  4E75                     839              RTS
000018B2  4EB9 00002148            840  CLRcode10   JSR     ISCLRL
000018B8  4E75                     841              RTS
000018BA  4EB9 00001D12            842  CLRcode11   JSR    OPCODE_INVALID              ;INVALID
000018C0  4E75                     843              RTS
000018C2                           844  *****************************END someCLR ************************************
000018C2                           845  
000018C2                           846  *****************************NOPorCLRorRTSorJSR ************************************
000018C2  4FF8 7000                847  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
000018C6  41F9 000018FA            848                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
000018CC  4280                     849                      CLR.L   D0                  ; Zero it
000018CE  303C 42C7                850                      MOVE.W  #example,D0         ; We'll play with it here
000018D2                           851  
000018D2  323C 4E71                852                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
000018D6  B240                     853                      CMP.W   D0, D1
000018D8  6700 0088                854                      BEQ     NOPcommand
000018DC                           855  
000018DC  323C 4E75                856                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
000018E0  B240                     857                      CMP.W   D0, D1
000018E2  6700 0076                858                      BEQ     RTScommand
000018E6                           859  
000018E6  123C 0004                860                      MOVE.B  #4,D1           ; Shift 4 bits left
000018EA  E360                     861                      ASL.W   D1,D0
000018EC  123C 000C                862                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000018F0  E268                     863                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000018F2                           864                                      ; and the rest are zeroed out)
000018F2                           865  
000018F2                           866  
000018F2  C0FC 0006                867                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000018F6  4EF0 0000                868                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000018FA                           869  
000018FA  4EF9 0000196A            870  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
00001900  4EF9 00001972            871                             JMP     JSRorCLRcode0001
00001906  4EF9 0000197A            872                             JMP     JSRorCLRcode0010
0000190C  4EF9 00001980            873                             JMP     JSRorCLRcode0011
00001912  4EF9 00001988            874                             JMP     JSRorCLRcode0100
00001918  4EF9 00001990            875                             JMP     JSRorCLRcode0101
0000191E  4EF9 00001998            876                             JMP     JSRorCLRcode0110
00001924  4EF9 000019A0            877                             JMP     JSRorCLRcode0111
0000192A  4EF9 000019A8            878                             JMP     JSRorCLRcode1000
00001930  4EF9 000019B0            879                             JMP     JSRorCLRcode1001
00001936  4EF9 000019B8            880                             JMP     JSRorCLRcode1010
0000193C  4EF9 000019C0            881                             JMP     JSRorCLRcode1011
00001942  4EF9 000019C8            882                             JMP     JSRorCLRcode1100
00001948  4EF9 000019D0            883                             JMP     JSRorCLRcode1101
0000194E  4EF9 000019D8            884                             JMP     JSRorCLRcode1110
00001954  4EF9 000019E0            885                             JMP     JSRorCLRcode1111
0000195A                           886  
0000195A  4EB9 000021B6            887  RTScommand          JSR     ISRTS
00001960  4E75                     888                      RTS
00001962  4EB9 000021E2            889  NOPcommand          JSR     ISNOP
00001968  4E75                     890                      RTS
0000196A  4EB9 00001D12            891  JSRorCLRcode0000     JSR    OPCODE_INVALID              ;INVALID
00001970  4E75                     892                      RTS 
00001972  4EB9 00001D12            893  JSRorCLRcode0001     JSR    OPCODE_INVALID              ;INVALID
00001978  4E75                     894                      RTS 
0000197A  4EB8 1860                895  JSRorCLRcode0010    JSR      someCLR
0000197E  4E75                     896                      RTS
00001980  4EB9 00001D12            897  JSRorCLRcode0011     JSR    OPCODE_INVALID              ;INVALID
00001986  4E75                     898                      RTS 
00001988  4EB9 00001D12            899  JSRorCLRcode0100     JSR    OPCODE_INVALID              ;INVALID
0000198E  4E75                     900                      RTS 
00001990  4EB9 00001D12            901  JSRorCLRcode0101     JSR    OPCODE_INVALID              ;INVALID
00001996  4E75                     902                      RTS 
00001998  4EB9 00001D12            903  JSRorCLRcode0110     JSR    OPCODE_INVALID              ;INVALID
0000199E  4E75                     904                      RTS 
000019A0  4EB9 00001D12            905  JSRorCLRcode0111     JSR    OPCODE_INVALID              ;INVALID
000019A6  4E75                     906                      RTS 
000019A8  4EB9 00001D12            907  JSRorCLRcode1000     JSR    OPCODE_INVALID              ;INVALID
000019AE  4E75                     908                      RTS 
000019B0  4EB9 00001D12            909  JSRorCLRcode1001     JSR    OPCODE_INVALID              ;INVALID
000019B6  4E75                     910                      RTS 
000019B8  4EB9 00001D12            911  JSRorCLRcode1010     JSR    OPCODE_INVALID              ;INVALID
000019BE  4E75                     912                      RTS 
000019C0  4EB9 00001D12            913  JSRorCLRcode1011     JSR    OPCODE_INVALID              ;INVALID
000019C6  4E75                     914                      RTS 
000019C8  4EB9 00001D12            915  JSRorCLRcode1100     JSR    OPCODE_INVALID              ;INVALID
000019CE  4E75                     916                      RTS 
000019D0  4EB9 00001D12            917  JSRorCLRcode1101     JSR    OPCODE_INVALID              ;INVALID
000019D6  4E75                     918                      RTS 
000019D8  4EB9 000021A0            919  JSRorCLRcode1110    JSR     ISJSR
000019DE  4E75                     920                      RTS
000019E0  4EB9 00001D12            921  JSRorCLRcode1111     JSR    OPCODE_INVALID              ;INVALID
000019E6  4E75                     922                      RTS 
000019E8                           923  
000019E8                           924  *****************************END NOPorCLRorRTSorJSR ************************************
000019E8                           925  
000019E8                           926  
000019E8                           927  *****************************someMOVEM ************************************
000019E8  4FF8 7000                928  someMOVEM     LEA     STACK,SP            ; Load the SP
000019EC  41F9 00001A12            929                      LEA     tableSomeMOVEM, A0            ; Index into the table
000019F2  4280                     930                      CLR.L   D0                  ; Zero it
000019F4  303C 42C7                931                      MOVE.W  #example,D0         ; We'll play with it here
000019F8  123C 0009                932                      MOVE.B  #9,D1           ; Shift 9 bits left
000019FC  E360                     933                      ASL.W   D1,D0
000019FE  123C 000C                934                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001A02  E268                     935                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001A04                           936                                      ; and the rest are zeroed out)
00001A04  123C 0003                937                      MOVE.B  #3,D1           ; Shift 3 bits right
00001A08  E260                     938                      ASR.W   D1,D0
00001A0A                           939  
00001A0A  C0FC 0006                940                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A0E  4EF0 0000                941                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001A12                           942  
00001A12  4EF9 00001A1E            943  tableSomeMOVEM    JMP     MOVEMcode0   ;MOVEM.W
00001A18  4EF9 00001A26            944                    JMP     MOVEMcode1   ;MOVEM.L
00001A1E                           945  
00001A1E                           946  
00001A1E                           947  
00001A1E  4EB9 00002174            948  MOVEMcode0         JSR     ISMOVEMW
00001A24  4E75                     949                      RTS
00001A26  4EB9 0000215E            950  MOVEMcode1         JSR     ISMOVEML
00001A2C  4E75                     951                      RTS
00001A2E                           952  
00001A2E                           953  *****************************END someMOVEM ************************************
00001A2E                           954  
00001A2E                           955  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001A2E  4FF8 7000                956  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
00001A32  41F9 00001A58            957                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001A38  4280                     958                      CLR.L   D0                  ; Zero it
00001A3A  303C 42C7                959                      MOVE.W  #example,D0         ; We'll play with it here
00001A3E  123C 0007                960                      MOVE.B  #7,D1           ; Shift 7 bits right
00001A42  E260                     961                      ASR.W   D1,D0
00001A44                           962  
00001A44  123C 000D                963                      MOVE.B  #13,D1           ; Shift 13 bits left
00001A48  E360                     964                      ASL.W   D1,D0
00001A4A  123C 000C                965                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001A4E  E268                     966                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001A50                           967                                      ; and the rest are zeroed out)
00001A50                           968  
00001A50                           969  
00001A50  C0FC 0006                970                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A54  4EF0 0000                971                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001A58                           972  
00001A58  4EF9 00001AB2            973  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
00001A5E  4EF9 00001ABC            974                                    JMP     LOTScode0001
00001A64  4EF9 00001AC4            975                                    JMP     LOTScode0010
00001A6A  4EF9 00001ACE            976                                    JMP     LOTScode0011
00001A70  4EF9 00001AD6            977                                    JMP     LOTScode0100
00001A76  4EF9 00001ADE            978                                    JMP     LOTScode0101
00001A7C  4EF9 00001AE6            979                                    JMP     LOTScode0110
00001A82  4EF9 00001AF2            980                                    JMP     LOTScode0111
00001A88  4EF9 00001AFA            981                                    JMP     LOTScode1000
00001A8E  4EF9 00001B04            982                                    JMP     LOTScode1001
00001A94  4EF9 00001B0C            983                                    JMP     LOTScode1010
00001A9A  4EF9 00001B16            984                                    JMP     LOTScode1011
00001AA0  4EF9 00001B1E            985                                    JMP     LOTScode1100
00001AA6  4EF9 00001B26            986                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001AAC  4EF9 00001B3A            987                                    JMP     LOTScode1111
00001AB2                           988  
00001AB2                           989  
00001AB2                           990  
00001AB2  4EB8 1186                991  LOTScode0000        JSR   MULSLorDIVUL
00001AB6  4EB9 000022A8            992                      JSR    DONE
00001ABC  4EB9 00001D12            993  LOTScode0001        JSR    OPCODE_INVALID              ;INVALID
00001AC2  4E75                     994                      RTS 
00001AC4  4EB8 19E8                995  LOTScode0010        JSR    someMOVEM
00001AC8  4EB9 000022A8            996                      JSR    DONE
00001ACE  4EB9 00001D12            997  LOTScode0011        JSR    OPCODE_INVALID              ;INVALID
00001AD4  4E75                     998                      RTS 
00001AD6  4EB9 00001D12            999  LOTScode0100        JSR    OPCODE_INVALID              ;INVALID
00001ADC  4E75                    1000                      RTS 
00001ADE  4EB9 00001D12           1001  LOTScode0101        JSR    OPCODE_INVALID              ;INVALID
00001AE4  4E75                    1002                      RTS 
00001AE6  4EB9 0000218A           1003  LOTScode0110        JSR    ISLEA
00001AEC  4EB9 000022A8           1004                      JSR    DONE
00001AF2  4EB9 00001D12           1005  LOTScode0111        JSR    OPCODE_INVALID              ;INVALID
00001AF8  4E75                    1006                      RTS 
00001AFA  4EB8 18C2               1007  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001AFE  4EB9 000022A8           1008                      JSR    DONE
00001B04  4EB9 00001D12           1009  LOTScode1001        JSR    OPCODE_INVALID              ;INVALID
00001B0A  4E75                    1010                      RTS 
00001B0C  4EB8 18C2               1011  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001B10  4EB9 000022A8           1012                      JSR    DONE
00001B16  4EB9 00001D12           1013  LOTScode1011        JSR    OPCODE_INVALID              ;INVALID
00001B1C  4E75                    1014                      RTS 
00001B1E  4EB9 00001D12           1015  LOTScode1100        JSR    OPCODE_INVALID              ;INVALID
00001B24  4E75                    1016                      RTS 
00001B26  4EB9 00001D12           1017  LOTScode1101        JSR    OPCODE_INVALID              ;INVALID
00001B2C  4E75                    1018                      RTS 
00001B2E  4EB9 0000218A           1019  LOTScode1110        JSR    ISLEA
00001B34  4EB9 000022A8           1020                      JSR    DONE
00001B3A  4EB9 00001D12           1021  LOTScode1111        JSR    OPCODE_INVALID              ;INVALID
00001B40  4E75                    1022                      RTS 
00001B42                          1023  
00001B42                          1024  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001B42                          1025  
00001B42                          1026  
00001B42                          1027  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001B42  4FF8 7000               1028  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001B46  41F9 00001B66           1029                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001B4C  4280                    1030                      CLR.L   D0                  ; Zero it
00001B4E  303C 42C7               1031                      MOVE.W  #example,D0         ; We'll play with it here
00001B52  123C 0007               1032                      MOVE.B  #7,D1           ; Shift 7 bits left
00001B56  E360                    1033                      ASL.W   D1,D0
00001B58  123C 000D               1034                      MOVE.B  #13,D1
00001B5C  E260                    1035                      ASR.W   D1,D0
00001B5E                          1036  
00001B5E                          1037  
00001B5E  C0FC 0006               1038                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B62  4EF0 0000               1039                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001B66                          1040  
00001B66  4EF9 00001B7E           1041  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001B6C  4EF9 00001B8A           1042                                 JMP     ADDIWcode01
00001B72  4EF9 00001B96           1043                                 JMP     ADDILcode10
00001B78  4EF9 00001BA2           1044                                 JMP     ADDILcode11
00001B7E                          1045  
00001B7E                          1046  
00001B7E  4EB9 00002292           1047  ADDIBcode00        JSR     ISADDIB
00001B84  4EB9 000022A8           1048                      JSR    DONE
00001B8A  4EB9 00002266           1049  ADDIWcode01        JSR     ISADDIW
00001B90  4EB9 000022A8           1050                      JSR    DONE
00001B96  4EB9 0000227C           1051  ADDILcode10        JSR     ISADDIL
00001B9C  4EB9 000022A8           1052                      JSR    DONE
00001BA2  4EB9 00001D12           1053  ADDILcode11        JSR    OPCODE_INVALID              ;INVALID
00001BA8  4E75                    1054                      RTS 
00001BAA                          1055  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001BAA                          1056  
00001BAA                          1057  
00001BAA                          1058  
00001BAA                          1059  
00001BAA                          1060  *****************************MOVEA_LorMOVE_L ************************************
00001BAA  4FF8 7000               1061  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001BAE  41F9 00001BCE           1062                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001BB4  4280                    1063                      CLR.L   D0                  ; Zero it
00001BB6  303C 42C7               1064                      MOVE.W  #example,D0         ; We'll play with it here
00001BBA  123C 0007               1065                      MOVE.B  #7,D1           ; Shift 7 bits left
00001BBE  E360                    1066                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001BC0  123C 000D               1067                      MOVE.B  #13,D1           ; Shift 13 bits right
00001BC4  E260                    1068                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001BC6                          1069  
00001BC6                          1070  
00001BC6  C0FC 0006               1071                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001BCA  4EF0 0000               1072                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001BCE                          1073  
00001BCE  4EF9 00001BFE           1074  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001BD4  4EF9 00001C0A           1075                          JMP     MOVEAcode001
00001BDA  4EF9 00001C16           1076                          JMP     MOVEcode010
00001BE0  4EF9 00001C22           1077                          JMP     MOVEcode011
00001BE6  4EF9 00001C2E           1078                          JMP     MOVEcode100
00001BEC  4EF9 00001C3A           1079                          JMP     MOVEcode101
00001BF2  4EF9 00001C46           1080                          JMP     MOVEcode110
00001BF8  4EF9 00001C52           1081                          JMP     MOVEcode111
00001BFE                          1082  
00001BFE  4EB9 00002224           1083  MOVEcode000     JSR     ISMOVEL
00001C04  4EB9 000022A8           1084                  JSR    DONE
00001C0A  4EB9 0000223A           1085  MOVEAcode001    JSR     ISMOVEAL
00001C10  4EB9 000022A8           1086                  JSR    DONE
00001C16  4EB9 00002224           1087  MOVEcode010     JSR     ISMOVEL
00001C1C  4EB9 000022A8           1088                  JSR    DONE
00001C22  4EB9 00002224           1089  MOVEcode011     JSR     ISMOVEL
00001C28  4EB9 000022A8           1090                  JSR    DONE
00001C2E  4EB9 00002224           1091  MOVEcode100     JSR     ISMOVEL
00001C34  4EB9 000022A8           1092                  JSR    DONE
00001C3A  4EB9 00002224           1093  MOVEcode101     JSR     ISMOVEL
00001C40  4EB9 000022A8           1094                  JSR    DONE
00001C46  4EB9 00002224           1095  MOVEcode110     JSR     ISMOVEL
00001C4C  4EB9 000022A8           1096                  JSR    DONE
00001C52  4EB9 00002224           1097  MOVEcode111     JSR     ISMOVEL
00001C58  4EB9 000022A8           1098                  JSR    DONE
00001C5E                          1099  *****************************END MOVEA_LorMOVE_L ************************************
00001C5E                          1100  
00001C5E                          1101  *****************************MOVEA_WorMOVE_W ************************************
00001C5E  4FF8 7000               1102  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001C62  41F9 00001C82           1103                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001C68  4280                    1104                      CLR.L   D0                  ; Zero it
00001C6A  303C 42C7               1105                      MOVE.W  #example,D0         ; We'll play with it here
00001C6E  123C 0007               1106                      MOVE.B  #7,D1           ; Shift 7 bits left
00001C72  E360                    1107                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001C74  123C 000D               1108                      MOVE.B  #13,D1           ; Shift 13 bits right
00001C78  E260                    1109                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001C7A                          1110  
00001C7A                          1111  
00001C7A  C0FC 0006               1112                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001C7E  4EF0 0000               1113                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001C82                          1114  
00001C82  4EF9 00001CB2           1115  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001C88  4EF9 00001CBE           1116                          JMP     MOVEAWcode001
00001C8E  4EF9 00001CCA           1117                          JMP     MOVEWcode010
00001C94  4EF9 00001CD6           1118                          JMP     MOVEWcode011
00001C9A  4EF9 00001CE2           1119                          JMP     MOVEWcode100
00001CA0  4EF9 00001CEE           1120                          JMP     MOVEWcode101
00001CA6  4EF9 00001CFA           1121                          JMP     MOVEWcode110
00001CAC  4EF9 00001D06           1122                          JMP     MOVEWcode111
00001CB2                          1123  
00001CB2  4EB9 000021F8           1124  MOVEWcode000     JSR     ISMOVEW
00001CB8  4EB9 000022A8           1125                  JSR    DONE
00001CBE  4EB9 0000220E           1126  MOVEAWcode001    JSR     ISMOVEAW
00001CC4  4EB9 000022A8           1127                  JSR    DONE
00001CCA  4EB9 000021F8           1128  MOVEWcode010     JSR     ISMOVEW
00001CD0  4EB9 000022A8           1129                  JSR    DONE
00001CD6  4EB9 000021F8           1130  MOVEWcode011     JSR     ISMOVEW
00001CDC  4EB9 000022A8           1131                  JSR    DONE
00001CE2  4EB9 000021F8           1132  MOVEWcode100     JSR     ISMOVEW
00001CE8  4EB9 000022A8           1133                  JSR    DONE
00001CEE  4EB9 000021F8           1134  MOVEWcode101     JSR     ISMOVEW
00001CF4  4EB9 000022A8           1135                  JSR    DONE
00001CFA  4EB9 000021F8           1136  MOVEWcode110     JSR     ISMOVEW
00001D00  4EB9 000022A8           1137                  JSR    DONE
00001D06  4EB9 000021F8           1138  MOVEWcode111     JSR     ISMOVEW
00001D0C  4EB9 000022A8           1139                  JSR    DONE
00001D12                          1140  *****************************END MOVEA_WorMOVE_W ************************************
00001D12  48A7 FFFF               1141  OPCODE_INVALID  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D16  43F9 000024B4           1142              LEA MESSAGEOPCODE_INVALID, A1
00001D1C  103C 000E               1143              MOVE.B  #14, D0
00001D20  4E4F                    1144              TRAP    #15
00001D22                          1145  
00001D22  4C9F FFFF               1146              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D26  4E75                    1147              RTS
00001D28                          1148  
00001D28  48A7 FFFF               1149  ISBCC  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D2C  43F9 000024A2           1150              LEA MESSAGEBCC, A1
00001D32  103C 000E               1151              MOVE.B  #14, D0
00001D36  4E4F                    1152              TRAP    #15
00001D38                          1153  
00001D38  4C9F FFFF               1154              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D3C  4E75                    1155              RTS
00001D3E  48A7 FFFF               1156  ISBGT  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D42  43F9 000024A8           1157              LEA MESSAGEBGT, A1
00001D48  103C 000E               1158              MOVE.B  #14, D0
00001D4C  4E4F                    1159              TRAP    #15
00001D4E                          1160  
00001D4E  4C9F FFFF               1161              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D52  4E75                    1162              RTS
00001D54                          1163  
00001D54  48A7 FFFF               1164  ISBLE  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D58  43F9 000024AE           1165              LEA MESSAGEBLE, A1
00001D5E  103C 000E               1166              MOVE.B  #14, D0
00001D62  4E4F                    1167              TRAP    #15
00001D64                          1168  
00001D64  4C9F FFFF               1169              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D68  4E75                    1170              RTS
00001D6A                          1171  
00001D6A  48A7 FFFF               1172  ISDIVUL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D6E  43F9 00002499           1173              LEA MESSAGEDIVUL, A1
00001D74  103C 000E               1174              MOVE.B  #14, D0
00001D78  4E4F                    1175              TRAP    #15
00001D7A                          1176  
00001D7A  4C9F FFFF               1177              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D7E  4E75                    1178              RTS
00001D80                          1179  
00001D80  48A7 FFFF               1180  ISDIVUW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D84  43F9 00002490           1181              LEA MESSAGEDIVUW, A1
00001D8A  103C 000E               1182              MOVE.B  #14, D0
00001D8E  4E4F                    1183              TRAP    #15
00001D90                          1184  
00001D90  4C9F FFFF               1185              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D94  4E75                    1186              RTS
00001D96                          1187  
00001D96  48A7 FFFF               1188  ISORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D9A  43F9 0000247B           1189              LEA MESSAGEORB, A1
00001DA0  103C 000E               1190              MOVE.B  #14, D0
00001DA4  4E4F                    1191              TRAP    #15
00001DA6                          1192  
00001DA6  4C9F FFFF               1193              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DAA  4E75                    1194              RTS
00001DAC                          1195  
00001DAC  48A7 FFFF               1196  ISORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DB0  43F9 00002482           1197              LEA MESSAGEORW, A1
00001DB6  103C 000E               1198              MOVE.B  #14, D0
00001DBA  4E4F                    1199              TRAP    #15
00001DBC                          1200  
00001DBC  4C9F FFFF               1201              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DC0  4E75                    1202              RTS
00001DC2                          1203  
00001DC2  48A7 FFFF               1204  ISORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DC6  43F9 00002489           1205              LEA MESSAGEORL, A1
00001DCC  103C 000E               1206              MOVE.B  #14, D0
00001DD0  4E4F                    1207              TRAP    #15
00001DD2                          1208  
00001DD2  4C9F FFFF               1209              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DD6  4E75                    1210              RTS
00001DD8                          1211  
00001DD8  48A7 FFFF               1212  ISASRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DDC  43F9 000023EB           1213              LEA MESSAGEASRB, A1
00001DE2  103C 000E               1214              MOVE.B  #14, D0
00001DE6  4E4F                    1215              TRAP    #15
00001DE8                          1216  
00001DE8  4C9F FFFF               1217              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DEC  4E75                    1218              RTS
00001DEE                          1219  
00001DEE  48A7 FFFF               1220  ISASRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DF2  43F9 000023F3           1221              LEA MESSAGEASRW, A1
00001DF8  103C 000E               1222              MOVE.B  #14, D0
00001DFC  4E4F                    1223              TRAP    #15
00001DFE                          1224  
00001DFE  4C9F FFFF               1225              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E02  4E75                    1226              RTS
00001E04                          1227  
00001E04  48A7 FFFF               1228  ISASRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E08  43F9 000023FB           1229              LEA MESSAGEASRL, A1
00001E0E  103C 000E               1230              MOVE.B  #14, D0
00001E12  4E4F                    1231              TRAP    #15
00001E14                          1232  
00001E14  4C9F FFFF               1233              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E18  4E75                    1234              RTS
00001E1A                          1235  
00001E1A  48A7 FFFF               1236  ISASLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E1E  43F9 00002403           1237              LEA MESSAGEASLB, A1
00001E24  103C 000E               1238              MOVE.B  #14, D0
00001E28  4E4F                    1239              TRAP    #15
00001E2A                          1240  
00001E2A  4C9F FFFF               1241              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E2E  4E75                    1242              RTS
00001E30                          1243  
00001E30  48A7 FFFF               1244  ISASLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E34  43F9 0000240B           1245              LEA MESSAGEASLW, A1
00001E3A  103C 000E               1246              MOVE.B  #14, D0
00001E3E  4E4F                    1247              TRAP    #15
00001E40                          1248  
00001E40  4C9F FFFF               1249              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E44  4E75                    1250              RTS
00001E46                          1251  
00001E46  48A7 FFFF               1252  ISASLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E4A  43F9 00002413           1253              LEA MESSAGEASLL, A1
00001E50  103C 000E               1254              MOVE.B  #14, D0
00001E54  4E4F                    1255              TRAP    #15
00001E56                          1256  
00001E56  4C9F FFFF               1257              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E5A  4E75                    1258              RTS
00001E5C                          1259  
00001E5C  48A7 FFFF               1260  ISLSRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E60  43F9 0000244B           1261              LEA MESSAGELSRB, A1
00001E66  103C 000E               1262              MOVE.B  #14, D0
00001E6A  4E4F                    1263              TRAP    #15
00001E6C                          1264  
00001E6C  4C9F FFFF               1265              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E70  4E75                    1266              RTS
00001E72                          1267  
00001E72  48A7 FFFF               1268  ISLSRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E76  43F9 00002453           1269              LEA MESSAGELSRW, A1
00001E7C  103C 000E               1270              MOVE.B  #14, D0
00001E80  4E4F                    1271              TRAP    #15
00001E82                          1272  
00001E82  4C9F FFFF               1273              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E86  4E75                    1274              RTS
00001E88                          1275  
00001E88  48A7 FFFF               1276  ISLSRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E8C  43F9 0000245B           1277              LEA MESSAGELSRL, A1
00001E92  103C 000E               1278              MOVE.B  #14, D0
00001E96  4E4F                    1279              TRAP    #15
00001E98                          1280  
00001E98  4C9F FFFF               1281              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E9C  4E75                    1282              RTS
00001E9E                          1283  
00001E9E  48A7 FFFF               1284  ISLSLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EA2  43F9 00002463           1285              LEA MESSAGELSLB, A1
00001EA8  103C 000E               1286              MOVE.B  #14, D0
00001EAC  4E4F                    1287              TRAP    #15
00001EAE                          1288  
00001EAE  4C9F FFFF               1289              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EB2  4E75                    1290              RTS
00001EB4                          1291  
00001EB4  48A7 FFFF               1292  ISLSLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EB8  43F9 0000246B           1293              LEA MESSAGELSLW, A1
00001EBE  103C 000E               1294              MOVE.B  #14, D0
00001EC2  4E4F                    1295              TRAP    #15
00001EC4                          1296  
00001EC4  4C9F FFFF               1297              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EC8  4E75                    1298              RTS
00001ECA                          1299  
00001ECA  48A7 FFFF               1300  ISLSLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001ECE  43F9 00002473           1301              LEA MESSAGELSLL, A1
00001ED4  103C 000E               1302              MOVE.B  #14, D0
00001ED8  4E4F                    1303              TRAP    #15
00001EDA                          1304  
00001EDA  4C9F FFFF               1305              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EDE  4E75                    1306              RTS
00001EE0                          1307  
00001EE0  48A7 FFFF               1308  ISRORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EE4  43F9 0000241B           1309              LEA MESSAGERORB, A1
00001EEA  103C 000E               1310              MOVE.B  #14, D0
00001EEE  4E4F                    1311              TRAP    #15
00001EF0                          1312  
00001EF0  4C9F FFFF               1313              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EF4  4E75                    1314              RTS
00001EF6                          1315  
00001EF6  48A7 FFFF               1316  ISRORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EFA  43F9 00002423           1317              LEA MESSAGERORW, A1
00001F00  103C 000E               1318              MOVE.B  #14, D0
00001F04  4E4F                    1319              TRAP    #15
00001F06                          1320  
00001F06  4C9F FFFF               1321              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F0A  4E75                    1322              RTS
00001F0C                          1323  
00001F0C  48A7 FFFF               1324  ISRORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F10  43F9 0000242B           1325              LEA MESSAGERORL, A1
00001F16  103C 000E               1326              MOVE.B  #14, D0
00001F1A  4E4F                    1327              TRAP    #15
00001F1C                          1328  
00001F1C  4C9F FFFF               1329              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F20  4E75                    1330              RTS
00001F22                          1331  
00001F22  48A7 FFFF               1332  ISROLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F26  43F9 00002433           1333              LEA MESSAGEROLB, A1
00001F2C  103C 000E               1334              MOVE.B  #14, D0
00001F30  4E4F                    1335              TRAP    #15
00001F32                          1336  
00001F32  4C9F FFFF               1337              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F36  4E75                    1338              RTS
00001F38                          1339  
00001F38  48A7 FFFF               1340  ISROLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F3C  43F9 0000243B           1341              LEA MESSAGEROLW, A1
00001F42  103C 000E               1342              MOVE.B  #14, D0
00001F46  4E4F                    1343              TRAP    #15
00001F48                          1344  
00001F48  4C9F FFFF               1345              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F4C  4E75                    1346              RTS
00001F4E                          1347  
00001F4E  48A7 FFFF               1348  ISROLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F52  43F9 00002443           1349              LEA MESSAGEROLL, A1
00001F58  103C 000E               1350              MOVE.B  #14, D0
00001F5C  4E4F                    1351              TRAP    #15
00001F5E                          1352  
00001F5E  4C9F FFFF               1353              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F62  4E75                    1354              RTS
00001F64                          1355  
00001F64  48A7 FFFF               1356  ISMULSL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F68  43F9 000023E2           1357              LEA MESSAGEMULSL, A1         *OPCODE is MULS.L
00001F6E  103C 000E               1358              MOVE.B  #14, D0
00001F72  4E4F                    1359              TRAP    #15
00001F74                          1360  
00001F74  4C9F FFFF               1361              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F78  4E75                    1362              RTS
00001F7A                          1363  
00001F7A  48A7 FFFF               1364  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F7E  43F9 000023D9           1365              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001F84  103C 000E               1366              MOVE.B  #14, D0
00001F88  4E4F                    1367              TRAP    #15
00001F8A                          1368  
00001F8A  4C9F FFFF               1369              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F8E  4E75                    1370              RTS
00001F90                          1371  
00001F90  48A7 FFFF               1372  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F94  43F9 000023C1           1373              LEA MESSAGEANDB, A1         *OPCODE is AND.B
00001F9A  103C 000E               1374              MOVE.B  #14, D0
00001F9E  4E4F                    1375              TRAP    #15
00001FA0                          1376  
00001FA0  4C9F FFFF               1377              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FA4  4E75                    1378              RTS
00001FA6                          1379  
00001FA6  48A7 FFFF               1380  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FAA  43F9 000023C9           1381              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001FB0  103C 000E               1382              MOVE.B  #14, D0
00001FB4  4E4F                    1383              TRAP    #15
00001FB6                          1384  
00001FB6  4C9F FFFF               1385              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FBA  4E75                    1386              RTS
00001FBC                          1387  
00001FBC  48A7 FFFF               1388  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FC0  43F9 000023D1           1389              LEA MESSAGEANDL, A1         *OPCODE is AND.L
00001FC6  103C 000E               1390              MOVE.B  #14, D0
00001FCA  4E4F                    1391              TRAP    #15
00001FCC                          1392  
00001FCC  4C9F FFFF               1393              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FD0  4E75                    1394              RTS
00001FD2                          1395  
00001FD2  48A7 FFFF               1396  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FD6  43F9 000023A5           1397              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001FDC  103C 000E               1398              MOVE.B  #14, D0
00001FE0  4E4F                    1399              TRAP    #15
00001FE2                          1400  
00001FE2  4C9F FFFF               1401              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FE6  4E75                    1402              RTS
00001FE8                          1403  
00001FE8  48A7 FFFF               1404  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FEC  43F9 000023AE           1405              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001FF2  103C 000E               1406              MOVE.B  #14, D0
00001FF6  4E4F                    1407              TRAP    #15
00001FF8                          1408  
00001FF8  4C9F FFFF               1409              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FFC  4E75                    1410              RTS
00001FFE                          1411  
00001FFE  48A7 FFFF               1412  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002002  43F9 0000238D           1413              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
00002008  103C 000E               1414              MOVE.B  #14, D0
0000200C  4E4F                    1415              TRAP    #15
0000200E                          1416  
0000200E  4C9F FFFF               1417              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002012  4E75                    1418              RTS
00002014                          1419  
00002014  48A7 FFFF               1420  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002018  43F9 00002395           1421              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
0000201E  103C 000E               1422              MOVE.B  #14, D0
00002022  4E4F                    1423              TRAP    #15
00002024                          1424  
00002024  4C9F FFFF               1425              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002028  4E75                    1426              RTS
0000202A                          1427  
0000202A  48A7 FFFF               1428  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000202E  43F9 0000239D           1429              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
00002034  103C 000E               1430              MOVE.B  #14, D0
00002038  4E4F                    1431              TRAP    #15
0000203A                          1432  
0000203A  4C9F FFFF               1433              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000203E  4E75                    1434              RTS
00002040                          1435  
00002040  48A7 FFFF               1436  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002044  43F9 00002375           1437              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
0000204A  103C 000E               1438              MOVE.B  #14, D0
0000204E  4E4F                    1439              TRAP    #15
00002050                          1440  
00002050  4C9F FFFF               1441              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002054  4E75                    1442              RTS
00002056                          1443  
00002056  48A7 FFFF               1444  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000205A  43F9 0000237D           1445              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00002060  103C 000E               1446              MOVE.B  #14, D0
00002064  4E4F                    1447              TRAP    #15
00002066                          1448  
00002066  4C9F FFFF               1449              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000206A  4E75                    1450              RTS
0000206C                          1451  
0000206C  48A7 FFFF               1452  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002070  43F9 00002385           1453              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
00002076  103C 000E               1454              MOVE.B  #14, D0
0000207A  4E4F                    1455              TRAP    #15
0000207C                          1456  
0000207C  4C9F FFFF               1457              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002080  4E75                    1458              RTS
00002082                          1459  
00002082  48A7 FFFF               1460  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002086  43F9 0000235D           1461              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
0000208C  103C 000E               1462              MOVE.B  #14, D0
00002090  4E4F                    1463              TRAP    #15
00002092                          1464  
00002092  4C9F FFFF               1465              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002096  4E75                    1466              RTS
00002098                          1467  
00002098  48A7 FFFF               1468  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000209C  43F9 00002365           1469              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
000020A2  103C 000E               1470              MOVE.B  #14, D0
000020A6  4E4F                    1471              TRAP    #15
000020A8                          1472  
000020A8  4C9F FFFF               1473              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020AC  4E75                    1474              RTS
000020AE                          1475  
000020AE  48A7 FFFF               1476  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020B2  43F9 0000236D           1477              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
000020B8  103C 000E               1478              MOVE.B  #14, D0
000020BC  4E4F                    1479              TRAP    #15
000020BE                          1480  
000020BE  4C9F FFFF               1481              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020C2  4E75                    1482              RTS
000020C4                          1483  
000020C4  48A7 FFFF               1484  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020C8  43F9 00002342           1485              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
000020CE  103C 000E               1486              MOVE.B  #14, D0
000020D2  4E4F                    1487              TRAP    #15
000020D4                          1488  
000020D4  4C9F FFFF               1489              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020D8  4E75                    1490              RTS
000020DA                          1491  
000020DA  48A7 FFFF               1492  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020DE  43F9 0000234B           1493              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
000020E4  103C 000E               1494              MOVE.B  #14, D0
000020E8  4E4F                    1495              TRAP    #15
000020EA                          1496  
000020EA  4C9F FFFF               1497              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020EE  4E75                    1498              RTS
000020F0                          1499  
000020F0  48A7 FFFF               1500  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020F4  43F9 00002354           1501              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
000020FA  103C 000E               1502              MOVE.B  #14, D0
000020FE  4E4F                    1503              TRAP    #15
00002100                          1504  
00002100  4C9F FFFF               1505              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002104  4E75                    1506              RTS
00002106                          1507  
00002106  48A7 FFFF               1508  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000210A  43F9 000023B7           1509              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00002110  103C 000E               1510              MOVE.B  #14, D0
00002114  4E4F                    1511              TRAP    #15
00002116                          1512  
00002116  4C9F FFFF               1513              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000211A  4E75                    1514              RTS
0000211C                          1515  
0000211C  48A7 FFFF               1516  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002120  43F9 0000232A           1517              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00002126  103C 000E               1518              MOVE.B  #14, D0
0000212A  4E4F                    1519              TRAP    #15
0000212C                          1520  
0000212C  4C9F FFFF               1521              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002130  4E75                    1522              RTS
00002132                          1523  
00002132  48A7 FFFF               1524  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002136  43F9 00002332           1525              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
0000213C  103C 000E               1526              MOVE.B  #14, D0
00002140  4E4F                    1527              TRAP    #15
00002142                          1528  
00002142  4C9F FFFF               1529              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002146  4E75                    1530              RTS
00002148                          1531  
00002148  48A7 FFFF               1532  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000214C  43F9 0000233A           1533              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
00002152  103C 000E               1534              MOVE.B  #14, D0
00002156  4E4F                    1535              TRAP    #15
00002158                          1536  
00002158  4C9F FFFF               1537              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000215C  4E75                    1538              RTS
0000215E                          1539  
0000215E  48A7 FFFF               1540  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002162  43F9 000022FE           1541              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L
00002168  103C 000E               1542              MOVE.B  #14, D0
0000216C  4E4F                    1543              TRAP    #15
0000216E                          1544  
0000216E  4C9F FFFF               1545              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002172  4E75                    1546              RTS
00002174                          1547  
00002174  48A7 FFFF               1548  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002178  43F9 00002308           1549              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W
0000217E  103C 000E               1550              MOVE.B  #14, D0
00002182  4E4F                    1551              TRAP    #15
00002184                          1552  
00002184  4C9F FFFF               1553              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002188  4E75                    1554              RTS
0000218A                          1555  
0000218A  48A7 FFFF               1556  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000218E  43F9 00002324           1557              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
00002194  103C 000E               1558              MOVE.B  #14, D0
00002198  4E4F                    1559              TRAP    #15
0000219A                          1560  
0000219A  4C9F FFFF               1561              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000219E  4E75                    1562              RTS                          ; Exit subroutine
000021A0                          1563  
000021A0  48A7 FFFF               1564  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021A4  43F9 00002312           1565              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
000021AA  103C 000E               1566              MOVE.B  #14, D0
000021AE  4E4F                    1567              TRAP    #15
000021B0  4C9F FFFF               1568              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021B4  4E75                    1569              RTS                          ; Exit subroutine
000021B6                          1570  
000021B6  48A7 FFFF               1571  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021BA  43F9 0000231E           1572              LEA MESSAGERTS, A1         *OPCODE is RTS
000021C0  103C 000E               1573              MOVE.B  #14, D0
000021C4  4E4F                    1574              TRAP    #15
000021C6  4C9F FFFF               1575              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021CA  4E75                    1576              RTS
000021CC                          1577  
000021CC  48A7 FFFF               1578  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021D0  43F9 00002318           1579              LEA MESSAGECLR, A1         *OPCODE is CLR
000021D6  103C 000E               1580              MOVE.B  #14, D0
000021DA  4E4F                    1581              TRAP    #15
000021DC  4C9F FFFF               1582              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021E0  4E75                    1583              RTS
000021E2                          1584  
000021E2  48A7 FFFF               1585  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021E6  43F9 000022AE           1586              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
000021EC  103C 000E               1587              MOVE.B  #14, D0
000021F0  4E4F                    1588              TRAP    #15
000021F2  4C9F FFFF               1589              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021F6  4E75                    1590              RTS                          ; Exit subroutine
000021F8                          1591  
000021F8  48A7 FFFF               1592  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021FC  43F9 000022B4           1593              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00002202  103C 000E               1594              MOVE.B  #14, D0
00002206  4E4F                    1595              TRAP    #15
00002208                          1596  
00002208  4C9F FFFF               1597              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000220C  4E75                    1598              RTS                          ; Exit subroutine
0000220E                          1599  
0000220E  48A7 FFFF               1600  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002212  43F9 000022F4           1601              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
00002218  103C 000E               1602              MOVE.B  #14, D0
0000221C  4E4F                    1603              TRAP    #15
0000221E                          1604  
0000221E  4C9F FFFF               1605              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002222  4E75                    1606              RTS                          ; Exit subroutine
00002224                          1607  
00002224  48A7 FFFF               1608  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002228  43F9 000022BD           1609              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
0000222E  103C 000E               1610              MOVE.B  #14, D0
00002232  4E4F                    1611              TRAP    #15
00002234                          1612  
00002234  4C9F FFFF               1613              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002238  4E75                    1614              RTS                          ; Exit subroutine
0000223A                          1615  
0000223A  48A7 FFFF               1616  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000223E  43F9 000022EA           1617              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
00002244  103C 000E               1618              MOVE.B  #14, D0
00002248  4E4F                    1619              TRAP    #15
0000224A                          1620  
0000224A  4C9F FFFF               1621              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000224E  4E75                    1622              RTS                          ; Exit subroutine
00002250                          1623  
00002250  48A7 FFFF               1624  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002254  43F9 000022C6           1625              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
0000225A  103C 000E               1626              MOVE.B  #14, D0
0000225E  4E4F                    1627              TRAP    #15
00002260                          1628  
00002260  4C9F FFFF               1629              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002264  4E75                    1630              RTS                          ; Exit subroutine
00002266                          1631  
00002266  48A7 FFFF               1632  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000226A  43F9 000022CF           1633              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
00002270  103C 000E               1634              MOVE.B  #14, D0
00002274  4E4F                    1635              TRAP    #15
00002276                          1636  
00002276  4C9F FFFF               1637              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000227A  4E75                    1638              RTS                          ; Exit subroutine
0000227C                          1639  
0000227C  48A7 FFFF               1640  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002280  43F9 000022D8           1641              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
00002286  103C 000E               1642              MOVE.B  #14, D0
0000228A  4E4F                    1643              TRAP    #15
0000228C                          1644  
0000228C  4C9F FFFF               1645              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002290  4E75                    1646              RTS                          ; Exit subroutine
00002292                          1647  
00002292  48A7 FFFF               1648  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002296  43F9 000022E1           1649              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
0000229C  103C 000E               1650              MOVE.B  #14, D0
000022A0  4E4F                    1651              TRAP    #15
000022A2                          1652  
000022A2  4C9F FFFF               1653              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000022A6  4E75                    1654              RTS                          ; Exit subroutine
000022A8                          1655  
000022A8  103C 0009               1656  DONE        MOVE.B      #9, D0
000022AC  4E4F                    1657              TRAP        #15
000022AE                          1658  
000022AE  =0000000D               1659  CR  EQU     $0D
000022AE  =0000000A               1660  LF  EQU     $0A
000022AE= 4E 4F 50 0D 0A 00       1661  MESSAGENOP DC.B    'NOP',CR,LF, 0
000022B4                          1662  
000022B4= 4D 4F 56 45 2E 57 ...   1663  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0
000022BD= 4D 4F 56 45 2E 4C ...   1664  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0
000022C6= 4D 4F 56 45 2E 42 ...   1665  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0
000022CF                          1666  
000022CF= 41 44 44 49 2E 57 ...   1667  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0
000022D8= 41 44 44 49 2E 4C ...   1668  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0
000022E1= 41 44 44 49 2E 42 ...   1669  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0
000022EA                          1670  
000022EA= 4D 4F 56 45 41 2E ...   1671  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0
000022F4= 4D 4F 56 45 41 2E ...   1672  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0
000022FE                          1673  
000022FE= 4D 4F 56 45 4D 2E ...   1674  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0
00002308= 4D 4F 56 45 4D 2E ...   1675  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0
00002312                          1676  
00002312= 4A 53 52 0D 0A 00       1677  MESSAGEJSR DC.B    'JSR',CR,LF, 0
00002318                          1678  
00002318= 43 4C 52 0D 0A 00       1679  MESSAGECLR DC.B    'CLR',CR,LF, 0
0000231E                          1680  
0000231E= 52 54 53 0D 0A 00       1681  MESSAGERTS DC.B    'RTS',CR,LF, 0
00002324                          1682  
00002324= 4C 45 41 0D 0A 00       1683  MESSAGELEA DC.B    'LEA',CR,LF, 0
0000232A                          1684  
0000232A= 43 4C 52 2E 42 0D ...   1685  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0
00002332= 43 4C 52 2E 57 0D ...   1686  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
0000233A= 43 4C 52 2E 4C 0D ...   1687  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00002342                          1688  
00002342= 41 44 44 51 2E 42 ...   1689  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0
0000234B= 41 44 44 51 2E 57 ...   1690  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
00002354= 41 44 44 51 2E 4C ...   1691  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
0000235D                          1692  
0000235D= 43 4D 50 2E 42 0D ...   1693  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0
00002365= 43 4D 50 2E 57 0D ...   1694  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
0000236D= 43 4D 50 2E 4C 0D ...   1695  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
00002375                          1696  
00002375= 53 55 42 2E 42 0D ...   1697  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0
0000237D= 53 55 42 2E 57 0D ...   1698  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
00002385= 53 55 42 2E 4C 0D ...   1699  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
0000238D                          1700  
0000238D= 41 44 44 2E 42 0D ...   1701  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0
00002395= 41 44 44 2E 57 0D ...   1702  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
0000239D= 41 44 44 2E 4C 0D ...   1703  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
000023A5                          1704  
000023A5= 41 44 44 41 2E 57 ...   1705  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
000023AE= 41 44 44 41 2E 4C ...   1706  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
000023B7                          1707  
000023B7= 4D 4F 56 45 51 2E ...   1708  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
000023C1                          1709  
000023C1= 41 4E 44 2E 42 0D ...   1710  MESSAGEANDB DC.B    'AND.B',CR,LF, 0
000023C9= 41 4E 44 2E 57 0D ...   1711  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
000023D1= 41 4E 44 2E 4C 0D ...   1712  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
000023D9                          1713  
000023D9= 4D 55 4C 53 2E 57 ...   1714  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
000023E2= 4D 55 4C 53 2E 4C ...   1715  MESSAGEMULSL DC.B    'MULS.L',CR,LF, 0
000023EB                          1716  
000023EB= 41 53 52 2E 42 0D ...   1717  MESSAGEASRB DC.B    'ASR.B',CR,LF, 0
000023F3= 41 53 52 2E 57 0D ...   1718  MESSAGEASRW DC.B    'ASR.W',CR,LF, 0
000023FB= 41 53 52 2E 4C 0D ...   1719  MESSAGEASRL DC.B    'ASR.L',CR,LF, 0
00002403                          1720  
00002403= 41 53 4C 2E 42 0D ...   1721  MESSAGEASLB DC.B    'ASL.B',CR,LF, 0
0000240B= 41 53 4C 2E 57 0D ...   1722  MESSAGEASLW DC.B    'ASL.W',CR,LF, 0
00002413= 41 53 4C 2E 4C 0D ...   1723  MESSAGEASLL DC.B    'ASL.L',CR,LF, 0
0000241B                          1724  
0000241B= 52 4F 52 2E 42 0D ...   1725  MESSAGERORB DC.B    'ROR.B',CR,LF, 0
00002423= 52 4F 52 2E 57 0D ...   1726  MESSAGERORW DC.B    'ROR.W',CR,LF, 0
0000242B= 52 4F 52 2E 4C 0D ...   1727  MESSAGERORL DC.B    'ROR.L',CR,LF, 0
00002433                          1728  
00002433= 52 4F 4C 2E 42 0D ...   1729  MESSAGEROLB DC.B    'ROL.B',CR,LF, 0
0000243B= 52 4F 4C 2E 57 0D ...   1730  MESSAGEROLW DC.B    'ROL.W',CR,LF, 0
00002443= 52 4F 4C 2E 4C 0D ...   1731  MESSAGEROLL DC.B    'ROL.L',CR,LF, 0
0000244B                          1732  
0000244B= 4C 53 52 2E 42 0D ...   1733  MESSAGELSRB DC.B    'LSR.B',CR,LF, 0
00002453= 4C 53 52 2E 57 0D ...   1734  MESSAGELSRW DC.B    'LSR.W',CR,LF, 0
0000245B= 4C 53 52 2E 4C 0D ...   1735  MESSAGELSRL DC.B    'LSR.L',CR,LF, 0
00002463                          1736  
00002463= 4C 53 4C 2E 42 0D ...   1737  MESSAGELSLB DC.B    'LSL.B',CR,LF, 0
0000246B= 4C 53 4C 2E 57 0D ...   1738  MESSAGELSLW DC.B    'LSL.W',CR,LF, 0
00002473= 4C 53 4C 2E 4C 0D ...   1739  MESSAGELSLL DC.B    'LSL.L',CR,LF, 0
0000247B                          1740  
0000247B= 4F 52 2E 42 0D 0A 00    1741  MESSAGEORB DC.B    'OR.B',CR,LF, 0
00002482= 4F 52 2E 57 0D 0A 00    1742  MESSAGEORW DC.B    'OR.W',CR,LF, 0
00002489= 4F 52 2E 4C 0D 0A 00    1743  MESSAGEORL DC.B    'OR.L',CR,LF, 0
00002490                          1744  
00002490= 44 49 56 55 2E 57 ...   1745  MESSAGEDIVUW DC.B    'DIVU.W',CR,LF, 0
00002499= 44 49 56 55 2E 4C ...   1746  MESSAGEDIVUL DC.B    'DIVU.L',CR,LF, 0
000024A2                          1747  
000024A2= 42 43 43 0D 0A 00       1748  MESSAGEBCC DC.B    'BCC',CR,LF, 0
000024A8= 42 47 54 0D 0A 00       1749  MESSAGEBGT DC.B    'BGT',CR,LF, 0
000024AE= 42 4C 45 0D 0A 00       1750  MESSAGEBLE DC.B    'BLE',CR,LF, 0
000024B4                          1751  
000024B4= 54 68 61 74 20 69 ...   1752  MESSAGEOPCODE_INVALID DC.B    'That is not an opcode!',CR,LF, 0
000024CD                          1753  
000024CE  FFFF FFFF               1754      SIMHALT             ; halt simulator
000024D2                          1755  
000024D2                          1756  * Put variables and constants here
000024D2                          1757  
000024D2                          1758      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          16C2
ADDCODE001          16CA
ADDCODE010          16D2
ADDCODE011          16DA
ADDCODE100          16E2
ADDCODE101          16EA
ADDCODE110          16F2
ADDCODE111          16FA
ADDIBCODE00         1B7E
ADDILCODE10         1B96
ADDILCODE11         1BA2
ADDIWCODE01         1B8A
ADDI_BORADDI_WORADDI_L  1B42
ADDQCODE00          1840
ADDQCODE01          1848
ADDQCODE10          1850
ADDQCODE11          1858
ADDQ_BORADDQ_WORADDQ_L  17FE
ADD_BORADD_WORADD_L  1668
ANDCODE000          1628
ANDCODE001          1630
ANDCODE010          1638
ANDCODE011          1640
ANDCODE100          1648
ANDCODE101          1650
ANDCODE110          1658
ANDCODE111          1660
AND_BORAND_WORAND_LORMULS_W  15CE
ASLCODE00           1304
ASLCODE01           130C
ASLCODE10           1314
ASLCODE11           131C
ASL_ASR             1530
ASL_ASRCODE0        1566
ASL_ASRCODE1        156C
ASRCODE00           12A2
ASRCODE01           12AA
ASRCODE10           12B2
ASRCODE11           12BA
BCCORBGTORBLE       1124
BCCORBGTORBLECODE00  1166
BCCORBGTORBLECODE01  116E
BCCORBGTORBLECODE10  1176
BCCORBGTORBLECODE11  117E
CLRCODE00           18A2
CLRCODE01           18AA
CLRCODE10           18B2
CLRCODE11           18BA
CMPCODE00           17DE
CMPCODE01           17E6
CMPCODE10           17EE
CMPCODE11           17F6
CMP_BORCMP_WORCMP_L  179C
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10C0
CODE1000            10CC
CODE1001            10D8
CODE1010            10E4
CODE1011            10EC
CODE1100            10F8
CODE1101            1104
CODE1110            1110
CODE1111            111C
CR                  D
DONE                22A8
EXAMPLE             42C7
ISADDAL             1FE8
ISADDAW             1FD2
ISADDB              1FFE
ISADDIB             2292
ISADDIL             227C
ISADDIW             2266
ISADDL              202A
ISADDQB             20C4
ISADDQL             20F0
ISADDQW             20DA
ISADDW              2014
ISANDB              1F90
ISANDL              1FBC
ISANDW              1FA6
ISASLB              1E1A
ISASLL              1E46
ISASLW              1E30
ISASRB              1DD8
ISASRL              1E04
ISASRW              1DEE
ISBCC               1D28
ISBGT               1D3E
ISBLE               1D54
ISCLR               21CC
ISCLRB              211C
ISCLRL              2148
ISCLRW              2132
ISCMPB              2082
ISCMPL              20AE
ISCMPW              2098
ISDIVUL             1D6A
ISDIVUW             1D80
ISJSR               21A0
ISLEA               218A
ISLSLB              1E9E
ISLSLL              1ECA
ISLSLW              1EB4
ISLSRB              1E5C
ISLSRL              1E88
ISLSRW              1E72
ISMOVEAL            223A
ISMOVEAW            220E
ISMOVEB             2250
ISMOVEL             2224
ISMOVEML            215E
ISMOVEMW            2174
ISMOVEQL            2106
ISMOVEW             21F8
ISMULSL             1F64
ISMULSW             1F7A
ISNOP               21E2
ISORB               1D96
ISORL               1DC2
ISORW               1DAC
ISROLB              1F22
ISROLL              1F4E
ISROLW              1F38
ISRORB              1EE0
ISRORL              1F0C
ISRORW              1EF6
ISRTS               21B6
ISSUBB              2040
ISSUBL              206C
ISSUBW              2056
JSRORCLRCODE0000    196A
JSRORCLRCODE0001    1972
JSRORCLRCODE0010    197A
JSRORCLRCODE0011    1980
JSRORCLRCODE0100    1988
JSRORCLRCODE0101    1990
JSRORCLRCODE0110    1998
JSRORCLRCODE0111    19A0
JSRORCLRCODE1000    19A8
JSRORCLRCODE1001    19B0
JSRORCLRCODE1010    19B8
JSRORCLRCODE1011    19C0
JSRORCLRCODE1100    19C8
JSRORCLRCODE1101    19D0
JSRORCLRCODE1110    19D8
JSRORCLRCODE1111    19E0
LF                  A
LOTSCODE0000        1AB2
LOTSCODE0001        1ABC
LOTSCODE0010        1AC4
LOTSCODE0011        1ACE
LOTSCODE0100        1AD6
LOTSCODE0101        1ADE
LOTSCODE0110        1AE6
LOTSCODE0111        1AF2
LOTSCODE1000        1AFA
LOTSCODE1001        1B04
LOTSCODE1010        1B0C
LOTSCODE1011        1B16
LOTSCODE1100        1B1E
LOTSCODE1101        1B26
LOTSCODE1110        1B2E
LOTSCODE1111        1B3A
LSLCODE00           13C8
LSLCODE01           13D0
LSLCODE10           13D8
LSLCODE11           13E0
LSL_LSR             14EE
LSL_LSRCODE0        1524
LSL_LSRCODE1        152A
LSRCODE00           1366
LSRCODE01           136E
LSRCODE10           1376
LSRCODE11           137E
MESSAGEADDAL        23AE
MESSAGEADDAW        23A5
MESSAGEADDB         238D
MESSAGEADDIB        22E1
MESSAGEADDIL        22D8
MESSAGEADDIW        22CF
MESSAGEADDL         239D
MESSAGEADDQB        2342
MESSAGEADDQL        2354
MESSAGEADDQW        234B
MESSAGEADDW         2395
MESSAGEANDB         23C1
MESSAGEANDL         23D1
MESSAGEANDW         23C9
MESSAGEASLB         2403
MESSAGEASLL         2413
MESSAGEASLW         240B
MESSAGEASRB         23EB
MESSAGEASRL         23FB
MESSAGEASRW         23F3
MESSAGEBCC          24A2
MESSAGEBGT          24A8
MESSAGEBLE          24AE
MESSAGECLR          2318
MESSAGECLRB         232A
MESSAGECLRL         233A
MESSAGECLRW         2332
MESSAGECMPB         235D
MESSAGECMPL         236D
MESSAGECMPW         2365
MESSAGEDIVUL        2499
MESSAGEDIVUW        2490
MESSAGEJSR          2312
MESSAGELEA          2324
MESSAGELSLB         2463
MESSAGELSLL         2473
MESSAGELSLW         246B
MESSAGELSRB         244B
MESSAGELSRL         245B
MESSAGELSRW         2453
MESSAGEMOVEAL       22EA
MESSAGEMOVEAW       22F4
MESSAGEMOVEB        22C6
MESSAGEMOVEL        22BD
MESSAGEMOVEML       22FE
MESSAGEMOVEMW       2308
MESSAGEMOVEQL       23B7
MESSAGEMOVEW        22B4
MESSAGEMULSL        23E2
MESSAGEMULSW        23D9
MESSAGENOP          22AE
MESSAGEOPCODE_INVALID  24B4
MESSAGEORB          247B
MESSAGEORL          2489
MESSAGEORW          2482
MESSAGEROLB         2433
MESSAGEROLL         2443
MESSAGEROLW         243B
MESSAGERORB         241B
MESSAGERORL         242B
MESSAGERORW         2423
MESSAGERTS          231E
MESSAGESUBB         2375
MESSAGESUBL         2385
MESSAGESUBW         237D
MOVEACODE001        1C0A
MOVEAWCODE001       1CBE
MOVEA_LORMOVE_L     1BAA
MOVEA_WORMOVE_W     1C5E
MOVECODE000         1BFE
MOVECODE010         1C16
MOVECODE011         1C22
MOVECODE100         1C2E
MOVECODE101         1C3A
MOVECODE110         1C46
MOVECODE111         1C52
MOVEMCODE0          1A1E
MOVEMCODE1          1A26
MOVEWCODE000        1CB2
MOVEWCODE010        1CCA
MOVEWCODE011        1CD6
MOVEWCODE100        1CE2
MOVEWCODE101        1CEE
MOVEWCODE110        1CFA
MOVEWCODE111        1D06
MULSLORDIVUL        1186
MULSLORDIVULCODE0   11B6
MULSLORDIVULCODE1   11BE
NOPCOMMAND          1962
NOPORCLRORRTSORJSR  18C2
NOP_MOVEM_LEA_JSR_CLR_RTS  1A2E
OPCODE_INVALID      1D12
OR_BOROR_WOROR_LORDIVU  11C6
OR_DIVUCODE000      1220
OR_DIVUCODE001      1228
OR_DIVUCODE010      1230
OR_DIVUCODE011      1238
OR_DIVUCODE100      1240
OR_DIVUCODE101      1248
OR_DIVUCODE110      1250
OR_DIVUCODE111      1258
ROD_LSD_ASD         1572
ROD_LSD_ASDCODE00   15B4
ROD_LSD_ASDCODE01   15BA
ROD_LSD_ASDCODE10   15C0
ROD_LSD_ASDCODE11   15C8
ROLCODE00           142A
ROLCODE01           1432
ROLCODE10           143A
ROLCODE11           1442
ROL_ROR             14AC
ROL_RORCODE0        14E2
ROL_RORCODE1        14E8
RORCODE00           148C
RORCODE01           1494
RORCODE10           149C
RORCODE11           14A4
RTSCOMMAND          195A
SHIFT               C
SOMEASL             12C2
SOMEASR             1260
SOMECLR             1860
SOMELSL             1386
SOMELSR             1324
SOMEMOVEM           19E8
SOMEROL             13E8
SOMEROR             144A
STACK               7000
START               1000
SUBCODE000          175C
SUBCODE001          1764
SUBCODE010          176C
SUBCODE011          1774
SUBCODE100          177C
SUBCODE101          1784
SUBCODE110          178C
SUBCODE111          1794
SUB_BORSUB_WORSUB_L  1702
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1B66
TABLEADDQ_BORADDQ_WORADDQ_L  1828
TABLEADD_BORADD_WORADD_L  1692
TABLEAND_BORAND_WORAND_LORMULS_W  15F8
TABLEASL_ASR        155A
TABLEBCCORBGTORBLE  114E
TABLECMP_BORCMP_WORCMP_L  17C6
TABLELSL_LSR        1518
TABLEMOVEA_LORMOVE_L  1BCE
TABLEMOVEA_WORMOVE_W  1C82
TABLEMULSLORDIVUL   11AA
TABLENOPORCLRORRTSORJSR  18FA
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  1A58
TABLEOR_BOROR_WOROR_LORDIVU  11F0
TABLEROD_LSD_ASD    159C
TABLEROL_ROR        14D6
TABLESOMEASL        12EC
TABLESOMEASR        128A
TABLESOMECLR        188A
TABLESOMELSL        13B0
TABLESOMELSR        134E
TABLESOMEMOVEM      1A12
TABLESOMEROL        1412
TABLESOMEROR        1474
TABLESUB_BORSUB_WORSUB_L  172C
