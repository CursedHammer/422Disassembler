00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/15/2016 2:14:25 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000                            57  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000                            60  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            61  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            62  
00001000                            63  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            64  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            65  
00001000                            66  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            67  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            68  
00001000  =0000C9C3                 69  example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            70  
00001000  =0000000C                 71  shift   EQU     12                 ; Shift 12 bits 
00001000                            72  
00001000                            73  * Program starts here
00001000                            74  
00001000  4FF8 7000                 75          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E             76          LEA     table,A0            ; Index into the table
0000100A  4280                      77          CLR.L   D0                  ; Zero it
0000100C  303C C9C3                 78          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                 79          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                      80          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                            81                                      ; and the rest are zeroed out)
00001016  C0FC 0006                 82          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                 83          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                            84  
0000101E  4EF9 0000107E             85  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084             86          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090             87          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096             88          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C             89          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS
0000103C  4EF9 000010A8             90          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4             91          JMP     code0110
00001048  4EF9 000010B8             92          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4             93          JMP     code1000
00001054  4EF9 000010C8             94          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010D4             95          JMP     code1010
00001060  4EF9 000010D8             96          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010E4             97          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 000010F0             98          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 000010FC             99          JMP     code1110
00001078  4EF9 00001100            100          JMP     code1111
0000107E                           101         
0000107E                           102  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           103  
0000107E  4EB9 0000165C            104  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 00001AF4            105  code0001 JSR   ISMOVEB
0000108A  4EB9 00001B4C            106           JSR   DONE
00001090  4EB9 000016B6            107  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 0000176A            108  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 00001576            109  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 00001B4C            110           JSR    DONE
000010A8  4EB9 00001370            111  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 00001B4C            112           JSR    DONE
000010B4  4E72 2700                113  code0110 STOP  #$2700
000010B8  4EB9 000019AA            114  code0111 JSR    ISMOVEQL
000010BE  4EB9 00001B4C            115           JSR    DONE
000010C4  4E72 2700                116  code1000 STOP  #$2700
000010C8  4EB9 00001270            117  code1001 JSR    SUB_BorSUB_WorSUB_L
000010CE  4EB9 00001B4C            118           JSR    DONE
000010D4  4E72 2700                119  code1010 STOP  #$2700
000010D8  4EB9 00001310            120  code1011 JSR    CMP_BorCMP_WorCMP_L
000010DE  4EB9 00001B4C            121           JSR DONE
000010E4  4EB9 00001104            122  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010EA  4EB9 00001B4C            123           JSR    DONE
000010F0  4EB9 000011B6            124  code1101 JSR    ADD_BorADD_WorADD_L
000010F6  4EB9 00001B4C            125           JSR    DONE
000010FC  4E72 2700                126  code1110 STOP  #$2700
00001100  4E72 2700                127  code1111 STOP  #$2700
00001104                           128  
00001104                           129  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
00001104  4FF8 7000                130  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
00001108  41F9 0000112E            131                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
0000110E  4280                     132                      CLR.L   D0                  ; Zero it
00001110  303C C9C3                133                      MOVE.W  #example,D0         ; We'll play with it here
00001114  123C 0007                134                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001118  E360                     135                      ASL.W   D1,D0            
0000111A  123C 000C                136                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000111E  E268                     137                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001120                           138                                      ; and the rest are zeroed out)           
00001120  123C 0001                139                      MOVE.B  #1,D1           ; Shift 1 bits right
00001124  E260                     140                      ASR.W   D1,D0 
00001126                           141                      
00001126  C0FC 0006                142                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000112A  4EB0 0000                143                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000112E                           144  
0000112E  4EF9 0000115E            145  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
00001134  4EF9 0000116A            146                                          JMP    ANDcode001   ; AND.W                                     
0000113A  4EF9 00001176            147                                          JMP    ANDcode010   ; AND.L
00001140                           148                                   
00001140  4EF9 00001182            149                                          JMP    ANDcode011   
00001146  4EF9 00001186            150                                          JMP    ANDcode100   ; AND.B
0000114C  4EF9 00001192            151                                          JMP    ANDcode101   ; AND.W 
00001152  4EF9 0000119E            152                                          JMP    ANDcode110   ; AND.L
00001158  4EF9 000011AA            153                                          JMP    ANDcode111   ; MULS.W
0000115E                           154  
0000115E                           155  
0000115E  4EB9 00001834            156  ANDcode000   JSR     ISANDB
00001164  4EB9 00001B4C            157               JSR     DONE
0000116A  4EB9 0000184A            158  ANDcode001   JSR     ISANDW  
00001170  4EB9 00001B4C            159               JSR     DONE                                 
00001176  4EB9 00001860            160  ANDcode010   JSR     ISANDL 
0000117C  4EB9 00001B4C            161               JSR     DONE  
00001182  4E72 2700                162  ANDcode011   STOP  #$2700
00001186  4EB9 00001834            163  ANDcode100   JSR     ISANDB
0000118C  4EB9 00001B4C            164               JSR     DONE
00001192  4EB9 0000184A            165  ANDcode101   JSR     ISANDW  
00001198  4EB9 00001B4C            166               JSR     DONE                                 
0000119E  4EB9 00001860            167  ANDcode110   JSR     ISANDL 
000011A4  4EB9 00001B4C            168               JSR     DONE 
000011AA  4EB9 0000181E            169  ANDcode111   JSR     ISMULSW
000011B0  4EB9 00001B4C            170               JSR     DONE
000011B6                           171     
000011B6                           172  ***************************** END  ADD_BorADD_WorADD_L ************************************
000011B6                           173  
000011B6                           174  *****************************  ADD_BorADD_WorADD_L ************************************
000011B6  4FF8 7000                175  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
000011BA  41F9 000011E0            176                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
000011C0  4280                     177                      CLR.L   D0                  ; Zero it
000011C2  303C C9C3                178                      MOVE.W  #example,D0         ; We'll play with it here
000011C6  123C 0007                179                      MOVE.B  #7,D1           ; Shift 7 bits left 
000011CA  E360                     180                      ASL.W   D1,D0            
000011CC  123C 000C                181                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011D0  E268                     182                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011D2                           183                                      ; and the rest are zeroed out)           
000011D2  123C 0001                184                      MOVE.B  #1,D1           ; Shift 1 bits right
000011D6  E260                     185                      ASR.W   D1,D0 
000011D8                           186                      
000011D8  C0FC 0006                187                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011DC  4EB0 0000                188                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011E0                           189  
000011E0  4EF9 00001210            190  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
000011E6  4EF9 0000121C            191                                   JMP    ADDcode001   *ADD.W                                      
000011EC  4EF9 00001228            192                                   JMP    ADDcode010   *ADD.L
000011F2                           193                                   
000011F2  4EF9 00001234            194                                   JMP    ADDcode011   *ADDA.W
000011F8  4EF9 00001240            195                                   JMP    ADDcode100   *ADD.B
000011FE  4EF9 0000124C            196                                   JMP    ADDcode101   *ADD.W 
00001204  4EF9 00001258            197                                   JMP    ADDcode110   *ADD.L
0000120A  4EF9 00001264            198                                   JMP    ADDcode111   *ADDA.L
00001210                           199  
00001210                           200  
00001210  4EB9 000018A2            201  ADDcode000   JSR     ISADDB
00001216  4EB9 00001B4C            202               JSR     DONE
0000121C  4EB9 000018B8            203  ADDcode001   JSR     ISADDW  
00001222  4EB9 00001B4C            204               JSR     DONE                                 
00001228  4EB9 000018CE            205  ADDcode010   JSR     ISADDL 
0000122E  4EB9 00001B4C            206               JSR     DONE  
00001234  4EB9 00001876            207  ADDcode011   JSR     ISADDAW
0000123A  4EB9 00001B4C            208               JSR     DONE
00001240  4EB9 000018A2            209  ADDcode100   JSR     ISADDB
00001246  4EB9 00001B4C            210               JSR     DONE
0000124C  4EB9 000018B8            211  ADDcode101   JSR     ISADDW  
00001252  4EB9 00001B4C            212               JSR     DONE                                 
00001258  4EB9 000018CE            213  ADDcode110   JSR     ISADDL 
0000125E  4EB9 00001B4C            214               JSR     DONE 
00001264  4EB9 0000188C            215  ADDcode111   JSR     ISADDAL
0000126A  4EB9 00001B4C            216               JSR     DONE
00001270                           217     
00001270                           218  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001270                           219  
00001270                           220  *****************************  SUB_BorSUB_WorSUB_L ************************************
00001270  4FF8 7000                221  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
00001274  41F9 0000129A            222                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
0000127A  4280                     223                      CLR.L   D0                  ; Zero it
0000127C  303C C9C3                224                      MOVE.W  #example,D0         ; We'll play with it here
00001280  123C 0007                225                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001284  E360                     226                      ASL.W   D1,D0            
00001286  123C 000C                227                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000128A  E268                     228                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000128C                           229                                      ; and the rest are zeroed out)           
0000128C  123C 0001                230                      MOVE.B  #1,D1           ; Shift 1 bits right
00001290  E260                     231                      ASR.W   D1,D0 
00001292                           232                      
00001292  C0FC 0006                233                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001296  4EB0 0000                234                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000129A                           235  
0000129A  4EF9 000012C4            236  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
000012A0  4EF9 000012D0            237                                   JMP    SUBcode001   *SUB.W                                      
000012A6  4EF9 000012DC            238                                   JMP    SUBcode010   *SUB.L
000012AC                           239                                   
000012AC  4EF9 000012E8            240                                   JMP    SUBcode011   
000012B2  4EF9 000012EC            241                                   JMP    SUBcode100   *SUB.B
000012B8  4EF9 000012F8            242                                   JMP    SUBcode101   *SUB.W 
000012BE  4EF9 00001304            243                                   JMP    SUBcode110   *SUB.L
000012C4                           244     
000012C4                           245  
000012C4                           246  
000012C4  4EB9 000018E4            247  SUBcode000   JSR     ISSUBB
000012CA  4EB9 00001B4C            248               JSR     DONE
000012D0  4EB9 000018FA            249  SUBcode001   JSR     ISSUBW  
000012D6  4EB9 00001B4C            250               JSR     DONE                                 
000012DC  4EB9 00001910            251  SUBcode010   JSR     ISSUBL 
000012E2  4EB9 00001B4C            252               JSR     DONE  
000012E8  4E72 2700                253  SUBcode011   STOP  #$2700 
000012EC  4EB9 000018E4            254  SUBcode100   JSR     ISSUBB
000012F2  4EB9 00001B4C            255               JSR     DONE
000012F8  4EB9 000018FA            256  SUBcode101   JSR     ISSUBW  
000012FE  4EB9 00001B4C            257               JSR     DONE                                 
00001304  4EB9 00001910            258  SUBcode110   JSR     ISSUBL 
0000130A  4EB9 00001B4C            259               JSR     DONE 
00001310                           260     
00001310                           261  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
00001310                           262  
00001310                           263  
00001310                           264  ***************************** CMP_BorCMP_WorCMP_L ************************************
00001310  4FF8 7000                265  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
00001314  41F9 0000133A            266                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
0000131A  4280                     267                      CLR.L   D0                  ; Zero it
0000131C  303C C9C3                268                      MOVE.W  #example,D0         ; We'll play with it here
00001320  123C 0007                269                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001324  E360                     270                      ASL.W   D1,D0            
00001326  123C 000C                271                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000132A  E268                     272                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000132C                           273                                      ; and the rest are zeroed out)           
0000132C  123C 0001                274                      MOVE.B  #1,D1           ; Shift 1 bits right
00001330  E260                     275                      ASR.W   D1,D0 
00001332                           276                      
00001332  C0FC 0006                277                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001336  4EB0 0000                278                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000133A                           279  
0000133A  4EF9 0000134C            280  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
00001340  4EF9 00001358            281                                   JMP    CMPcode001   *CMP.W                                      
00001346  4EF9 00001364            282                                   JMP    CMPcode010   *CMP.L
0000134C                           283  
0000134C  4EB9 00001926            284  CMPcode000   JSR     ISCMPB
00001352  4EB9 00001B4C            285              JSR     DONE
00001358  4EB9 0000193C            286  CMPcode001   JSR     ISCMPW  
0000135E  4EB9 00001B4C            287              JSR     DONE                                 
00001364  4EB9 00001952            288  CMPcode010   JSR     ISCMPL 
0000136A  4EB9 00001B4C            289              JSR     DONE                    
00001370                           290  
00001370                           291  ***************************** END CMP_BorCMP_WorCMP_L ************************************
00001370                           292  
00001370                           293  
00001370                           294  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
00001370  4FF8 7000                295  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
00001374  41F9 0000139A            296                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
0000137A  4280                     297                      CLR.L   D0                  ; Zero it
0000137C  303C C9C3                298                      MOVE.W  #example,D0         ; We'll play with it here
00001380  123C 0008                299                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001384  E360                     300                      ASL.W   D1,D0            
00001386  123C 000C                301                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000138A  E268                     302                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000138C                           303                                      ; and the rest are zeroed out)           
0000138C  123C 0002                304                      MOVE.B  #2,D1           ; Shift 2 bits right
00001390  E260                     305                      ASR.W   D1,D0 
00001392                           306                      
00001392  C0FC 0006                307                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001396  4EB0 0000                308                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000139A                           309  
0000139A  4EF9 000013AC            310  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
000013A0  4EF9 000013B8            311                                      JMP     ADDQcode01   *ADDQ.W                                      
000013A6  4EF9 000013C4            312                                      JMP     ADDQcode10   *ADDQ.L
000013AC                           313  
000013AC  4EB9 00001968            314  ADDQcode00   JSR     ISADDQB
000013B2  4EB9 00001B4C            315              JSR     DONE
000013B8  4EB9 0000197E            316  ADDQcode01   JSR     ISADDQW  
000013BE  4EB9 00001B4C            317              JSR     DONE                                 
000013C4  4EB9 00001994            318  ADDQcode10   JSR     ISADDQL 
000013CA  4EB9 00001B4C            319              JSR     DONE                    
000013D0                           320  
000013D0                           321  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
000013D0                           322  
000013D0                           323  
000013D0                           324  *****************************someCLR ************************************
000013D0  4FF8 7000                325  someCLR     LEA     STACK,SP            ; Load the SP
000013D4  41F9 000013FA            326                      LEA     tableSomeCLR, A0            ; Index into the table
000013DA  4280                     327                      CLR.L   D0                  ; Zero it
000013DC  303C C9C3                328                      MOVE.W  #example,D0         ; We'll play with it here
000013E0  123C 0008                329                      MOVE.B  #8,D1           ; Shift 8 bits left 
000013E4  E360                     330                      ASL.W   D1,D0            
000013E6  123C 000C                331                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013EA  E268                     332                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013EC                           333                                      ; and the rest are zeroed out)           
000013EC  123C 0002                334                      MOVE.B  #2,D1           ; Shift 2 bits right
000013F0  E260                     335                      ASR.W   D1,D0 
000013F2                           336                      
000013F2  C0FC 0006                337                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013F6  4EB0 0000                338                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013FA                           339  
000013FA  4EF9 0000140C            340  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001400  4EF9 00001418            341                      JMP     CLRcode01   *CLR.W                                      
00001406  4EF9 00001424            342                      JMP     CLRcode10   *CLR.L
0000140C                           343  
0000140C  4EB9 000019C0            344  CLRcode00   JSR     ISCLRB
00001412  4EB9 00001B4C            345              JSR     DONE
00001418  4EB9 000019D6            346  CLRcode01   JSR     ISCLRW  
0000141E  4EB9 00001B4C            347              JSR     DONE                                 
00001424  4EB9 000019EC            348  CLRcode10   JSR     ISCLRL  
0000142A  4EB9 00001B4C            349              JSR     DONE                    
00001430                           350  
00001430                           351  *****************************END someCLR ************************************
00001430                           352  
00001430                           353  *****************************NOPorCLRorRTSorJSR ************************************
00001430  4FF8 7000                354  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
00001434  41F9 00001468            355                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
0000143A  4280                     356                      CLR.L   D0                  ; Zero it
0000143C  303C C9C3                357                      MOVE.W  #example,D0         ; We'll play with it here
00001440                           358                      
00001440  323C 4E71                359                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
00001444  B240                     360                      CMP.W   D0, D1
00001446  6700 008C                361                      BEQ     NOPcommand
0000144A                           362   
0000144A  323C 4E75                363                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
0000144E  B240                     364                      CMP.W   D0, D1
00001450  6700 0076                365                      BEQ     RTScommand
00001454                           366    
00001454  123C 0004                367                      MOVE.B  #4,D1           ; Shift 4 bits left 
00001458  E360                     368                      ASL.W   D1,D0            
0000145A  123C 000C                369                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000145E  E268                     370                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001460                           371                                      ; and the rest are zeroed out)           
00001460                           372    
00001460                           373                      
00001460  C0FC 0006                374                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001464  4EB0 0000                375                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001468                           376  
00001468  4EF9 000014E0            377  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
0000146E  4EF9 000014E4            378                             JMP     JSRorCLRcode0001
00001474  4EF9 000014E8            379                             JMP     JSRorCLRcode0010   
0000147A  4EF9 000014F2            380                             JMP     JSRorCLRcode0011
00001480  4EF9 000014F6            381                             JMP     JSRorCLRcode0100
00001486  4EF9 000014FA            382                             JMP     JSRorCLRcode0101
0000148C  4EF9 000014FE            383                             JMP     JSRorCLRcode0110
00001492  4EF9 00001502            384                             JMP     JSRorCLRcode0111
00001498  4EF9 00001506            385                             JMP     JSRorCLRcode1000
0000149E  4EF9 0000150A            386                             JMP     JSRorCLRcode1001
000014A4  4EF9 0000150E            387                             JMP     JSRorCLRcode1010
000014AA  4EF9 00001512            388                             JMP     JSRorCLRcode1011
000014B0  4EF9 00001516            389                             JMP     JSRorCLRcode1100
000014B6  4EF9 0000151A            390                             JMP     JSRorCLRcode1101
000014BC  4EF9 0000151E            391                             JMP     JSRorCLRcode1110
000014C2  4EF9 0000152A            392                             JMP     JSRorCLRcode1111
000014C8                           393  
000014C8  4EB9 00001A5A            394  RTScommand          JSR     ISRTS
000014CE  4EB9 00001B4C            395                      JSR     DONE
000014D4  4EB9 00001A86            396  NOPcommand          JSR     ISNOP 
000014DA  4EB9 00001B4C            397                      JSR     DONE                                                                  
000014E0  4E72 2700                398  JSRorCLRcode0000     STOP  #$2700
000014E4  4E72 2700                399  JSRorCLRcode0001     STOP  #$2700
000014E8  4EB8 13D0                400  JSRorCLRcode0010    JSR      someCLR
000014EC  4EB9 00001B4C            401                      JSR     DONE
000014F2  4E72 2700                402  JSRorCLRcode0011     STOP  #$2700
000014F6  4E72 2700                403  JSRorCLRcode0100     STOP  #$2700
000014FA  4E72 2700                404  JSRorCLRcode0101     STOP  #$2700
000014FE  4E72 2700                405  JSRorCLRcode0110     STOP  #$2700
00001502  4E72 2700                406  JSRorCLRcode0111     STOP  #$2700
00001506  4E72 2700                407  JSRorCLRcode1000     STOP  #$2700
0000150A  4E72 2700                408  JSRorCLRcode1001     STOP  #$2700
0000150E  4E72 2700                409  JSRorCLRcode1010     STOP  #$2700
00001512  4E72 2700                410  JSRorCLRcode1011     STOP  #$2700
00001516  4E72 2700                411  JSRorCLRcode1100     STOP  #$2700
0000151A  4E72 2700                412  JSRorCLRcode1101     STOP  #$2700
0000151E  4EB9 00001A44            413  JSRorCLRcode1110    JSR     ISJSR
00001524  4EB9 00001B4C            414                      JSR     DONE
0000152A  4E72 2700                415  JSRorCLRcode1111     STOP  #$2700
0000152E                           416  
0000152E                           417  *****************************END NOPorCLRorRTSorJSR ************************************
0000152E                           418  
0000152E                           419  
0000152E                           420  *****************************someMOVEM ************************************
0000152E  4FF8 7000                421  someMOVEM     LEA     STACK,SP            ; Load the SP
00001532  41F9 00001552            422                      LEA     tableSomeMOVEM, A0            ; Index into the table
00001538  4280                     423                      CLR.L   D0                  ; Zero it
0000153A  303C C9C3                424                      MOVE.W  #example,D0         ; We'll play with it here
0000153E  123C 0009                425                      MOVE.B  #9,D1           ; Shift 9 bits left 
00001542  E360                     426                      ASL.W   D1,D0            
00001544  123C 000C                427                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001548  E268                     428                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000154A                           429                                      ; and the rest are zeroed out)           
0000154A                           430    
0000154A                           431                      
0000154A  C0FC 0006                432                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000154E  4EB0 0000                433                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001552                           434  
00001552  4EF9 0000155E            435  tableSomeMOVEM    JMP     MOVEMcode00   ;MOVEM.W
00001558  4EF9 0000156A            436                    JMP     MOVEMcode01   ;MOVEM.L                                      
0000155E                           437                        
0000155E                           438  
0000155E                           439                            
0000155E  4EB9 00001A18            440  MOVEMcode00         JSR     ISMOVEMW
00001564  4EB9 00001B4C            441                      JSR     DONE
0000156A  4EB9 00001A02            442  MOVEMcode01         JSR     ISMOVEML
00001570  4EB9 00001B4C            443                      JSR     DONE
00001576                           444  
00001576                           445  *****************************END someMOVEM ************************************
00001576                           446  
00001576                           447  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001576  4FF8 7000                448  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
0000157A  41F9 000015A0            449                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001580  4280                     450                      CLR.L   D0                  ; Zero it
00001582  303C C9C3                451                      MOVE.W  #example,D0         ; We'll play with it here
00001586  123C 0007                452                      MOVE.B  #7,D1           ; Shift 7 bits right 
0000158A  E260                     453                      ASR.W   D1,D0 
0000158C                           454  
0000158C  123C 000D                455                      MOVE.B  #13,D1           ; Shift 6 bits left 
00001590  E360                     456                      ASL.W   D1,D0            
00001592  123C 000C                457                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001596  E268                     458                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001598                           459                                      ; and the rest are zeroed out)         
00001598                           460    
00001598                           461                      
00001598  C0FC 0006                462                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000159C  4EB0 0000                463                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000015A0                           464  
000015A0  4EF9 000015FA            465  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
000015A6  4EF9 000015FE            466                                    JMP     LOTScode0001
000015AC  4EF9 00001602            467                                    JMP     LOTScode0010
000015B2  4EF9 0000160C            468                                    JMP     LOTScode0011
000015B8  4EF9 00001610            469                                    JMP     LOTScode0100
000015BE  4EF9 00001614            470                                    JMP     LOTScode0101
000015C4  4EF9 00001618            471                                    JMP     LOTScode0110
000015CA  4EF9 00001624            472                                    JMP     LOTScode0111
000015D0  4EF9 00001628            473                                    JMP     LOTScode1000
000015D6  4EF9 00001632            474                                    JMP     LOTScode1001
000015DC  4EF9 00001636            475                                    JMP     LOTScode1010
000015E2  4EF9 00001640            476                                    JMP     LOTScode1011
000015E8  4EF9 00001644            477                                    JMP     LOTScode1100
000015EE  4EF9 00001648            478                                    JMP     LOTScode1101                               JMP     LOTScode1110
000015F4  4EF9 00001658            479                                    JMP     LOTScode1111                           
000015FA                           480                        
000015FA                           481  
000015FA                           482                            
000015FA  4E72 2700                483  LOTScode0000       STOP  #$2700
000015FE  4E72 2700                484  LOTScode0001       STOP  #$2700
00001602  4EB8 152E                485  LOTScode0010        JSR    someMOVEM
00001606  4EB9 00001B4C            486                     JSR    DONE
0000160C  4E72 2700                487  LOTScode0011       STOP  #$2700                   
00001610  4E72 2700                488  LOTScode0100        STOP  #$2700
00001614  4E72 2700                489  LOTScode0101        STOP  #$2700
00001618  4EB9 00001A2E            490  LOTScode0110        JSR    ISLEA  
0000161E  4EB9 00001B4C            491                     JSR    DONE 
00001624  4E72 2700                492  LOTScode0111        STOP  #$2700 
00001628  4EB8 1430                493  LOTScode1000        JSR    NOPorCLRorRTSorJSR
0000162C  4EB9 00001B4C            494                     JSR    DONE
00001632  4E72 2700                495  LOTScode1001        STOP  #$2700               
00001636  4EB8 1430                496  LOTScode1010        JSR    NOPorCLRorRTSorJSR
0000163A  4EB9 00001B4C            497                     JSR    DONE
00001640  4E72 2700                498  LOTScode1011        STOP  #$2700                   
00001644  4E72 2700                499  LOTScode1100        STOP  #$2700
00001648  4E72 2700                500  LOTScode1101     STOP  #$2700
0000164C  4EB9 00001A2E            501  LOTScode1110        JSR    ISLEA 
00001652  4EB9 00001B4C            502                     JSR    DONE
00001658  4E72 2700                503  LOTScode1111       STOP  #$2700                
0000165C                           504                     
0000165C                           505  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
0000165C                           506  
0000165C                           507  
0000165C                           508  *****************************ADDI_BorADDI_WorADDI_L ************************************
0000165C  4FF8 7000                509  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001660  41F9 00001680            510                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001666  4280                     511                      CLR.L   D0                  ; Zero it
00001668  303C C9C3                512                      MOVE.W  #example,D0         ; We'll play with it here
0000166C  123C 0007                513                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001670  E360                     514                      ASL.W   D1,D0            
00001672  123C 000D                515                      MOVE.B  #13,D1           
00001676  E260                     516                      ASR.W   D1,D0             
00001678                           517    
00001678                           518                      
00001678  C0FC 0006                519                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000167C  4EB0 0000                520                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001680                           521  
00001680  4EF9 00001692            522  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001686  4EF9 0000169E            523                                 JMP     ADDIWcode01
0000168C  4EF9 000016AA            524                                 JMP     ADDILcode10
00001692                           525  
00001692                           526                            
00001692  4EB9 00001B36            527  ADDIBcode00        JSR     ISADDIB
00001698  4EB9 00001B4C            528                      JSR    DONE
0000169E  4EB9 00001B0A            529  ADDIWcode01        JSR     ISADDIW
000016A4  4EB9 00001B4C            530                      JSR    DONE
000016AA  4EB9 00001B20            531  ADDILcode10        JSR     ISADDIL
000016B0  4EB9 00001B4C            532                      JSR    DONE
000016B6                           533  
000016B6                           534  *****************************END ADDI_BorADDI_WorADDI_L ************************************
000016B6                           535  
000016B6                           536  
000016B6                           537  
000016B6                           538  
000016B6                           539  *****************************MOVEA_LorMOVE_L ************************************
000016B6  4FF8 7000                540  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
000016BA  41F9 000016DA            541                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
000016C0  4280                     542                      CLR.L   D0                  ; Zero it
000016C2  303C C9C3                543                      MOVE.W  #example,D0         ; We'll play with it here
000016C6  123C 0007                544                      MOVE.B  #7,D1           ; Shift 7 bits left 
000016CA  E360                     545                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
000016CC  123C 000D                546                      MOVE.B  #13,D1           ; Shift 13 bits right
000016D0  E260                     547                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
000016D2                           548    
000016D2                           549                      
000016D2  C0FC 0006                550                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016D6  4EB0 0000                551                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000016DA                           552  
000016DA  4EF9 0000170A            553  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
000016E0  4EF9 00001716            554                          JMP     MOVEAcode001
000016E6  4EF9 00001722            555                          JMP     MOVEcode010
000016EC  4EF9 0000172E            556                          JMP     MOVEcode011
000016F2  4EF9 0000173A            557                          JMP     MOVEcode100
000016F8  4EF9 00001746            558                          JMP     MOVEcode101
000016FE  4EF9 00001752            559                          JMP     MOVEcode110
00001704  4EF9 0000175E            560                          JMP     MOVEcode111
0000170A                           561                            
0000170A  4EB9 00001AC8            562  MOVEcode000     JSR     ISMOVEL
00001710  4EB9 00001B4C            563                  JSR    DONE
00001716  4EB9 00001ADE            564  MOVEAcode001    JSR     ISMOVEAL
0000171C  4EB9 00001B4C            565                  JSR    DONE
00001722  4EB9 00001AC8            566  MOVEcode010     JSR     ISMOVEL
00001728  4EB9 00001B4C            567                  JSR    DONE
0000172E  4EB9 00001AC8            568  MOVEcode011     JSR     ISMOVEL
00001734  4EB9 00001B4C            569                  JSR    DONE
0000173A  4EB9 00001AC8            570  MOVEcode100     JSR     ISMOVEL
00001740  4EB9 00001B4C            571                  JSR    DONE
00001746  4EB9 00001AC8            572  MOVEcode101     JSR     ISMOVEL
0000174C  4EB9 00001B4C            573                  JSR    DONE
00001752  4EB9 00001AC8            574  MOVEcode110     JSR     ISMOVEL
00001758  4EB9 00001B4C            575                  JSR    DONE
0000175E  4EB9 00001AC8            576  MOVEcode111     JSR     ISMOVEL 
00001764  4EB9 00001B4C            577                  JSR    DONE
0000176A                           578  *****************************END MOVEA_LorMOVE_L ************************************
0000176A                           579  
0000176A                           580  *****************************MOVEA_WorMOVE_W ************************************
0000176A  4FF8 7000                581  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
0000176E  41F9 0000178E            582                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001774  4280                     583                      CLR.L   D0                  ; Zero it
00001776  303C C9C3                584                      MOVE.W  #example,D0         ; We'll play with it here
0000177A  123C 0007                585                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000177E  E360                     586                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001780  123C 000D                587                      MOVE.B  #13,D1           ; Shift 13 bits right
00001784  E260                     588                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001786                           589    
00001786                           590                      
00001786  C0FC 0006                591                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000178A  4EB0 0000                592                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000178E                           593  
0000178E  4EF9 000017BE            594  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001794  4EF9 000017CA            595                          JMP     MOVEAWcode001
0000179A  4EF9 000017D6            596                          JMP     MOVEWcode010
000017A0  4EF9 000017E2            597                          JMP     MOVEWcode011
000017A6  4EF9 000017EE            598                          JMP     MOVEWcode100
000017AC  4EF9 000017FA            599                          JMP     MOVEWcode101
000017B2  4EF9 00001806            600                          JMP     MOVEWcode110
000017B8  4EF9 00001812            601                          JMP     MOVEWcode111
000017BE                           602                            
000017BE  4EB9 00001A9C            603  MOVEWcode000     JSR     ISMOVEW
000017C4  4EB9 00001B4C            604                  JSR    DONE
000017CA  4EB9 00001AB2            605  MOVEAWcode001    JSR     ISMOVEAW
000017D0  4EB9 00001B4C            606                  JSR    DONE
000017D6  4EB9 00001A9C            607  MOVEWcode010     JSR     ISMOVEW
000017DC  4EB9 00001B4C            608                  JSR    DONE
000017E2  4EB9 00001A9C            609  MOVEWcode011     JSR     ISMOVEW
000017E8  4EB9 00001B4C            610                  JSR    DONE
000017EE  4EB9 00001A9C            611  MOVEWcode100     JSR     ISMOVEW
000017F4  4EB9 00001B4C            612                  JSR    DONE
000017FA  4EB9 00001A9C            613  MOVEWcode101     JSR     ISMOVEW
00001800  4EB9 00001B4C            614                  JSR    DONE
00001806  4EB9 00001A9C            615  MOVEWcode110     JSR     ISMOVEW
0000180C  4EB9 00001B4C            616                  JSR    DONE
00001812  4EB9 00001A9C            617  MOVEWcode111     JSR     ISMOVEW 
00001818  4EB9 00001B4C            618                  JSR    DONE
0000181E                           619  *****************************END MOVEA_WorMOVE_W ************************************
0000181E                           620  
0000181E  48A7 FFFF                621  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001822  43F9 00001C7D            622              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001828  103C 000E                623              MOVE.B  #14, D0
0000182C  4E4F                     624              TRAP    #15
0000182E                           625     
0000182E  4C9F FFFF                626              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001832  4E75                     627              RTS
00001834                           628  
00001834  48A7 FFFF                629  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001838  43F9 00001C65            630              LEA MESSAGEANDB, A1         *OPCODE is AND.B
0000183E  103C 000E                631              MOVE.B  #14, D0
00001842  4E4F                     632              TRAP    #15
00001844                           633     
00001844  4C9F FFFF                634              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001848  4E75                     635              RTS
0000184A                           636  
0000184A  48A7 FFFF                637  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000184E  43F9 00001C6D            638              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001854  103C 000E                639              MOVE.B  #14, D0
00001858  4E4F                     640              TRAP    #15
0000185A                           641     
0000185A  4C9F FFFF                642              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000185E  4E75                     643              RTS
00001860                           644              
00001860  48A7 FFFF                645  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001864  43F9 00001C75            646              LEA MESSAGEANDL, A1         *OPCODE is AND.L
0000186A  103C 000E                647              MOVE.B  #14, D0
0000186E  4E4F                     648              TRAP    #15
00001870                           649     
00001870  4C9F FFFF                650              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001874  4E75                     651              RTS  
00001876                           652  
00001876  48A7 FFFF                653  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000187A  43F9 00001C49            654              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001880  103C 000E                655              MOVE.B  #14, D0
00001884  4E4F                     656              TRAP    #15
00001886                           657     
00001886  4C9F FFFF                658              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000188A  4E75                     659              RTS
0000188C                           660              
0000188C  48A7 FFFF                661  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001890  43F9 00001C52            662              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001896  103C 000E                663              MOVE.B  #14, D0
0000189A  4E4F                     664              TRAP    #15
0000189C                           665     
0000189C  4C9F FFFF                666              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018A0  4E75                     667              RTS 
000018A2                           668  
000018A2  48A7 FFFF                669  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018A6  43F9 00001C31            670              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
000018AC  103C 000E                671              MOVE.B  #14, D0
000018B0  4E4F                     672              TRAP    #15
000018B2                           673     
000018B2  4C9F FFFF                674              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018B6  4E75                     675              RTS
000018B8                           676  
000018B8  48A7 FFFF                677  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018BC  43F9 00001C39            678              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
000018C2  103C 000E                679              MOVE.B  #14, D0
000018C6  4E4F                     680              TRAP    #15
000018C8                           681     
000018C8  4C9F FFFF                682              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018CC  4E75                     683              RTS
000018CE                           684              
000018CE  48A7 FFFF                685  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018D2  43F9 00001C41            686              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
000018D8  103C 000E                687              MOVE.B  #14, D0
000018DC  4E4F                     688              TRAP    #15
000018DE                           689     
000018DE  4C9F FFFF                690              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018E2  4E75                     691              RTS  
000018E4                           692  
000018E4  48A7 FFFF                693  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018E8  43F9 00001C19            694              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
000018EE  103C 000E                695              MOVE.B  #14, D0
000018F2  4E4F                     696              TRAP    #15
000018F4                           697     
000018F4  4C9F FFFF                698              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018F8  4E75                     699              RTS
000018FA                           700  
000018FA  48A7 FFFF                701  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018FE  43F9 00001C21            702              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00001904  103C 000E                703              MOVE.B  #14, D0
00001908  4E4F                     704              TRAP    #15
0000190A                           705     
0000190A  4C9F FFFF                706              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000190E  4E75                     707              RTS
00001910                           708              
00001910  48A7 FFFF                709  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001914  43F9 00001C29            710              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
0000191A  103C 000E                711              MOVE.B  #14, D0
0000191E  4E4F                     712              TRAP    #15
00001920                           713     
00001920  4C9F FFFF                714              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001924  4E75                     715              RTS  
00001926                           716  
00001926  48A7 FFFF                717  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000192A  43F9 00001C01            718              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00001930  103C 000E                719              MOVE.B  #14, D0
00001934  4E4F                     720              TRAP    #15
00001936                           721     
00001936  4C9F FFFF                722              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000193A  4E75                     723              RTS
0000193C                           724  
0000193C  48A7 FFFF                725  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001940  43F9 00001C09            726              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001946  103C 000E                727              MOVE.B  #14, D0
0000194A  4E4F                     728              TRAP    #15
0000194C                           729     
0000194C  4C9F FFFF                730              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001950  4E75                     731              RTS
00001952                           732              
00001952  48A7 FFFF                733  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001956  43F9 00001C11            734              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
0000195C  103C 000E                735              MOVE.B  #14, D0
00001960  4E4F                     736              TRAP    #15
00001962                           737     
00001962  4C9F FFFF                738              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001966  4E75                     739              RTS    
00001968                           740  
00001968  48A7 FFFF                741  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000196C  43F9 00001BE6            742              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00001972  103C 000E                743              MOVE.B  #14, D0
00001976  4E4F                     744              TRAP    #15
00001978                           745     
00001978  4C9F FFFF                746              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000197C  4E75                     747              RTS
0000197E                           748  
0000197E  48A7 FFFF                749  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001982  43F9 00001BEF            750              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00001988  103C 000E                751              MOVE.B  #14, D0
0000198C  4E4F                     752              TRAP    #15
0000198E                           753     
0000198E  4C9F FFFF                754              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001992  4E75                     755              RTS
00001994                           756              
00001994  48A7 FFFF                757  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001998  43F9 00001BF8            758              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
0000199E  103C 000E                759              MOVE.B  #14, D0
000019A2  4E4F                     760              TRAP    #15
000019A4                           761     
000019A4  4C9F FFFF                762              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019A8  4E75                     763              RTS            
000019AA                           764              
000019AA  48A7 FFFF                765  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019AE  43F9 00001C5B            766              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
000019B4  103C 000E                767              MOVE.B  #14, D0
000019B8  4E4F                     768              TRAP    #15
000019BA                           769     
000019BA  4C9F FFFF                770              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019BE  4E75                     771              RTS
000019C0                           772  
000019C0  48A7 FFFF                773  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019C4  43F9 00001BCE            774              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
000019CA  103C 000E                775              MOVE.B  #14, D0
000019CE  4E4F                     776              TRAP    #15
000019D0                           777     
000019D0  4C9F FFFF                778              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019D4  4E75                     779              RTS
000019D6                           780  
000019D6  48A7 FFFF                781  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019DA  43F9 00001BD6            782              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
000019E0  103C 000E                783              MOVE.B  #14, D0
000019E4  4E4F                     784              TRAP    #15
000019E6                           785     
000019E6  4C9F FFFF                786              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019EA  4E75                     787              RTS
000019EC                           788  
000019EC  48A7 FFFF                789  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019F0  43F9 00001BDE            790              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
000019F6  103C 000E                791              MOVE.B  #14, D0
000019FA  4E4F                     792              TRAP    #15
000019FC                           793     
000019FC  4C9F FFFF                794              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A00  4E75                     795              RTS
00001A02                           796              
00001A02  48A7 FFFF                797  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A06  43F9 00001BA2            798              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
00001A0C  103C 000E                799              MOVE.B  #14, D0
00001A10  4E4F                     800              TRAP    #15
00001A12                           801     
00001A12  4C9F FFFF                802              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A16  4E75                     803              RTS
00001A18                           804  
00001A18  48A7 FFFF                805  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A1C  43F9 00001BAC            806              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
00001A22  103C 000E                807              MOVE.B  #14, D0
00001A26  4E4F                     808              TRAP    #15
00001A28                           809     
00001A28  4C9F FFFF                810              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A2C  4E75                     811              RTS  
00001A2E                           812  
00001A2E  48A7 FFFF                813  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A32  43F9 00001BC8            814              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
00001A38  103C 000E                815              MOVE.B  #14, D0
00001A3C  4E4F                     816              TRAP    #15
00001A3E                           817     
00001A3E  4C9F FFFF                818              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A42  4E75                     819              RTS                          ; Exit subroutine
00001A44                           820  
00001A44  48A7 FFFF                821  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A48  43F9 00001BB6            822              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
00001A4E  103C 000E                823              MOVE.B  #14, D0
00001A52  4E4F                     824              TRAP    #15
00001A54  4C9F FFFF                825              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A58  4E75                     826              RTS                          ; Exit subroutine
00001A5A                           827              
00001A5A  48A7 FFFF                828  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A5E  43F9 00001BC2            829              LEA MESSAGERTS, A1         *OPCODE is RTS
00001A64  103C 000E                830              MOVE.B  #14, D0
00001A68  4E4F                     831              TRAP    #15
00001A6A  4C9F FFFF                832              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A6E  4E75                     833              RTS  
00001A70                           834  
00001A70  48A7 FFFF                835  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A74  43F9 00001BBC            836              LEA MESSAGECLR, A1         *OPCODE is CLR
00001A7A  103C 000E                837              MOVE.B  #14, D0
00001A7E  4E4F                     838              TRAP    #15
00001A80  4C9F FFFF                839              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A84  4E75                     840              RTS  
00001A86                           841              
00001A86  48A7 FFFF                842  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A8A  43F9 00001B52            843              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
00001A90  103C 000E                844              MOVE.B  #14, D0
00001A94  4E4F                     845              TRAP    #15
00001A96  4C9F FFFF                846              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A9A  4E75                     847              RTS                          ; Exit subroutine
00001A9C                           848           
00001A9C  48A7 FFFF                849  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001AA0  43F9 00001B58            850              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00001AA6  103C 000E                851              MOVE.B  #14, D0
00001AAA  4E4F                     852              TRAP    #15
00001AAC                           853     
00001AAC  4C9F FFFF                854              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001AB0  4E75                     855              RTS                          ; Exit subroutine
00001AB2                           856              
00001AB2  48A7 FFFF                857  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001AB6  43F9 00001B98            858              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
00001ABC  103C 000E                859              MOVE.B  #14, D0
00001AC0  4E4F                     860              TRAP    #15
00001AC2                           861     
00001AC2  4C9F FFFF                862              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001AC6  4E75                     863              RTS                          ; Exit subroutine
00001AC8                           864              
00001AC8  48A7 FFFF                865  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001ACC  43F9 00001B61            866              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
00001AD2  103C 000E                867              MOVE.B  #14, D0
00001AD6  4E4F                     868              TRAP    #15
00001AD8                           869              
00001AD8  4C9F FFFF                870              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001ADC  4E75                     871              RTS                          ; Exit subroutine
00001ADE                           872              
00001ADE  48A7 FFFF                873  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001AE2  43F9 00001B8E            874              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
00001AE8  103C 000E                875              MOVE.B  #14, D0
00001AEC  4E4F                     876              TRAP    #15
00001AEE                           877              
00001AEE  4C9F FFFF                878              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001AF2  4E75                     879              RTS                          ; Exit subroutine
00001AF4                           880         
00001AF4  48A7 FFFF                881  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001AF8  43F9 00001B6A            882              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
00001AFE  103C 000E                883              MOVE.B  #14, D0
00001B02  4E4F                     884              TRAP    #15
00001B04                           885              
00001B04  4C9F FFFF                886              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001B08  4E75                     887              RTS                          ; Exit subroutine
00001B0A                           888           
00001B0A  48A7 FFFF                889  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001B0E  43F9 00001B73            890              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
00001B14  103C 000E                891              MOVE.B  #14, D0
00001B18  4E4F                     892              TRAP    #15
00001B1A                           893              
00001B1A  4C9F FFFF                894              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001B1E  4E75                     895              RTS                          ; Exit subroutine
00001B20                           896              
00001B20  48A7 FFFF                897  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001B24  43F9 00001B7C            898              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
00001B2A  103C 000E                899              MOVE.B  #14, D0
00001B2E  4E4F                     900              TRAP    #15
00001B30                           901              
00001B30  4C9F FFFF                902              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001B34  4E75                     903              RTS                          ; Exit subroutine
00001B36                           904                  
00001B36  48A7 FFFF                905  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001B3A  43F9 00001B85            906              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
00001B40  103C 000E                907              MOVE.B  #14, D0
00001B44  4E4F                     908              TRAP    #15
00001B46                           909              
00001B46  4C9F FFFF                910              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001B4A  4E75                     911              RTS                          ; Exit subroutine
00001B4C                           912                        
00001B4C  103C 0009                913  DONE        MOVE.B      #9, D0
00001B50  4E4F                     914              TRAP        #15
00001B52                           915  
00001B52  =0000000D                916  CR  EQU     $0D 
00001B52  =0000000A                917  LF  EQU     $0A
00001B52= 4E 4F 50 0D 0A 00        918  MESSAGENOP DC.B    'NOP',CR,LF, 0    
00001B58                           919      
00001B58= 4D 4F 56 45 2E 57 ...    920  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
00001B61= 4D 4F 56 45 2E 4C ...    921  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
00001B6A= 4D 4F 56 45 2E 42 ...    922  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
00001B73                           923  
00001B73= 41 44 44 49 2E 57 ...    924  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
00001B7C= 41 44 44 49 2E 4C ...    925  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
00001B85= 41 44 44 49 2E 42 ...    926  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
00001B8E                           927  
00001B8E= 4D 4F 56 45 41 2E ...    928  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
00001B98= 4D 4F 56 45 41 2E ...    929  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
00001BA2                           930  
00001BA2= 4D 4F 56 45 4D 2E ...    931  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
00001BAC= 4D 4F 56 45 4D 2E ...    932  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00001BB6                           933  
00001BB6= 4A 53 52 0D 0A 00        934  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
00001BBC                           935  
00001BBC= 43 4C 52 0D 0A 00        936  MESSAGECLR DC.B    'CLR',CR,LF, 0
00001BC2                           937  
00001BC2= 52 54 53 0D 0A 00        938  MESSAGERTS DC.B    'RTS',CR,LF, 0
00001BC8                           939  
00001BC8= 4C 45 41 0D 0A 00        940  MESSAGELEA DC.B    'LEA',CR,LF, 0
00001BCE                           941  
00001BCE= 43 4C 52 2E 42 0D ...    942  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00001BD6= 43 4C 52 2E 57 0D ...    943  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00001BDE= 43 4C 52 2E 4C 0D ...    944  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00001BE6                           945  
00001BE6= 41 44 44 51 2E 42 ...    946  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
00001BEF= 41 44 44 51 2E 57 ...    947  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
00001BF8= 41 44 44 51 2E 4C ...    948  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
00001C01                           949  
00001C01= 43 4D 50 2E 42 0D ...    950  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
00001C09= 43 4D 50 2E 57 0D ...    951  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
00001C11= 43 4D 50 2E 4C 0D ...    952  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
00001C19                           953  
00001C19= 53 55 42 2E 42 0D ...    954  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
00001C21= 53 55 42 2E 57 0D ...    955  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
00001C29= 53 55 42 2E 4C 0D ...    956  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
00001C31                           957  
00001C31= 41 44 44 2E 42 0D ...    958  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0 
00001C39= 41 44 44 2E 57 0D ...    959  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
00001C41= 41 44 44 2E 4C 0D ...    960  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
00001C49                           961  
00001C49= 41 44 44 41 2E 57 ...    962  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
00001C52= 41 44 44 41 2E 4C ...    963  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
00001C5B                           964  
00001C5B= 4D 4F 56 45 51 2E ...    965  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
00001C65                           966  
00001C65= 41 4E 44 2E 42 0D ...    967  MESSAGEANDB DC.B    'AND.B',CR,LF, 0 
00001C6D= 41 4E 44 2E 57 0D ...    968  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
00001C75= 41 4E 44 2E 4C 0D ...    969  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
00001C7D                           970  
00001C7D= 4D 55 4C 53 2E 57 ...    971  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
00001C86                           972  
00001C86  FFFF FFFF                973      SIMHALT             ; halt simulator
00001C8A                           974  
00001C8A                           975  * Put variables and constants here
00001C8A                           976  
00001C8A                           977      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          1210
ADDCODE001          121C
ADDCODE010          1228
ADDCODE011          1234
ADDCODE100          1240
ADDCODE101          124C
ADDCODE110          1258
ADDCODE111          1264
ADDIBCODE00         1692
ADDILCODE10         16AA
ADDIWCODE01         169E
ADDI_BORADDI_WORADDI_L  165C
ADDQCODE00          13AC
ADDQCODE01          13B8
ADDQCODE10          13C4
ADDQ_BORADDQ_WORADDQ_L  1370
ADD_BORADD_WORADD_L  11B6
ANDCODE000          115E
ANDCODE001          116A
ANDCODE010          1176
ANDCODE011          1182
ANDCODE100          1186
ANDCODE101          1192
ANDCODE110          119E
ANDCODE111          11AA
AND_BORAND_WORAND_LORMULS_W  1104
CLRCODE00           140C
CLRCODE01           1418
CLRCODE10           1424
CMPCODE000          134C
CMPCODE001          1358
CMPCODE010          1364
CMP_BORCMP_WORCMP_L  1310
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10C8
CODE1010            10D4
CODE1011            10D8
CODE1100            10E4
CODE1101            10F0
CODE1110            10FC
CODE1111            1100
CR                  D
DONE                1B4C
EXAMPLE             C9C3
ISADDAL             188C
ISADDAW             1876
ISADDB              18A2
ISADDIB             1B36
ISADDIL             1B20
ISADDIW             1B0A
ISADDL              18CE
ISADDQB             1968
ISADDQL             1994
ISADDQW             197E
ISADDW              18B8
ISANDB              1834
ISANDL              1860
ISANDW              184A
ISCLR               1A70
ISCLRB              19C0
ISCLRL              19EC
ISCLRW              19D6
ISCMPB              1926
ISCMPL              1952
ISCMPW              193C
ISJSR               1A44
ISLEA               1A2E
ISMOVEAL            1ADE
ISMOVEAW            1AB2
ISMOVEB             1AF4
ISMOVEL             1AC8
ISMOVEML            1A02
ISMOVEMW            1A18
ISMOVEQL            19AA
ISMOVEW             1A9C
ISMULSW             181E
ISNOP               1A86
ISRTS               1A5A
ISSUBB              18E4
ISSUBL              1910
ISSUBW              18FA
JSRORCLRCODE0000    14E0
JSRORCLRCODE0001    14E4
JSRORCLRCODE0010    14E8
JSRORCLRCODE0011    14F2
JSRORCLRCODE0100    14F6
JSRORCLRCODE0101    14FA
JSRORCLRCODE0110    14FE
JSRORCLRCODE0111    1502
JSRORCLRCODE1000    1506
JSRORCLRCODE1001    150A
JSRORCLRCODE1010    150E
JSRORCLRCODE1011    1512
JSRORCLRCODE1100    1516
JSRORCLRCODE1101    151A
JSRORCLRCODE1110    151E
JSRORCLRCODE1111    152A
LF                  A
LOTSCODE0000        15FA
LOTSCODE0001        15FE
LOTSCODE0010        1602
LOTSCODE0011        160C
LOTSCODE0100        1610
LOTSCODE0101        1614
LOTSCODE0110        1618
LOTSCODE0111        1624
LOTSCODE1000        1628
LOTSCODE1001        1632
LOTSCODE1010        1636
LOTSCODE1011        1640
LOTSCODE1100        1644
LOTSCODE1101        1648
LOTSCODE1110        164C
LOTSCODE1111        1658
MESSAGEADDAL        1C52
MESSAGEADDAW        1C49
MESSAGEADDB         1C31
MESSAGEADDIB        1B85
MESSAGEADDIL        1B7C
MESSAGEADDIW        1B73
MESSAGEADDL         1C41
MESSAGEADDQB        1BE6
MESSAGEADDQL        1BF8
MESSAGEADDQW        1BEF
MESSAGEADDW         1C39
MESSAGEANDB         1C65
MESSAGEANDL         1C75
MESSAGEANDW         1C6D
MESSAGECLR          1BBC
MESSAGECLRB         1BCE
MESSAGECLRL         1BDE
MESSAGECLRW         1BD6
MESSAGECMPB         1C01
MESSAGECMPL         1C11
MESSAGECMPW         1C09
MESSAGEJSR          1BB6
MESSAGELEA          1BC8
MESSAGEMOVEAL       1B8E
MESSAGEMOVEAW       1B98
MESSAGEMOVEB        1B6A
MESSAGEMOVEL        1B61
MESSAGEMOVEML       1BA2
MESSAGEMOVEMW       1BAC
MESSAGEMOVEQL       1C5B
MESSAGEMOVEW        1B58
MESSAGEMULSW        1C7D
MESSAGENOP          1B52
MESSAGERTS          1BC2
MESSAGESUBB         1C19
MESSAGESUBL         1C29
MESSAGESUBW         1C21
MOVEACODE001        1716
MOVEAWCODE001       17CA
MOVEA_LORMOVE_L     16B6
MOVEA_WORMOVE_W     176A
MOVECODE000         170A
MOVECODE010         1722
MOVECODE011         172E
MOVECODE100         173A
MOVECODE101         1746
MOVECODE110         1752
MOVECODE111         175E
MOVEMCODE00         155E
MOVEMCODE01         156A
MOVEWCODE000        17BE
MOVEWCODE010        17D6
MOVEWCODE011        17E2
MOVEWCODE100        17EE
MOVEWCODE101        17FA
MOVEWCODE110        1806
MOVEWCODE111        1812
NOPCOMMAND          14D4
NOPORCLRORRTSORJSR  1430
NOP_MOVEM_LEA_JSR_CLR_RTS  1576
RTSCOMMAND          14C8
SHIFT               C
SOMECLR             13D0
SOMEMOVEM           152E
STACK               7000
START               1000
SUBCODE000          12C4
SUBCODE001          12D0
SUBCODE010          12DC
SUBCODE011          12E8
SUBCODE100          12EC
SUBCODE101          12F8
SUBCODE110          1304
SUB_BORSUB_WORSUB_L  1270
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1680
TABLEADDQ_BORADDQ_WORADDQ_L  139A
TABLEADD_BORADD_WORADD_L  11E0
TABLEAND_BORAND_WORAND_LORMULS_W  112E
TABLECMP_BORCMP_WORCMP_L  133A
TABLEMOVEA_LORMOVE_L  16DA
TABLEMOVEA_WORMOVE_W  178E
TABLENOPORCLRORRTSORJSR  1468
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  15A0
TABLESOMECLR        13FA
TABLESOMEMOVEM      1552
TABLESUB_BORSUB_WORSUB_L  129A
