00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/14/2016 6:57:13 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001100000000011 ; SUB.B D4, D3 = 1001 100 000 000 011
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001100001000011 ; SUB.W D4, D3 = 1001 100 001 000 011
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001100010000011 ; SUB.L D4, D3 = 1001 100 010 000 011
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101100000000011 ; ADD.B D4, D3 = 1101 100 000 000 011
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101100001000011 ; ADD.W D4, D3 = 1101 100 001 000 011
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000  =0000D883                 55  example EQU     %1101100010000011 ; ADD.L D4, D3 = 1101 100 010 000 011
00001000                            56  
00001000  =0000000C                 57  shift   EQU     12                 ; Shift 12 bits 
00001000                            58  
00001000                            59  * Program starts here
00001000                            60  
00001000  4FF8 7000                 61          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E             62          LEA     table,A0            ; Index into the table
0000100A  4280                      63          CLR.L   D0                  ; Zero it
0000100C  303C D883                 64          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                 65          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                      66          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                            67                                      ; and the rest are zeroed out)
00001016  C0FC 0006                 68          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                 69          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                            70  
0000101E  4EF9 0000107E             71  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084             72          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090             73          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096             74          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C             75          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS
0000103C  4EF9 000010A8             76          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4             77          JMP     code0110
00001048  4EF9 000010B8             78          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4             79          JMP     code1000
00001054  4EF9 000010C8             80          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010D4             81          JMP     code1010
00001060  4EF9 000010D8             82          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010E4             83          JMP     code1100
0000106C  4EF9 000010E8             84          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 000010F4             85          JMP     code1110
00001078  4EF9 000010F8             86          JMP     code1111
0000107E                            87         
0000107E                            88  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                            89  
0000107E  4EB9 00001588             90  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 0000199C             91  code0001 JSR   ISMOVEB
0000108A  4EB9 000019F4             92           JSR   DONE
00001090  4EB9 000015E2             93  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 00001696             94  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 000014A2             95  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 000019F4             96           JSR    DONE
000010A8  4EB9 0000129C             97  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 000019F4             98           JSR    DONE
000010B4  4E72 2700                 99  code0110 STOP  #$2700
000010B8  4EB9 00001852            100  code0111 JSR    ISMOVEQL
000010BE  4EB9 000019F4            101           JSR    DONE
000010C4  4E72 2700                102  code1000 STOP  #$2700
000010C8  4EB9 0000119C            103  code1001 JSR    SUB_BorSUB_WorSUB_L
000010CE  4EB9 000019F4            104           JSR    DONE
000010D4  4E72 2700                105  code1010 STOP  #$2700
000010D8  4EB9 0000123C            106  code1011 JSR    CMP_BorCMP_WorCMP_L
000010DE  4EB9 000019F4            107           JSR DONE
000010E4  4E72 2700                108  code1100 STOP  #$2700
000010E8  4EB9 000010FC            109  code1101 JSR    ADD_BorADD_WorADD_L
000010EE  4EB9 000019F4            110           JSR    DONE
000010F4  4E72 2700                111  code1110 STOP  #$2700
000010F8  4E72 2700                112  code1111 STOP  #$2700
000010FC                           113  
000010FC                           114  *****************************  ADD_BorADD_WorADD_L ************************************
000010FC  4FF8 7000                115  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
00001100  41F9 00001126            116                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
00001106  4280                     117                      CLR.L   D0                  ; Zero it
00001108  303C D883                118                      MOVE.W  #example,D0         ; We'll play with it here
0000110C  123C 0007                119                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001110  E360                     120                      ASL.W   D1,D0            
00001112  123C 000C                121                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001116  E268                     122                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001118                           123                                      ; and the rest are zeroed out)           
00001118  123C 0001                124                      MOVE.B  #1,D1           ; Shift 1 bits right
0000111C  E260                     125                      ASR.W   D1,D0 
0000111E                           126                      
0000111E  C0FC 0006                127                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001122  4EB0 0000                128                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001126                           129  
00001126  4EF9 00001150            130  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
0000112C  4EF9 0000115C            131                                   JMP    ADDcode001   *ADD.W                                      
00001132  4EF9 00001168            132                                   JMP    ADDcode010   *ADD.L
00001138                           133                                   
00001138  4EF9 00001174            134                                   JMP    ADDcode011   
0000113E  4EF9 00001178            135                                   JMP    ADDcode100   *ADD.B
00001144  4EF9 00001184            136                                   JMP    ADDcode101   *ADD.W 
0000114A  4EF9 00001190            137                                   JMP    ADDcode110   *ADD.L
00001150                           138     
00001150                           139  
00001150                           140  
00001150  4EB9 0000174A            141  ADDcode000   JSR     ISADDB
00001156  4EB9 000019F4            142               JSR     DONE
0000115C  4EB9 00001760            143  ADDcode001   JSR     ISADDW  
00001162  4EB9 000019F4            144               JSR     DONE                                 
00001168  4EB9 00001776            145  ADDcode010   JSR     ISADDL 
0000116E  4EB9 000019F4            146               JSR     DONE  
00001174  4E72 2700                147  ADDcode011   STOP  #$2700 
00001178  4EB9 0000174A            148  ADDcode100   JSR     ISADDB
0000117E  4EB9 000019F4            149               JSR     DONE
00001184  4EB9 00001760            150  ADDcode101   JSR     ISADDW  
0000118A  4EB9 000019F4            151               JSR     DONE                                 
00001190  4EB9 00001776            152  ADDcode110   JSR     ISADDL 
00001196  4EB9 000019F4            153               JSR     DONE 
0000119C                           154     
0000119C                           155  ***************************** END  ADD_BorADD_WorADD_L ************************************
0000119C                           156  
0000119C                           157  *****************************  SUB_BorSUB_WorSUB_L ************************************
0000119C  4FF8 7000                158  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
000011A0  41F9 000011C6            159                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
000011A6  4280                     160                      CLR.L   D0                  ; Zero it
000011A8  303C D883                161                      MOVE.W  #example,D0         ; We'll play with it here
000011AC  123C 0007                162                      MOVE.B  #7,D1           ; Shift 7 bits left 
000011B0  E360                     163                      ASL.W   D1,D0            
000011B2  123C 000C                164                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011B6  E268                     165                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011B8                           166                                      ; and the rest are zeroed out)           
000011B8  123C 0001                167                      MOVE.B  #1,D1           ; Shift 1 bits right
000011BC  E260                     168                      ASR.W   D1,D0 
000011BE                           169                      
000011BE  C0FC 0006                170                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011C2  4EB0 0000                171                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011C6                           172  
000011C6  4EF9 000011F0            173  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
000011CC  4EF9 000011FC            174                                   JMP    SUBcode001   *SUB.W                                      
000011D2  4EF9 00001208            175                                   JMP    SUBcode010   *SUB.L
000011D8                           176                                   
000011D8  4EF9 00001214            177                                   JMP    SUBcode011   
000011DE  4EF9 00001218            178                                   JMP    SUBcode100   *SUB.B
000011E4  4EF9 00001224            179                                   JMP    SUBcode101   *SUB.W 
000011EA  4EF9 00001230            180                                   JMP    SUBcode110   *SUB.L
000011F0                           181     
000011F0                           182  
000011F0                           183  
000011F0  4EB9 0000178C            184  SUBcode000   JSR     ISSUBB
000011F6  4EB9 000019F4            185               JSR     DONE
000011FC  4EB9 000017A2            186  SUBcode001   JSR     ISSUBW  
00001202  4EB9 000019F4            187               JSR     DONE                                 
00001208  4EB9 000017B8            188  SUBcode010   JSR     ISSUBL 
0000120E  4EB9 000019F4            189               JSR     DONE  
00001214  4E72 2700                190  SUBcode011   STOP  #$2700 
00001218  4EB9 0000178C            191  SUBcode100   JSR     ISSUBB
0000121E  4EB9 000019F4            192               JSR     DONE
00001224  4EB9 000017A2            193  SUBcode101   JSR     ISSUBW  
0000122A  4EB9 000019F4            194               JSR     DONE                                 
00001230  4EB9 000017B8            195  SUBcode110   JSR     ISSUBL 
00001236  4EB9 000019F4            196               JSR     DONE 
0000123C                           197     
0000123C                           198  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
0000123C                           199  
0000123C                           200  
0000123C                           201  ***************************** CMP_BorCMP_WorCMP_L ************************************
0000123C  4FF8 7000                202  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
00001240  41F9 00001266            203                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
00001246  4280                     204                      CLR.L   D0                  ; Zero it
00001248  303C D883                205                      MOVE.W  #example,D0         ; We'll play with it here
0000124C  123C 0007                206                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001250  E360                     207                      ASL.W   D1,D0            
00001252  123C 000C                208                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001256  E268                     209                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001258                           210                                      ; and the rest are zeroed out)           
00001258  123C 0001                211                      MOVE.B  #1,D1           ; Shift 1 bits right
0000125C  E260                     212                      ASR.W   D1,D0 
0000125E                           213                      
0000125E  C0FC 0006                214                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001262  4EB0 0000                215                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001266                           216  
00001266  4EF9 00001278            217  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
0000126C  4EF9 00001284            218                                   JMP    CMPcode001   *CMP.W                                      
00001272  4EF9 00001290            219                                   JMP    CMPcode010   *CMP.L
00001278                           220  
00001278  4EB9 000017CE            221  CMPcode000   JSR     ISCMPB
0000127E  4EB9 000019F4            222              JSR     DONE
00001284  4EB9 000017E4            223  CMPcode001   JSR     ISCMPW  
0000128A  4EB9 000019F4            224              JSR     DONE                                 
00001290  4EB9 000017FA            225  CMPcode010   JSR     ISCMPL 
00001296  4EB9 000019F4            226              JSR     DONE                    
0000129C                           227  
0000129C                           228  ***************************** END CMP_BorCMP_WorCMP_L ************************************
0000129C                           229  
0000129C                           230  
0000129C                           231  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
0000129C  4FF8 7000                232  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
000012A0  41F9 000012C6            233                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
000012A6  4280                     234                      CLR.L   D0                  ; Zero it
000012A8  303C D883                235                      MOVE.W  #example,D0         ; We'll play with it here
000012AC  123C 0008                236                      MOVE.B  #8,D1           ; Shift 8 bits left 
000012B0  E360                     237                      ASL.W   D1,D0            
000012B2  123C 000C                238                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000012B6  E268                     239                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012B8                           240                                      ; and the rest are zeroed out)           
000012B8  123C 0002                241                      MOVE.B  #2,D1           ; Shift 2 bits right
000012BC  E260                     242                      ASR.W   D1,D0 
000012BE                           243                      
000012BE  C0FC 0006                244                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012C2  4EB0 0000                245                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012C6                           246  
000012C6  4EF9 000012D8            247  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
000012CC  4EF9 000012E4            248                                      JMP     ADDQcode01   *ADDQ.W                                      
000012D2  4EF9 000012F0            249                                      JMP     ADDQcode10   *ADDQ.L
000012D8                           250  
000012D8  4EB9 00001810            251  ADDQcode00   JSR     ISADDQB
000012DE  4EB9 000019F4            252              JSR     DONE
000012E4  4EB9 00001826            253  ADDQcode01   JSR     ISADDQW  
000012EA  4EB9 000019F4            254              JSR     DONE                                 
000012F0  4EB9 0000183C            255  ADDQcode10   JSR     ISADDQL 
000012F6  4EB9 000019F4            256              JSR     DONE                    
000012FC                           257  
000012FC                           258  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
000012FC                           259  
000012FC                           260  
000012FC                           261  *****************************someCLR ************************************
000012FC  4FF8 7000                262  someCLR     LEA     STACK,SP            ; Load the SP
00001300  41F9 00001326            263                      LEA     tableSomeCLR, A0            ; Index into the table
00001306  4280                     264                      CLR.L   D0                  ; Zero it
00001308  303C D883                265                      MOVE.W  #example,D0         ; We'll play with it here
0000130C  123C 0008                266                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001310  E360                     267                      ASL.W   D1,D0            
00001312  123C 000C                268                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001316  E268                     269                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001318                           270                                      ; and the rest are zeroed out)           
00001318  123C 0002                271                      MOVE.B  #2,D1           ; Shift 2 bits right
0000131C  E260                     272                      ASR.W   D1,D0 
0000131E                           273                      
0000131E  C0FC 0006                274                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001322  4EB0 0000                275                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001326                           276  
00001326  4EF9 00001338            277  tableSomeCLR        JMP     CLRcode00   *CLR.B
0000132C  4EF9 00001344            278                      JMP     CLRcode01   *CLR.W                                      
00001332  4EF9 00001350            279                      JMP     CLRcode10   *CLR.L
00001338                           280  
00001338  4EB9 00001868            281  CLRcode00   JSR     ISCLRB
0000133E  4EB9 000019F4            282              JSR     DONE
00001344  4EB9 0000187E            283  CLRcode01   JSR     ISCLRW  
0000134A  4EB9 000019F4            284              JSR     DONE                                 
00001350  4EB9 00001894            285  CLRcode10   JSR     ISCLRL  
00001356  4EB9 000019F4            286              JSR     DONE                    
0000135C                           287  
0000135C                           288  *****************************END someCLR ************************************
0000135C                           289  
0000135C                           290  *****************************NOPorCLRorRTSorJSR ************************************
0000135C  4FF8 7000                291  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
00001360  41F9 00001394            292                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
00001366  4280                     293                      CLR.L   D0                  ; Zero it
00001368  303C D883                294                      MOVE.W  #example,D0         ; We'll play with it here
0000136C                           295                      
0000136C  323C 4E71                296                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
00001370  B240                     297                      CMP.W   D0, D1
00001372  6700 008C                298                      BEQ     NOPcommand
00001376                           299   
00001376  323C 4E75                300                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
0000137A  B240                     301                      CMP.W   D0, D1
0000137C  6700 0076                302                      BEQ     RTScommand
00001380                           303    
00001380  123C 0004                304                      MOVE.B  #4,D1           ; Shift 4 bits left 
00001384  E360                     305                      ASL.W   D1,D0            
00001386  123C 000C                306                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000138A  E268                     307                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000138C                           308                                      ; and the rest are zeroed out)           
0000138C                           309    
0000138C                           310                      
0000138C  C0FC 0006                311                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001390  4EB0 0000                312                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001394                           313  
00001394  4EF9 0000140C            314  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
0000139A  4EF9 00001410            315                             JMP     JSRorCLRcode0001
000013A0  4EF9 00001414            316                             JMP     JSRorCLRcode0010   
000013A6  4EF9 0000141E            317                             JMP     JSRorCLRcode0011
000013AC  4EF9 00001422            318                             JMP     JSRorCLRcode0100
000013B2  4EF9 00001426            319                             JMP     JSRorCLRcode0101
000013B8  4EF9 0000142A            320                             JMP     JSRorCLRcode0110
000013BE  4EF9 0000142E            321                             JMP     JSRorCLRcode0111
000013C4  4EF9 00001432            322                             JMP     JSRorCLRcode1000
000013CA  4EF9 00001436            323                             JMP     JSRorCLRcode1001
000013D0  4EF9 0000143A            324                             JMP     JSRorCLRcode1010
000013D6  4EF9 0000143E            325                             JMP     JSRorCLRcode1011
000013DC  4EF9 00001442            326                             JMP     JSRorCLRcode1100
000013E2  4EF9 00001446            327                             JMP     JSRorCLRcode1101
000013E8  4EF9 0000144A            328                             JMP     JSRorCLRcode1110
000013EE  4EF9 00001456            329                             JMP     JSRorCLRcode1111
000013F4                           330  
000013F4  4EB9 00001902            331  RTScommand          JSR     ISRTS
000013FA  4EB9 000019F4            332                      JSR     DONE
00001400  4EB9 0000192E            333  NOPcommand          JSR     ISNOP 
00001406  4EB9 000019F4            334                      JSR     DONE                                                                  
0000140C  4E72 2700                335  JSRorCLRcode0000     STOP  #$2700
00001410  4E72 2700                336  JSRorCLRcode0001     STOP  #$2700
00001414  4EB8 12FC                337  JSRorCLRcode0010    JSR      someCLR
00001418  4EB9 000019F4            338                      JSR     DONE
0000141E  4E72 2700                339  JSRorCLRcode0011     STOP  #$2700
00001422  4E72 2700                340  JSRorCLRcode0100     STOP  #$2700
00001426  4E72 2700                341  JSRorCLRcode0101     STOP  #$2700
0000142A  4E72 2700                342  JSRorCLRcode0110     STOP  #$2700
0000142E  4E72 2700                343  JSRorCLRcode0111     STOP  #$2700
00001432  4E72 2700                344  JSRorCLRcode1000     STOP  #$2700
00001436  4E72 2700                345  JSRorCLRcode1001     STOP  #$2700
0000143A  4E72 2700                346  JSRorCLRcode1010     STOP  #$2700
0000143E  4E72 2700                347  JSRorCLRcode1011     STOP  #$2700
00001442  4E72 2700                348  JSRorCLRcode1100     STOP  #$2700
00001446  4E72 2700                349  JSRorCLRcode1101     STOP  #$2700
0000144A  4EB9 000018EC            350  JSRorCLRcode1110    JSR     ISJSR
00001450  4EB9 000019F4            351                      JSR     DONE
00001456  4E72 2700                352  JSRorCLRcode1111     STOP  #$2700
0000145A                           353  
0000145A                           354  *****************************END NOPorCLRorRTSorJSR ************************************
0000145A                           355  
0000145A                           356  
0000145A                           357  *****************************someMOVEM ************************************
0000145A  4FF8 7000                358  someMOVEM     LEA     STACK,SP            ; Load the SP
0000145E  41F9 0000147E            359                      LEA     tableSomeMOVEM, A0            ; Index into the table
00001464  4280                     360                      CLR.L   D0                  ; Zero it
00001466  303C D883                361                      MOVE.W  #example,D0         ; We'll play with it here
0000146A  123C 0009                362                      MOVE.B  #9,D1           ; Shift 9 bits left 
0000146E  E360                     363                      ASL.W   D1,D0            
00001470  123C 000C                364                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001474  E268                     365                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001476                           366                                      ; and the rest are zeroed out)           
00001476                           367    
00001476                           368                      
00001476  C0FC 0006                369                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000147A  4EB0 0000                370                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000147E                           371  
0000147E  4EF9 0000148A            372  tableSomeMOVEM    JMP     MOVEMcode00   ;MOVEM.W
00001484  4EF9 00001496            373                    JMP     MOVEMcode01   ;MOVEM.L                                      
0000148A                           374                        
0000148A                           375  
0000148A                           376                            
0000148A  4EB9 000018C0            377  MOVEMcode00         JSR     ISMOVEMW
00001490  4EB9 000019F4            378                      JSR     DONE
00001496  4EB9 000018AA            379  MOVEMcode01         JSR     ISMOVEML
0000149C  4EB9 000019F4            380                      JSR     DONE
000014A2                           381  
000014A2                           382  *****************************END someMOVEM ************************************
000014A2                           383  
000014A2                           384  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000014A2  4FF8 7000                385  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
000014A6  41F9 000014CC            386                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
000014AC  4280                     387                      CLR.L   D0                  ; Zero it
000014AE  303C D883                388                      MOVE.W  #example,D0         ; We'll play with it here
000014B2  123C 0007                389                      MOVE.B  #7,D1           ; Shift 7 bits right 
000014B6  E260                     390                      ASR.W   D1,D0 
000014B8                           391  
000014B8  123C 000D                392                      MOVE.B  #13,D1           ; Shift 6 bits left 
000014BC  E360                     393                      ASL.W   D1,D0            
000014BE  123C 000C                394                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014C2  E268                     395                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014C4                           396                                      ; and the rest are zeroed out)         
000014C4                           397    
000014C4                           398                      
000014C4  C0FC 0006                399                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014C8  4EB0 0000                400                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000014CC                           401  
000014CC  4EF9 00001526            402  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
000014D2  4EF9 0000152A            403                                    JMP     LOTScode0001
000014D8  4EF9 0000152E            404                                    JMP     LOTScode0010
000014DE  4EF9 00001538            405                                    JMP     LOTScode0011
000014E4  4EF9 0000153C            406                                    JMP     LOTScode0100
000014EA  4EF9 00001540            407                                    JMP     LOTScode0101
000014F0  4EF9 00001544            408                                    JMP     LOTScode0110
000014F6  4EF9 00001550            409                                    JMP     LOTScode0111
000014FC  4EF9 00001554            410                                    JMP     LOTScode1000
00001502  4EF9 0000155E            411                                    JMP     LOTScode1001
00001508  4EF9 00001562            412                                    JMP     LOTScode1010
0000150E  4EF9 0000156C            413                                    JMP     LOTScode1011
00001514  4EF9 00001570            414                                    JMP     LOTScode1100
0000151A  4EF9 00001574            415                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001520  4EF9 00001584            416                                    JMP     LOTScode1111                           
00001526                           417                        
00001526                           418  
00001526                           419                            
00001526  4E72 2700                420  LOTScode0000       STOP  #$2700
0000152A  4E72 2700                421  LOTScode0001       STOP  #$2700
0000152E  4EB8 145A                422  LOTScode0010        JSR    someMOVEM
00001532  4EB9 000019F4            423                     JSR    DONE
00001538  4E72 2700                424  LOTScode0011       STOP  #$2700                   
0000153C  4E72 2700                425  LOTScode0100        STOP  #$2700
00001540  4E72 2700                426  LOTScode0101        STOP  #$2700
00001544  4EB9 000018D6            427  LOTScode0110        JSR    ISLEA  
0000154A  4EB9 000019F4            428                     JSR    DONE 
00001550  4E72 2700                429  LOTScode0111        STOP  #$2700 
00001554  4EB8 135C                430  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001558  4EB9 000019F4            431                     JSR    DONE
0000155E  4E72 2700                432  LOTScode1001        STOP  #$2700               
00001562  4EB8 135C                433  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001566  4EB9 000019F4            434                     JSR    DONE
0000156C  4E72 2700                435  LOTScode1011        STOP  #$2700                   
00001570  4E72 2700                436  LOTScode1100        STOP  #$2700
00001574  4E72 2700                437  LOTScode1101     STOP  #$2700
00001578  4EB9 000018D6            438  LOTScode1110        JSR    ISLEA 
0000157E  4EB9 000019F4            439                     JSR    DONE
00001584  4E72 2700                440  LOTScode1111       STOP  #$2700                
00001588                           441                     
00001588                           442  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001588                           443  
00001588                           444  
00001588                           445  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001588  4FF8 7000                446  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
0000158C  41F9 000015AC            447                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001592  4280                     448                      CLR.L   D0                  ; Zero it
00001594  303C D883                449                      MOVE.W  #example,D0         ; We'll play with it here
00001598  123C 0007                450                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000159C  E360                     451                      ASL.W   D1,D0            
0000159E  123C 000D                452                      MOVE.B  #13,D1           
000015A2  E260                     453                      ASR.W   D1,D0             
000015A4                           454    
000015A4                           455                      
000015A4  C0FC 0006                456                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000015A8  4EB0 0000                457                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000015AC                           458  
000015AC  4EF9 000015BE            459  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
000015B2  4EF9 000015CA            460                                 JMP     ADDIWcode01
000015B8  4EF9 000015D6            461                                 JMP     ADDILcode10
000015BE                           462  
000015BE                           463                            
000015BE  4EB9 000019DE            464  ADDIBcode00        JSR     ISADDIB
000015C4  4EB9 000019F4            465                      JSR    DONE
000015CA  4EB9 000019B2            466  ADDIWcode01        JSR     ISADDIW
000015D0  4EB9 000019F4            467                      JSR    DONE
000015D6  4EB9 000019C8            468  ADDILcode10        JSR     ISADDIL
000015DC  4EB9 000019F4            469                      JSR    DONE
000015E2                           470  
000015E2                           471  *****************************END ADDI_BorADDI_WorADDI_L ************************************
000015E2                           472  
000015E2                           473  
000015E2                           474  
000015E2                           475  
000015E2                           476  *****************************MOVEA_LorMOVE_L ************************************
000015E2  4FF8 7000                477  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
000015E6  41F9 00001606            478                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
000015EC  4280                     479                      CLR.L   D0                  ; Zero it
000015EE  303C D883                480                      MOVE.W  #example,D0         ; We'll play with it here
000015F2  123C 0007                481                      MOVE.B  #7,D1           ; Shift 7 bits left 
000015F6  E360                     482                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
000015F8  123C 000D                483                      MOVE.B  #13,D1           ; Shift 13 bits right
000015FC  E260                     484                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
000015FE                           485    
000015FE                           486                      
000015FE  C0FC 0006                487                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001602  4EB0 0000                488                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001606                           489  
00001606  4EF9 00001636            490  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
0000160C  4EF9 00001642            491                          JMP     MOVEAcode001
00001612  4EF9 0000164E            492                          JMP     MOVEcode010
00001618  4EF9 0000165A            493                          JMP     MOVEcode011
0000161E  4EF9 00001666            494                          JMP     MOVEcode100
00001624  4EF9 00001672            495                          JMP     MOVEcode101
0000162A  4EF9 0000167E            496                          JMP     MOVEcode110
00001630  4EF9 0000168A            497                          JMP     MOVEcode111
00001636                           498                            
00001636  4EB9 00001970            499  MOVEcode000     JSR     ISMOVEL
0000163C  4EB9 000019F4            500                  JSR    DONE
00001642  4EB9 00001986            501  MOVEAcode001    JSR     ISMOVEAL
00001648  4EB9 000019F4            502                  JSR    DONE
0000164E  4EB9 00001970            503  MOVEcode010     JSR     ISMOVEL
00001654  4EB9 000019F4            504                  JSR    DONE
0000165A  4EB9 00001970            505  MOVEcode011     JSR     ISMOVEL
00001660  4EB9 000019F4            506                  JSR    DONE
00001666  4EB9 00001970            507  MOVEcode100     JSR     ISMOVEL
0000166C  4EB9 000019F4            508                  JSR    DONE
00001672  4EB9 00001970            509  MOVEcode101     JSR     ISMOVEL
00001678  4EB9 000019F4            510                  JSR    DONE
0000167E  4EB9 00001970            511  MOVEcode110     JSR     ISMOVEL
00001684  4EB9 000019F4            512                  JSR    DONE
0000168A  4EB9 00001970            513  MOVEcode111     JSR     ISMOVEL 
00001690  4EB9 000019F4            514                  JSR    DONE
00001696                           515  *****************************END MOVEA_LorMOVE_L ************************************
00001696                           516  
00001696                           517  *****************************MOVEA_WorMOVE_W ************************************
00001696  4FF8 7000                518  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
0000169A  41F9 000016BA            519                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
000016A0  4280                     520                      CLR.L   D0                  ; Zero it
000016A2  303C D883                521                      MOVE.W  #example,D0         ; We'll play with it here
000016A6  123C 0007                522                      MOVE.B  #7,D1           ; Shift 7 bits left 
000016AA  E360                     523                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
000016AC  123C 000D                524                      MOVE.B  #13,D1           ; Shift 13 bits right
000016B0  E260                     525                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
000016B2                           526    
000016B2                           527                      
000016B2  C0FC 0006                528                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016B6  4EB0 0000                529                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000016BA                           530  
000016BA  4EF9 000016EA            531  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
000016C0  4EF9 000016F6            532                          JMP     MOVEAWcode001
000016C6  4EF9 00001702            533                          JMP     MOVEWcode010
000016CC  4EF9 0000170E            534                          JMP     MOVEWcode011
000016D2  4EF9 0000171A            535                          JMP     MOVEWcode100
000016D8  4EF9 00001726            536                          JMP     MOVEWcode101
000016DE  4EF9 00001732            537                          JMP     MOVEWcode110
000016E4  4EF9 0000173E            538                          JMP     MOVEWcode111
000016EA                           539                            
000016EA  4EB9 00001944            540  MOVEWcode000     JSR     ISMOVEW
000016F0  4EB9 000019F4            541                  JSR    DONE
000016F6  4EB9 0000195A            542  MOVEAWcode001    JSR     ISMOVEAW
000016FC  4EB9 000019F4            543                  JSR    DONE
00001702  4EB9 00001944            544  MOVEWcode010     JSR     ISMOVEW
00001708  4EB9 000019F4            545                  JSR    DONE
0000170E  4EB9 00001944            546  MOVEWcode011     JSR     ISMOVEW
00001714  4EB9 000019F4            547                  JSR    DONE
0000171A  4EB9 00001944            548  MOVEWcode100     JSR     ISMOVEW
00001720  4EB9 000019F4            549                  JSR    DONE
00001726  4EB9 00001944            550  MOVEWcode101     JSR     ISMOVEW
0000172C  4EB9 000019F4            551                  JSR    DONE
00001732  4EB9 00001944            552  MOVEWcode110     JSR     ISMOVEW
00001738  4EB9 000019F4            553                  JSR    DONE
0000173E  4EB9 00001944            554  MOVEWcode111     JSR     ISMOVEW 
00001744  4EB9 000019F4            555                  JSR    DONE
0000174A                           556  *****************************END MOVEA_WorMOVE_W ************************************
0000174A                           557  
0000174A  48A7 FFFF                558  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000174E  43F9 00001AD9            559              LEA MESSAGEADDB, A1         *OPCODE is SUB.B
00001754  103C 000E                560              MOVE.B  #14, D0
00001758  4E4F                     561              TRAP    #15
0000175A                           562     
0000175A  4C9F FFFF                563              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000175E  4E75                     564              RTS
00001760                           565  
00001760  48A7 FFFF                566  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001764  43F9 00001AE1            567              LEA MESSAGEADDW, A1         *OPCODE is SUB.W
0000176A  103C 000E                568              MOVE.B  #14, D0
0000176E  4E4F                     569              TRAP    #15
00001770                           570     
00001770  4C9F FFFF                571              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001774  4E75                     572              RTS
00001776                           573              
00001776  48A7 FFFF                574  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000177A  43F9 00001AE9            575              LEA MESSAGEADDL, A1         *OPCODE is SUB.L
00001780  103C 000E                576              MOVE.B  #14, D0
00001784  4E4F                     577              TRAP    #15
00001786                           578     
00001786  4C9F FFFF                579              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000178A  4E75                     580              RTS  
0000178C                           581  
0000178C  48A7 FFFF                582  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001790  43F9 00001AC1            583              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
00001796  103C 000E                584              MOVE.B  #14, D0
0000179A  4E4F                     585              TRAP    #15
0000179C                           586     
0000179C  4C9F FFFF                587              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017A0  4E75                     588              RTS
000017A2                           589  
000017A2  48A7 FFFF                590  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017A6  43F9 00001AC9            591              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
000017AC  103C 000E                592              MOVE.B  #14, D0
000017B0  4E4F                     593              TRAP    #15
000017B2                           594     
000017B2  4C9F FFFF                595              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017B6  4E75                     596              RTS
000017B8                           597              
000017B8  48A7 FFFF                598  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017BC  43F9 00001AD1            599              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
000017C2  103C 000E                600              MOVE.B  #14, D0
000017C6  4E4F                     601              TRAP    #15
000017C8                           602     
000017C8  4C9F FFFF                603              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017CC  4E75                     604              RTS  
000017CE                           605  
000017CE  48A7 FFFF                606  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017D2  43F9 00001AA9            607              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
000017D8  103C 000E                608              MOVE.B  #14, D0
000017DC  4E4F                     609              TRAP    #15
000017DE                           610     
000017DE  4C9F FFFF                611              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017E2  4E75                     612              RTS
000017E4                           613  
000017E4  48A7 FFFF                614  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017E8  43F9 00001AB1            615              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
000017EE  103C 000E                616              MOVE.B  #14, D0
000017F2  4E4F                     617              TRAP    #15
000017F4                           618     
000017F4  4C9F FFFF                619              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017F8  4E75                     620              RTS
000017FA                           621              
000017FA  48A7 FFFF                622  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017FE  43F9 00001AB9            623              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
00001804  103C 000E                624              MOVE.B  #14, D0
00001808  4E4F                     625              TRAP    #15
0000180A                           626     
0000180A  4C9F FFFF                627              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000180E  4E75                     628              RTS    
00001810                           629  
00001810  48A7 FFFF                630  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001814  43F9 00001A8E            631              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
0000181A  103C 000E                632              MOVE.B  #14, D0
0000181E  4E4F                     633              TRAP    #15
00001820                           634     
00001820  4C9F FFFF                635              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001824  4E75                     636              RTS
00001826                           637  
00001826  48A7 FFFF                638  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000182A  43F9 00001A97            639              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00001830  103C 000E                640              MOVE.B  #14, D0
00001834  4E4F                     641              TRAP    #15
00001836                           642     
00001836  4C9F FFFF                643              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000183A  4E75                     644              RTS
0000183C                           645              
0000183C  48A7 FFFF                646  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001840  43F9 00001AA0            647              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
00001846  103C 000E                648              MOVE.B  #14, D0
0000184A  4E4F                     649              TRAP    #15
0000184C                           650     
0000184C  4C9F FFFF                651              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001850  4E75                     652              RTS            
00001852                           653              
00001852  48A7 FFFF                654  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001856  43F9 00001AF1            655              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
0000185C  103C 000E                656              MOVE.B  #14, D0
00001860  4E4F                     657              TRAP    #15
00001862                           658     
00001862  4C9F FFFF                659              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001866  4E75                     660              RTS
00001868                           661  
00001868  48A7 FFFF                662  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000186C  43F9 00001A76            663              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00001872  103C 000E                664              MOVE.B  #14, D0
00001876  4E4F                     665              TRAP    #15
00001878                           666     
00001878  4C9F FFFF                667              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000187C  4E75                     668              RTS
0000187E                           669  
0000187E  48A7 FFFF                670  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001882  43F9 00001A7E            671              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
00001888  103C 000E                672              MOVE.B  #14, D0
0000188C  4E4F                     673              TRAP    #15
0000188E                           674     
0000188E  4C9F FFFF                675              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001892  4E75                     676              RTS
00001894                           677  
00001894  48A7 FFFF                678  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001898  43F9 00001A86            679              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
0000189E  103C 000E                680              MOVE.B  #14, D0
000018A2  4E4F                     681              TRAP    #15
000018A4                           682     
000018A4  4C9F FFFF                683              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018A8  4E75                     684              RTS
000018AA                           685              
000018AA  48A7 FFFF                686  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018AE  43F9 00001A4A            687              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
000018B4  103C 000E                688              MOVE.B  #14, D0
000018B8  4E4F                     689              TRAP    #15
000018BA                           690     
000018BA  4C9F FFFF                691              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018BE  4E75                     692              RTS
000018C0                           693  
000018C0  48A7 FFFF                694  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018C4  43F9 00001A54            695              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
000018CA  103C 000E                696              MOVE.B  #14, D0
000018CE  4E4F                     697              TRAP    #15
000018D0                           698     
000018D0  4C9F FFFF                699              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018D4  4E75                     700              RTS  
000018D6                           701  
000018D6  48A7 FFFF                702  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018DA  43F9 00001A70            703              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
000018E0  103C 000E                704              MOVE.B  #14, D0
000018E4  4E4F                     705              TRAP    #15
000018E6                           706     
000018E6  4C9F FFFF                707              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018EA  4E75                     708              RTS                          ; Exit subroutine
000018EC                           709  
000018EC  48A7 FFFF                710  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018F0  43F9 00001A5E            711              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
000018F6  103C 000E                712              MOVE.B  #14, D0
000018FA  4E4F                     713              TRAP    #15
000018FC  4C9F FFFF                714              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001900  4E75                     715              RTS                          ; Exit subroutine
00001902                           716              
00001902  48A7 FFFF                717  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001906  43F9 00001A6A            718              LEA MESSAGERTS, A1         *OPCODE is RTS
0000190C  103C 000E                719              MOVE.B  #14, D0
00001910  4E4F                     720              TRAP    #15
00001912  4C9F FFFF                721              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001916  4E75                     722              RTS  
00001918                           723  
00001918  48A7 FFFF                724  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000191C  43F9 00001A64            725              LEA MESSAGECLR, A1         *OPCODE is CLR
00001922  103C 000E                726              MOVE.B  #14, D0
00001926  4E4F                     727              TRAP    #15
00001928  4C9F FFFF                728              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000192C  4E75                     729              RTS  
0000192E                           730              
0000192E  48A7 FFFF                731  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001932  43F9 000019FA            732              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
00001938  103C 000E                733              MOVE.B  #14, D0
0000193C  4E4F                     734              TRAP    #15
0000193E  4C9F FFFF                735              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001942  4E75                     736              RTS                          ; Exit subroutine
00001944                           737           
00001944  48A7 FFFF                738  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001948  43F9 00001A00            739              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
0000194E  103C 000E                740              MOVE.B  #14, D0
00001952  4E4F                     741              TRAP    #15
00001954                           742     
00001954  4C9F FFFF                743              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001958  4E75                     744              RTS                          ; Exit subroutine
0000195A                           745              
0000195A  48A7 FFFF                746  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000195E  43F9 00001A40            747              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
00001964  103C 000E                748              MOVE.B  #14, D0
00001968  4E4F                     749              TRAP    #15
0000196A                           750     
0000196A  4C9F FFFF                751              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000196E  4E75                     752              RTS                          ; Exit subroutine
00001970                           753              
00001970  48A7 FFFF                754  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001974  43F9 00001A09            755              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
0000197A  103C 000E                756              MOVE.B  #14, D0
0000197E  4E4F                     757              TRAP    #15
00001980                           758              
00001980  4C9F FFFF                759              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001984  4E75                     760              RTS                          ; Exit subroutine
00001986                           761              
00001986  48A7 FFFF                762  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000198A  43F9 00001A36            763              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
00001990  103C 000E                764              MOVE.B  #14, D0
00001994  4E4F                     765              TRAP    #15
00001996                           766              
00001996  4C9F FFFF                767              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000199A  4E75                     768              RTS                          ; Exit subroutine
0000199C                           769         
0000199C  48A7 FFFF                770  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019A0  43F9 00001A12            771              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
000019A6  103C 000E                772              MOVE.B  #14, D0
000019AA  4E4F                     773              TRAP    #15
000019AC                           774              
000019AC  4C9F FFFF                775              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019B0  4E75                     776              RTS                          ; Exit subroutine
000019B2                           777           
000019B2  48A7 FFFF                778  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019B6  43F9 00001A1B            779              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
000019BC  103C 000E                780              MOVE.B  #14, D0
000019C0  4E4F                     781              TRAP    #15
000019C2                           782              
000019C2  4C9F FFFF                783              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019C6  4E75                     784              RTS                          ; Exit subroutine
000019C8                           785              
000019C8  48A7 FFFF                786  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019CC  43F9 00001A24            787              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
000019D2  103C 000E                788              MOVE.B  #14, D0
000019D6  4E4F                     789              TRAP    #15
000019D8                           790              
000019D8  4C9F FFFF                791              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019DC  4E75                     792              RTS                          ; Exit subroutine
000019DE                           793                  
000019DE  48A7 FFFF                794  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019E2  43F9 00001A2D            795              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
000019E8  103C 000E                796              MOVE.B  #14, D0
000019EC  4E4F                     797              TRAP    #15
000019EE                           798              
000019EE  4C9F FFFF                799              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019F2  4E75                     800              RTS                          ; Exit subroutine
000019F4                           801                        
000019F4  103C 0009                802  DONE        MOVE.B      #9, D0
000019F8  4E4F                     803              TRAP        #15
000019FA                           804  
000019FA  =0000000D                805  CR  EQU     $0D 
000019FA  =0000000A                806  LF  EQU     $0A
000019FA= 4E 4F 50 0D 0A 00        807  MESSAGENOP DC.B    'NOP',CR,LF, 0    
00001A00                           808      
00001A00= 4D 4F 56 45 2E 57 ...    809  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
00001A09= 4D 4F 56 45 2E 4C ...    810  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
00001A12= 4D 4F 56 45 2E 42 ...    811  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
00001A1B                           812  
00001A1B= 41 44 44 49 2E 57 ...    813  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
00001A24= 41 44 44 49 2E 4C ...    814  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
00001A2D= 41 44 44 49 2E 42 ...    815  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
00001A36                           816  
00001A36= 4D 4F 56 45 41 2E ...    817  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
00001A40= 4D 4F 56 45 41 2E ...    818  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
00001A4A                           819  
00001A4A= 4D 4F 56 45 4D 2E ...    820  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
00001A54= 4D 4F 56 45 4D 2E ...    821  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00001A5E                           822  
00001A5E= 4A 53 52 0D 0A 00        823  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
00001A64                           824  
00001A64= 43 4C 52 0D 0A 00        825  MESSAGECLR DC.B    'CLR',CR,LF, 0
00001A6A                           826  
00001A6A= 52 54 53 0D 0A 00        827  MESSAGERTS DC.B    'RTS',CR,LF, 0
00001A70                           828  
00001A70= 4C 45 41 0D 0A 00        829  MESSAGELEA DC.B    'LEA',CR,LF, 0
00001A76                           830  
00001A76= 43 4C 52 2E 42 0D ...    831  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00001A7E= 43 4C 52 2E 57 0D ...    832  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00001A86= 43 4C 52 2E 4C 0D ...    833  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00001A8E                           834  
00001A8E= 41 44 44 51 2E 42 ...    835  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
00001A97= 41 44 44 51 2E 57 ...    836  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
00001AA0= 41 44 44 51 2E 4C ...    837  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
00001AA9                           838  
00001AA9= 43 4D 50 2E 42 0D ...    839  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
00001AB1= 43 4D 50 2E 57 0D ...    840  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
00001AB9= 43 4D 50 2E 4C 0D ...    841  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
00001AC1                           842  
00001AC1= 53 55 42 2E 42 0D ...    843  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
00001AC9= 53 55 42 2E 57 0D ...    844  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
00001AD1= 53 55 42 2E 4C 0D ...    845  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
00001AD9                           846  
00001AD9= 41 44 44 2E 42 0D ...    847  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0 
00001AE1= 41 44 44 2E 57 0D ...    848  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
00001AE9= 41 44 44 2E 4C 0D ...    849  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
00001AF1                           850  
00001AF1= 4D 4F 56 45 51 2E ...    851  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
00001AFB                           852  
00001AFC  FFFF FFFF                853      SIMHALT             ; halt simulator
00001B00                           854  
00001B00                           855  * Put variables and constants here
00001B00                           856  
00001B00                           857      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          1150
ADDCODE001          115C
ADDCODE010          1168
ADDCODE011          1174
ADDCODE100          1178
ADDCODE101          1184
ADDCODE110          1190
ADDIBCODE00         15BE
ADDILCODE10         15D6
ADDIWCODE01         15CA
ADDI_BORADDI_WORADDI_L  1588
ADDQCODE00          12D8
ADDQCODE01          12E4
ADDQCODE10          12F0
ADDQ_BORADDQ_WORADDQ_L  129C
ADD_BORADD_WORADD_L  10FC
CLRCODE00           1338
CLRCODE01           1344
CLRCODE10           1350
CMPCODE000          1278
CMPCODE001          1284
CMPCODE010          1290
CMP_BORCMP_WORCMP_L  123C
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10C8
CODE1010            10D4
CODE1011            10D8
CODE1100            10E4
CODE1101            10E8
CODE1110            10F4
CODE1111            10F8
CR                  D
DONE                19F4
EXAMPLE             D883
ISADDB              174A
ISADDIB             19DE
ISADDIL             19C8
ISADDIW             19B2
ISADDL              1776
ISADDQB             1810
ISADDQL             183C
ISADDQW             1826
ISADDW              1760
ISCLR               1918
ISCLRB              1868
ISCLRL              1894
ISCLRW              187E
ISCMPB              17CE
ISCMPL              17FA
ISCMPW              17E4
ISJSR               18EC
ISLEA               18D6
ISMOVEAL            1986
ISMOVEAW            195A
ISMOVEB             199C
ISMOVEL             1970
ISMOVEML            18AA
ISMOVEMW            18C0
ISMOVEQL            1852
ISMOVEW             1944
ISNOP               192E
ISRTS               1902
ISSUBB              178C
ISSUBL              17B8
ISSUBW              17A2
JSRORCLRCODE0000    140C
JSRORCLRCODE0001    1410
JSRORCLRCODE0010    1414
JSRORCLRCODE0011    141E
JSRORCLRCODE0100    1422
JSRORCLRCODE0101    1426
JSRORCLRCODE0110    142A
JSRORCLRCODE0111    142E
JSRORCLRCODE1000    1432
JSRORCLRCODE1001    1436
JSRORCLRCODE1010    143A
JSRORCLRCODE1011    143E
JSRORCLRCODE1100    1442
JSRORCLRCODE1101    1446
JSRORCLRCODE1110    144A
JSRORCLRCODE1111    1456
LF                  A
LOTSCODE0000        1526
LOTSCODE0001        152A
LOTSCODE0010        152E
LOTSCODE0011        1538
LOTSCODE0100        153C
LOTSCODE0101        1540
LOTSCODE0110        1544
LOTSCODE0111        1550
LOTSCODE1000        1554
LOTSCODE1001        155E
LOTSCODE1010        1562
LOTSCODE1011        156C
LOTSCODE1100        1570
LOTSCODE1101        1574
LOTSCODE1110        1578
LOTSCODE1111        1584
MESSAGEADDB         1AD9
MESSAGEADDIB        1A2D
MESSAGEADDIL        1A24
MESSAGEADDIW        1A1B
MESSAGEADDL         1AE9
MESSAGEADDQB        1A8E
MESSAGEADDQL        1AA0
MESSAGEADDQW        1A97
MESSAGEADDW         1AE1
MESSAGECLR          1A64
MESSAGECLRB         1A76
MESSAGECLRL         1A86
MESSAGECLRW         1A7E
MESSAGECMPB         1AA9
MESSAGECMPL         1AB9
MESSAGECMPW         1AB1
MESSAGEJSR          1A5E
MESSAGELEA          1A70
MESSAGEMOVEAL       1A36
MESSAGEMOVEAW       1A40
MESSAGEMOVEB        1A12
MESSAGEMOVEL        1A09
MESSAGEMOVEML       1A4A
MESSAGEMOVEMW       1A54
MESSAGEMOVEQL       1AF1
MESSAGEMOVEW        1A00
MESSAGENOP          19FA
MESSAGERTS          1A6A
MESSAGESUBB         1AC1
MESSAGESUBL         1AD1
MESSAGESUBW         1AC9
MOVEACODE001        1642
MOVEAWCODE001       16F6
MOVEA_LORMOVE_L     15E2
MOVEA_WORMOVE_W     1696
MOVECODE000         1636
MOVECODE010         164E
MOVECODE011         165A
MOVECODE100         1666
MOVECODE101         1672
MOVECODE110         167E
MOVECODE111         168A
MOVEMCODE00         148A
MOVEMCODE01         1496
MOVEWCODE000        16EA
MOVEWCODE010        1702
MOVEWCODE011        170E
MOVEWCODE100        171A
MOVEWCODE101        1726
MOVEWCODE110        1732
MOVEWCODE111        173E
NOPCOMMAND          1400
NOPORCLRORRTSORJSR  135C
NOP_MOVEM_LEA_JSR_CLR_RTS  14A2
RTSCOMMAND          13F4
SHIFT               C
SOMECLR             12FC
SOMEMOVEM           145A
STACK               7000
START               1000
SUBCODE000          11F0
SUBCODE001          11FC
SUBCODE010          1208
SUBCODE011          1214
SUBCODE100          1218
SUBCODE101          1224
SUBCODE110          1230
SUB_BORSUB_WORSUB_L  119C
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  15AC
TABLEADDQ_BORADDQ_WORADDQ_L  12C6
TABLEADD_BORADD_WORADD_L  1126
TABLECMP_BORCMP_WORCMP_L  1266
TABLEMOVEA_LORMOVE_L  1606
TABLEMOVEA_WORMOVE_W  16BA
TABLENOPORCLRORRTSORJSR  1394
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  14CC
TABLESOMECLR        1326
TABLESOMEMOVEM      147E
TABLESUB_BORSUB_WORSUB_L  11C6
