00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/18/2016 3:24:27 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000                            57  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000                            60  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            61  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            62  
00001000                            63  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            64  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            65  
00001000                            66  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            67  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            68  
00001000                            69  *example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            70  
00001000                            71  *example EQU     %0100110000000011 ; MULS.L D3, D4 = 01001 1 0000 000 011
00001000                            72  
00001000                            73  *example EQU     %0100100010010100 ; MOVEM.W (A4), (D16A6) = 0100 1000 10 010 100
00001000                            74  *example EQU     %0100110010101110 ; MOVEM.W (D16A6), (A4) = 0100 1100 10 101 110
00001000                            75  
00001000                            76  *example EQU     %0100100011010100 ; MOVEM.L (A4), (D16A6) = 0100 1000 11 010 100
00001000                            77  *example EQU     %0100110011101110 ; MOVEM.L (D16A6), (A4) = 0100 1100 11 101 110
00001000                            78  
00001000                            79  *example EQU     %1110111100011010  ; ROL.B  D1,D2 = 1110 111 1 00 0 11 010 where D1 = 0x111 or 7
00001000                            80  *example EQU     %1110111101011010  ; ROL.W  D1,D2 = 1110 111 1 01 0 11 010 where D1 = 0x111 or 7
00001000                            81  *example EQU     %1110111110011010  ; ROL.L  D1,D2 = 1110 111 1 10 0 11 010 where D1 = 0x111 or 7
00001000                            82  
00001000                            83  *example EQU     %1110111000011010  ; ROR.B  D1,D2 = 1110 111 0 00 0 11 010 where D1 = 0x111 or 7
00001000                            84  *example EQU     %1110111001011010  ; ROR.W  D1,D2 = 1110 111 0 01 0 11 010 where D1 = 0x111 or 7
00001000                            85  *example EQU     %1110111010011010  ; ROR.L  D1,D2 = 1110 111 0 10 0 11 010 where D1 = 0x111 or 7
00001000                            86  
00001000                            87  *example EQU     %1110111100001010  ; LSL.B  D1,D2 = 1110 111 1 00 0 01 010 where D1 = 0x111 or 7
00001000                            88  *example EQU     %1110111101001010  ; LSL.W  D1,D2 = 1110 111 1 01 0 01 010 where D1 = 0x111 or 7
00001000                            89  *example EQU     %1110111110001010  ; LSL.L  D1,D2 = 1110 111 1 10 0 01 010 where D1 = 0x111 or 7
00001000                            90  
00001000                            91  *example EQU     %1110111000001010  ; LSR.B  D1,D2 = 1110 111 0 00 0 01 010 where D1 = 0x111 or 7
00001000                            92  *example EQU     %1110111001001010  ; LSR.W  D1,D2 = 1110 111 0 01 0 01 010 where D1 = 0x111 or 7
00001000                            93  *example EQU     %1110111010001010  ; LSR.L  D1,D2 = 1110 111 0 10 0 01 010 where D1 = 0x111 or 7
00001000                            94  
00001000                            95  *example EQU     %1110111100000010  ; ASL.B  D1,D2 = 1110 111 1 00 0 00 010 where D1 = 0x111 or 7
00001000                            96  *example EQU     %1110111101000010  ; ASL.W  D1,D2 = 1110 111 1 01 0 00 010 where D1 = 0x111 or 7
00001000                            97  *example EQU     %1110111110000010  ; ASL.L  D1,D2 = 1110 111 1 10 0 00 010 where D1 = 0x111 or 7
00001000                            98  
00001000                            99  *example EQU     %1110111000000010  ; ASR.B  D1,D2 = 1110 111 0 00 0 00 010 where D1 = 0x111 or 7
00001000                           100  *example EQU     %1110111001000010  ; ASR.W  D1,D2 = 1110 111 0 01 0 00 010 where D1 = 0x111 or 7
00001000                           101  *example EQU     %1110111010000010  ; ASR.L  D1,D2 = 1110 111 0 10 0 00 010 where D1 = 0x111 or 7
00001000                           102  
00001000                           103  *example EQU     %1000100011000011 ; DIVU.? D3,D4 = 1000 100 011 000 011
00001000                           104  
00001000                           105  *example EQU     %1000100000000011 ; OR.B D3,D4 = 1000 100 000 000 011
00001000                           106  *example EQU     %1000100100000011 ; OR.B D3,D4 = 1000 100 100 000 011
00001000                           107  *example EQU     %1000100001000011 ; OR.W D3,D4 = 1000 100 001 000 011
00001000                           108  *example EQU     %1000100101000011 ; OR.W D3,D4 = 1000 100 101 000 011
00001000                           109  *example EQU     %1000100010000011 ; OR.L D3,D4 = 1000 100 010 000 011
00001000  =00008983                110  example EQU     %1000100110000011 ; OR.L D3,D4 = 1000 100 110 000 011
00001000                           111  
00001000                           112  
00001000  =0000000C                113  shift   EQU     12                 ; Shift 12 bits 
00001000                           114  
00001000                           115  * Program starts here
00001000                           116  
00001000  4FF8 7000                117          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E            118          LEA     table,A0            ; Index into the table
0000100A  4280                     119          CLR.L   D0                  ; Zero it
0000100C  303C 8983                120          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                121          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                     122          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                           123                                      ; and the rest are zeroed out)
00001016  C0FC 0006                124          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                125          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                           126  
0000101E  4EF9 0000107E            127  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084            128          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090            129          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096            130          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C            131          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS or MULS.W
0000103C  4EF9 000010A8            132          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4            133          JMP     code0110
00001048  4EF9 000010B8            134          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4            135          JMP     code1000        ; OR.B or OR.W or OR.L or DIVU (DIVU is either word or long depending on ea)
00001054  4EF9 000010D0            136          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010DC            137          JMP     code1010
00001060  4EF9 000010E0            138          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010EC            139          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 000010F8            140          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 00001104            141          JMP     code1110        ; ROd_LSd_ASd
00001078  4EF9 00001110            142          JMP     code1111
0000107E                           143         
0000107E                           144  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           145  
0000107E  4EB9 00001A9E            146  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 00002130            147  code0001 JSR   ISMOVEB
0000108A  4EB9 00002188            148           JSR   DONE
00001090  4EB9 00001AF8            149  code0010 JSR   MOVEA_LorMOVE_L        
00001096  4EB9 00001BAC            150  code0011 JSR  MOVEA_WorMOVE_W        
0000109C  4EB9 000019B6            151  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 00002188            152           JSR    DONE
000010A8  4EB9 000017AA            153  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 00002188            154           JSR    DONE
000010B4  4E72 2700                155  code0110 STOP  #$2700
000010B8  4EB9 00001FE6            156  code0111 JSR    ISMOVEQL
000010BE  4EB9 00002188            157           JSR    DONE
000010C4  4EB9 00001114            158  code1000 JSR    OR_BorOR_WorOR_LorDIVU
000010CA  4EB9 00002188            159           JSR    DONE
000010D0  4EB9 000016AA            160  code1001 JSR    SUB_BorSUB_WorSUB_L
000010D6  4EB9 00002188            161           JSR    DONE
000010DC  4E72 2700                162  code1010 STOP  #$2700
000010E0  4EB9 0000174A            163  code1011 JSR    CMP_BorCMP_WorCMP_L
000010E6  4EB9 00002188            164           JSR DONE
000010EC  4EB9 0000153E            165  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010F2  4EB9 00002188            166           JSR    DONE
000010F8  4EB9 000015F0            167  code1101 JSR    ADD_BorADD_WorADD_L
000010FE  4EB9 00002188            168           JSR    DONE
00001104  4EB9 000014DA            169  code1110 JSR    ROd_LSd_ASd
0000110A  4EB9 00002188            170           JSR    DONE
00001110  4E72 2700                171  code1111 STOP  #$2700
00001114                           172  
00001114                           173  *****************************  OR_BorOR_WorOR_LorDIVU ************************************
00001114  4FF8 7000                174  OR_BorOR_WorOR_LorDIVU     LEA     STACK,SP            ; Load the SP
00001118  41F9 0000113E            175                      LEA     tableOR_BorOR_WorOR_LorDIVU, A0            ; Index into the table
0000111E  4280                     176                      CLR.L   D0                  ; Zero it
00001120  303C 8983                177                      MOVE.W  #example,D0         ; We'll play with it here
00001124  123C 0007                178                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001128  E360                     179                      ASL.W   D1,D0            
0000112A  123C 000C                180                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000112E  E268                     181                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001130                           182                                      ; and the rest are zeroed out)           
00001130  123C 0001                183                      MOVE.B  #1,D1           ; Shift 1 bits right
00001134  E260                     184                      ASR.W   D1,D0 
00001136                           185                      
00001136  C0FC 0006                186                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000113A  4EB0 0000                187                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000113E                           188  
0000113E  4EF9 00001168            189  tableOR_BorOR_WorOR_LorDIVU             JMP    OR_DIVUcode000   ; OR.B
00001144  4EF9 00001174            190                                          JMP    OR_DIVUcode001   ; OR.W                                    
0000114A  4EF9 00001180            191                                          JMP    OR_DIVUcode010   ; OR.L
00001150                           192                                   
00001150  4EF9 0000118C            193                                          JMP    OR_DIVUcode011   ; DIVU (either word or long from ea)
00001156  4EF9 00001198            194                                          JMP    OR_DIVUcode100   ; OR.B
0000115C  4EF9 000011A4            195                                          JMP    OR_DIVUcode101   ; OR.W
00001162  4EF9 000011B0            196                                          JMP    OR_DIVUcode110   ; OR.L
00001168                           197                                          ;JMP    OR_DIVUcode111   
00001168                           198  
00001168                           199  
00001168  4EB9 00001C76            200  OR_DIVUcode000      JSR     ISORB
0000116E  4EB9 00002188            201                      JSR     DONE
00001174  4EB9 00001C8C            202  OR_DIVUcode001      JSR     ISORW  
0000117A  4EB9 00002188            203                      JSR     DONE                                 
00001180  4EB9 00001CA2            204  OR_DIVUcode010      JSR     ISORL 
00001186  4EB9 00002188            205                      JSR     DONE  
0000118C  4EB9 00001C60            206  OR_DIVUcode011      JSR     ISDIVU
00001192  4EB9 00002188            207                      JSR     DONE
00001198  4EB9 00001C76            208  OR_DIVUcode100      JSR     ISORB
0000119E  4EB9 00002188            209                      JSR     DONE
000011A4  4EB9 00001C8C            210  OR_DIVUcode101      JSR     ISORW  
000011AA  4EB9 00002188            211                      JSR     DONE                                 
000011B0  4EB9 00001CA2            212  OR_DIVUcode110      JSR     ISORL 
000011B6  4EB9 00002188            213                      JSR     DONE 
000011BC                           214  
000011BC                           215     
000011BC                           216  ***************************** END  ADD_BorADD_WorADD_L ************************************
000011BC                           217  
000011BC                           218  *****************************someASR ************************************
000011BC  4FF8 7000                219  someASR    LEA     STACK,SP            ; Load the SP
000011C0  41F9 000011E6            220                      LEA     tableSomeASR, A0            ; Index into the table
000011C6  4280                     221                      CLR.L   D0                  ; Zero it
000011C8  303C 8983                222                      MOVE.W  #example,D0         ; We'll play with it here
000011CC  123C 0008                223                      MOVE.B  #8,D1           ; Shift 8 bits left 
000011D0  E360                     224                      ASL.W   D1,D0            
000011D2  123C 000C                225                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011D6  E268                     226                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011D8                           227                                      ; and the rest are zeroed out)           
000011D8  123C 0002                228                      MOVE.B  #2,D1           ; Shift 2 bits right
000011DC  E260                     229                      ASR.W   D1,D0 
000011DE                           230                      
000011DE  C0FC 0006                231                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011E2  4EB0 0000                232                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011E6                           233  
000011E6  4EF9 000011F8            234  tableSomeASR        JMP     ASRcode00   *ASR.B
000011EC  4EF9 00001204            235                      JMP     ASRcode01   *ASR.W                                      
000011F2  4EF9 00001210            236                      JMP     ASRcode10   *ASR.L
000011F8                           237  
000011F8  4EB9 00001CB8            238  ASRcode00   JSR     ISASRB
000011FE  4EB9 00002188            239              JSR     DONE
00001204  4EB9 00001CCE            240  ASRcode01   JSR     ISASRW  
0000120A  4EB9 00002188            241              JSR     DONE                                 
00001210  4EB9 00001CE4            242  ASRcode10   JSR     ISASRL  
00001216  4EB9 00002188            243              JSR     DONE                    
0000121C                           244  
0000121C                           245  *****************************END someLSL ************************************
0000121C                           246  
0000121C                           247  
0000121C                           248  *****************************someASL ************************************
0000121C  4FF8 7000                249  someASL    LEA     STACK,SP            ; Load the SP
00001220  41F9 00001246            250                      LEA     tableSomeASL, A0            ; Index into the table
00001226  4280                     251                      CLR.L   D0                  ; Zero it
00001228  303C 8983                252                      MOVE.W  #example,D0         ; We'll play with it here
0000122C  123C 0008                253                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001230  E360                     254                      ASL.W   D1,D0            
00001232  123C 000C                255                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001236  E268                     256                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001238                           257                                      ; and the rest are zeroed out)           
00001238  123C 0002                258                      MOVE.B  #2,D1           ; Shift 2 bits right
0000123C  E260                     259                      ASR.W   D1,D0 
0000123E                           260                      
0000123E  C0FC 0006                261                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001242  4EB0 0000                262                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001246                           263  
00001246  4EF9 00001258            264  tableSomeASL        JMP     ASLcode00   *ASL.B
0000124C  4EF9 00001264            265                      JMP     ASLcode01   *ASL.W                                      
00001252  4EF9 00001270            266                      JMP     ASLcode10   *ASL.L
00001258                           267  
00001258  4EB9 00001CFA            268  ASLcode00   JSR     ISASLB
0000125E  4EB9 00002188            269              JSR     DONE
00001264  4EB9 00001D10            270  ASLcode01   JSR     ISASLW  
0000126A  4EB9 00002188            271              JSR     DONE                                 
00001270  4EB9 00001D26            272  ASLcode10   JSR     ISASLL  
00001276  4EB9 00002188            273              JSR     DONE                    
0000127C                           274  
0000127C                           275  *****************************END someLSL ************************************
0000127C                           276  
0000127C                           277  
0000127C                           278  *****************************someLSR ************************************
0000127C  4FF8 7000                279  someLSR    LEA     STACK,SP            ; Load the SP
00001280  41F9 000012A6            280                      LEA     tableSomeLSR, A0            ; Index into the table
00001286  4280                     281                      CLR.L   D0                  ; Zero it
00001288  303C 8983                282                      MOVE.W  #example,D0         ; We'll play with it here
0000128C  123C 0008                283                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001290  E360                     284                      ASL.W   D1,D0            
00001292  123C 000C                285                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001296  E268                     286                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001298                           287                                      ; and the rest are zeroed out)           
00001298  123C 0002                288                      MOVE.B  #2,D1           ; Shift 2 bits right
0000129C  E260                     289                      ASR.W   D1,D0 
0000129E                           290                      
0000129E  C0FC 0006                291                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012A2  4EB0 0000                292                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012A6                           293  
000012A6  4EF9 000012B8            294  tableSomeLSR        JMP     LSRcode00   *LSR.B
000012AC  4EF9 000012C4            295                      JMP     LSRcode01   *LSR.W                                      
000012B2  4EF9 000012D0            296                      JMP     LSRcode10   *LSR.L
000012B8                           297  
000012B8  4EB9 00001D3C            298  LSRcode00   JSR     ISLSRB
000012BE  4EB9 00002188            299              JSR     DONE
000012C4  4EB9 00001D52            300  LSRcode01   JSR     ISLSRW  
000012CA  4EB9 00002188            301              JSR     DONE                                 
000012D0  4EB9 00001D68            302  LSRcode10   JSR     ISLSRL  
000012D6  4EB9 00002188            303              JSR     DONE                    
000012DC                           304  
000012DC                           305  *****************************END someLSR ************************************
000012DC                           306  
000012DC                           307  
000012DC                           308  *****************************someLSL ************************************
000012DC  4FF8 7000                309  someLSL    LEA     STACK,SP            ; Load the SP
000012E0  41F9 00001306            310                      LEA     tableSomeLSL, A0            ; Index into the table
000012E6  4280                     311                      CLR.L   D0                  ; Zero it
000012E8  303C 8983                312                      MOVE.W  #example,D0         ; We'll play with it here
000012EC  123C 0008                313                      MOVE.B  #8,D1           ; Shift 8 bits left 
000012F0  E360                     314                      ASL.W   D1,D0            
000012F2  123C 000C                315                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000012F6  E268                     316                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012F8                           317                                      ; and the rest are zeroed out)           
000012F8  123C 0002                318                      MOVE.B  #2,D1           ; Shift 2 bits right
000012FC  E260                     319                      ASR.W   D1,D0 
000012FE                           320                      
000012FE  C0FC 0006                321                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001302  4EB0 0000                322                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001306                           323  
00001306  4EF9 00001318            324  tableSomeLSL        JMP     LSLcode00   *LSL.B
0000130C  4EF9 00001324            325                      JMP     LSLcode01   *LSL.W                                      
00001312  4EF9 00001330            326                      JMP     LSLcode10   *LSL.L
00001318                           327  
00001318  4EB9 00001D7E            328  LSLcode00   JSR     ISLSLB
0000131E  4EB9 00002188            329              JSR     DONE
00001324  4EB9 00001D94            330  LSLcode01   JSR     ISLSLW  
0000132A  4EB9 00002188            331              JSR     DONE                                 
00001330  4EB9 00001DAA            332  LSLcode10   JSR     ISLSLL  
00001336  4EB9 00002188            333              JSR     DONE                    
0000133C                           334  
0000133C                           335  *****************************END someLSL ************************************
0000133C                           336  
0000133C                           337  
0000133C                           338  *****************************someROL ************************************
0000133C  4FF8 7000                339  someROL    LEA     STACK,SP            ; Load the SP
00001340  41F9 00001366            340                      LEA     tableSomeROL, A0            ; Index into the table
00001346  4280                     341                      CLR.L   D0                  ; Zero it
00001348  303C 8983                342                      MOVE.W  #example,D0         ; We'll play with it here
0000134C  123C 0008                343                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001350  E360                     344                      ASL.W   D1,D0            
00001352  123C 000C                345                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001356  E268                     346                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001358                           347                                      ; and the rest are zeroed out)           
00001358  123C 0002                348                      MOVE.B  #2,D1           ; Shift 2 bits right
0000135C  E260                     349                      ASR.W   D1,D0 
0000135E                           350                      
0000135E  C0FC 0006                351                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001362  4EB0 0000                352                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001366                           353  
00001366  4EF9 00001378            354  tableSomeROL        JMP     ROLcode00   *ROL.B
0000136C  4EF9 00001384            355                      JMP     ROLcode01   *ROL.W                                      
00001372  4EF9 00001390            356                      JMP     ROLcode10   *ROL.L
00001378                           357  
00001378  4EB9 00001E02            358  ROLcode00   JSR     ISROLB
0000137E  4EB9 00002188            359              JSR     DONE
00001384  4EB9 00001E18            360  ROLcode01   JSR     ISROLW  
0000138A  4EB9 00002188            361              JSR     DONE                                 
00001390  4EB9 00001E2E            362  ROLcode10   JSR     ISROLL  
00001396  4EB9 00002188            363              JSR     DONE                    
0000139C                           364  
0000139C                           365  *****************************END someROR ************************************
0000139C                           366  
0000139C                           367  
0000139C                           368  *****************************someROR ************************************
0000139C  4FF8 7000                369  someROR     LEA     STACK,SP            ; Load the SP
000013A0  41F9 000013C6            370                      LEA     tableSomeROR, A0            ; Index into the table
000013A6  4280                     371                      CLR.L   D0                  ; Zero it
000013A8  303C 8983                372                      MOVE.W  #example,D0         ; We'll play with it here
000013AC  123C 0008                373                      MOVE.B  #8,D1           ; Shift 8 bits left 
000013B0  E360                     374                      ASL.W   D1,D0            
000013B2  123C 000C                375                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013B6  E268                     376                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013B8                           377                                      ; and the rest are zeroed out)           
000013B8  123C 0002                378                      MOVE.B  #2,D1           ; Shift 2 bits right
000013BC  E260                     379                      ASR.W   D1,D0 
000013BE                           380                      
000013BE  C0FC 0006                381                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013C2  4EB0 0000                382                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013C6                           383  
000013C6  4EF9 000013D8            384  tableSomeROR        JMP     RORcode00   *ROR.B
000013CC  4EF9 000013E4            385                      JMP     RORcode01   *ROR.W                                      
000013D2  4EF9 000013F0            386                      JMP     RORcode10   *ROR.L
000013D8                           387  
000013D8  4EB9 00001DC0            388  RORcode00   JSR     ISRORB
000013DE  4EB9 00002188            389              JSR     DONE
000013E4  4EB9 00001DD6            390  RORcode01   JSR     ISRORW  
000013EA  4EB9 00002188            391              JSR     DONE                                 
000013F0  4EB9 00001DEC            392  RORcode10   JSR     ISRORL  
000013F6  4EB9 00002188            393              JSR     DONE                    
000013FC                           394  
000013FC                           395  *****************************END someROR ************************************
000013FC                           396  
000013FC                           397  
000013FC                           398  *****************************  ROL_ROR ************************************
000013FC  4FF8 7000                399  ROL_ROR     LEA     STACK,SP            ; Load the SP
00001400  41F9 00001426            400                      LEA     tableROL_ROR, A0            ; Index into the table
00001406  4280                     401                      CLR.L   D0                  ; Zero it
00001408  303C 8983                402                      MOVE.W  #example,D0         ; We'll play with it here
0000140C  123C 0007                403                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001410  E360                     404                      ASL.W   D1,D0            
00001412  123C 000C                405                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001416  E268                     406                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001418                           407                                      ; and the rest are zeroed out)           
00001418  123C 0003                408                      MOVE.B  #3,D1           ; Shift 3 bits right
0000141C  E260                     409                      ASR.W   D1,D0 
0000141E                           410                      
0000141E  C0FC 0006                411                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001422  4EB0 0000                412                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001426                           413  
00001426  4EF9 00001432            414  tableROL_ROR            JMP    ROL_RORcode0   ; ROR
0000142C  4EF9 0000143C            415                          JMP    ROL_RORcode1   ; ROL                                 
00001432                           416  
00001432                           417    
00001432                           418  
00001432                           419  
00001432  4EB8 139C                420  ROL_RORcode0   JSR     someROR
00001436  4EB9 00002188            421                 JSR     DONE
0000143C  4EB8 133C                422  ROL_RORcode1   JSR     someROL  
00001440  4EB9 00002188            423                 JSR     DONE                                 
00001446                           424  
00001446                           425     
00001446                           426  ***************************** END ROL_ROR ************************************
00001446                           427  
00001446                           428  
00001446                           429  *****************************  LSL_LSR ************************************
00001446  4FF8 7000                430  LSL_LSR     LEA     STACK,SP            ; Load the SP
0000144A  41F9 00001470            431                      LEA     tableLSL_LSR, A0            ; Index into the table
00001450  4280                     432                      CLR.L   D0                  ; Zero it
00001452  303C 8983                433                      MOVE.W  #example,D0         ; We'll play with it here
00001456  123C 0007                434                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000145A  E360                     435                      ASL.W   D1,D0            
0000145C  123C 000C                436                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001460  E268                     437                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001462                           438                                      ; and the rest are zeroed out)           
00001462  123C 0003                439                      MOVE.B  #3,D1           ; Shift 3 bits right
00001466  E260                     440                      ASR.W   D1,D0 
00001468                           441                      
00001468  C0FC 0006                442                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000146C  4EB0 0000                443                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001470                           444  
00001470  4EF9 0000147C            445  tableLSL_LSR            JMP    LSL_LSRcode0   ; LSR
00001476  4EF9 00001486            446                          JMP    LSL_LSRcode1   ; LSL                                 
0000147C                           447  
0000147C                           448    
0000147C                           449  
0000147C                           450  
0000147C  4EB8 127C                451  LSL_LSRcode0   JSR     someLSR
00001480  4EB9 00002188            452                 JSR     DONE
00001486  4EB8 12DC                453  LSL_LSRcode1   JSR     someLSL  
0000148A  4EB9 00002188            454                 JSR     DONE                                 
00001490                           455  
00001490                           456     
00001490                           457  ***************************** END LSL_LSR ************************************
00001490                           458  
00001490                           459  
00001490                           460  *****************************  ASL_ASR ************************************
00001490  4FF8 7000                461  ASL_ASR     LEA     STACK,SP            ; Load the SP
00001494  41F9 000014BA            462                      LEA     tableASL_ASR, A0            ; Index into the table
0000149A  4280                     463                      CLR.L   D0                  ; Zero it
0000149C  303C 8983                464                      MOVE.W  #example,D0         ; We'll play with it here
000014A0  123C 0007                465                      MOVE.B  #7,D1           ; Shift 7 bits left 
000014A4  E360                     466                      ASL.W   D1,D0            
000014A6  123C 000C                467                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014AA  E268                     468                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014AC                           469                                      ; and the rest are zeroed out)           
000014AC  123C 0003                470                      MOVE.B  #3,D1           ; Shift 3 bits right
000014B0  E260                     471                      ASR.W   D1,D0 
000014B2                           472                      
000014B2  C0FC 0006                473                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014B6  4EB0 0000                474                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000014BA                           475  
000014BA  4EF9 000014C6            476  tableASL_ASR            JMP    ASL_ASRcode0   ; ASR
000014C0  4EF9 000014D0            477                          JMP    ASL_ASRcode1   ; ASL                                  
000014C6                           478  
000014C6                           479    
000014C6                           480  
000014C6                           481  
000014C6  4EB8 11BC                482  ASL_ASRcode0   JSR     someASR
000014CA  4EB9 00002188            483                 JSR     DONE
000014D0  4EB8 121C                484  ASL_ASRcode1   JSR     someASL 
000014D4  4EB9 00002188            485                 JSR     DONE                                 
000014DA                           486  
000014DA                           487     
000014DA                           488  ***************************** END ASL_ASR ************************************
000014DA                           489  
000014DA                           490  
000014DA                           491  *****************************  ROd_LSd_ASd ************************************
000014DA  4FF8 7000                492  ROd_LSd_ASd     LEA     STACK,SP            ; Load the SP
000014DE  41F9 00001504            493                      LEA     tableROd_LSd_ASd, A0            ; Index into the table
000014E4  4280                     494                      CLR.L   D0                  ; Zero it
000014E6  303C 8983                495                      MOVE.W  #example,D0         ; We'll play with it here
000014EA  123C 000B                496                      MOVE.B  #11,D1           ; Shift 11 bits left 
000014EE  E360                     497                      ASL.W   D1,D0            
000014F0  123C 000C                498                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014F4  E268                     499                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014F6                           500                                      ; and the rest are zeroed out)           
000014F6  123C 0002                501                      MOVE.B  #2,D1           ; Shift 2 bits right
000014FA  E260                     502                      ASR.W   D1,D0 
000014FC                           503                      
000014FC  C0FC 0006                504                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001500  4EB0 0000                505                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001504                           506  
00001504  4EF9 0000151C            507  tableROd_LSd_ASd        JMP    ROd_LSd_ASdcode00   ; ASL_ASR
0000150A  4EF9 00001526            508                          JMP    ROd_LSd_ASdcode01   ; LSL_LSR                                     
00001510  4EF9 00001530            509                          JMP    ROd_LSd_ASdcode10   
00001516  4EF9 00001534            510                          JMP    ROd_LSd_ASdcode11   ; ROL_ROR
0000151C                           511    
0000151C                           512  
0000151C                           513  
0000151C  4EB8 1490                514  ROd_LSd_ASdcode00   JSR     ASL_ASR
00001520  4EB9 00002188            515                      JSR     DONE
00001526  4EB8 1446                516  ROd_LSd_ASdcode01   JSR     LSL_LSR   
0000152A  4EB9 00002188            517                      JSR     DONE                                 
00001530  4E72 2700                518  ROd_LSd_ASdcode10   STOP    #$2700     
00001534  4EB8 13FC                519  ROd_LSd_ASdcode11   JSR     ROL_ROR
00001538  4EB9 00002188            520                      JSR     DONE 
0000153E                           521     
0000153E                           522  ***************************** END  ROd_LSd_ASd ************************************
0000153E                           523  
0000153E                           524  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
0000153E  4FF8 7000                525  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
00001542  41F9 00001568            526                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
00001548  4280                     527                      CLR.L   D0                  ; Zero it
0000154A  303C 8983                528                      MOVE.W  #example,D0         ; We'll play with it here
0000154E  123C 0007                529                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001552  E360                     530                      ASL.W   D1,D0            
00001554  123C 000C                531                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001558  E268                     532                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000155A                           533                                      ; and the rest are zeroed out)           
0000155A  123C 0001                534                      MOVE.B  #1,D1           ; Shift 1 bits right
0000155E  E260                     535                      ASR.W   D1,D0 
00001560                           536                      
00001560  C0FC 0006                537                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001564  4EB0 0000                538                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001568                           539  
00001568  4EF9 00001598            540  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
0000156E  4EF9 000015A4            541                                          JMP    ANDcode001   ; AND.W                                     
00001574  4EF9 000015B0            542                                          JMP    ANDcode010   ; AND.L
0000157A                           543                                   
0000157A  4EF9 000015BC            544                                          JMP    ANDcode011   
00001580  4EF9 000015C0            545                                          JMP    ANDcode100   ; AND.B
00001586  4EF9 000015CC            546                                          JMP    ANDcode101   ; AND.W 
0000158C  4EF9 000015D8            547                                          JMP    ANDcode110   ; AND.L
00001592  4EF9 000015E4            548                                          JMP    ANDcode111   ; MULS.W
00001598                           549  
00001598                           550  
00001598  4EB9 00001E70            551  ANDcode000   JSR     ISANDB
0000159E  4EB9 00002188            552               JSR     DONE
000015A4  4EB9 00001E86            553  ANDcode001   JSR     ISANDW  
000015AA  4EB9 00002188            554               JSR     DONE                                 
000015B0  4EB9 00001E9C            555  ANDcode010   JSR     ISANDL 
000015B6  4EB9 00002188            556               JSR     DONE  
000015BC  4E72 2700                557  ANDcode011   STOP  #$2700
000015C0  4EB9 00001E70            558  ANDcode100   JSR     ISANDB
000015C6  4EB9 00002188            559               JSR     DONE
000015CC  4EB9 00001E86            560  ANDcode101   JSR     ISANDW  
000015D2  4EB9 00002188            561               JSR     DONE                                 
000015D8  4EB9 00001E9C            562  ANDcode110   JSR     ISANDL 
000015DE  4EB9 00002188            563               JSR     DONE 
000015E4  4EB9 00001E5A            564  ANDcode111   JSR     ISMULSW
000015EA  4EB9 00002188            565               JSR     DONE
000015F0                           566     
000015F0                           567  ***************************** END  ADD_BorADD_WorADD_L ************************************
000015F0                           568  
000015F0                           569  *****************************  ADD_BorADD_WorADD_L ************************************
000015F0  4FF8 7000                570  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
000015F4  41F9 0000161A            571                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
000015FA  4280                     572                      CLR.L   D0                  ; Zero it
000015FC  303C 8983                573                      MOVE.W  #example,D0         ; We'll play with it here
00001600  123C 0007                574                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001604  E360                     575                      ASL.W   D1,D0            
00001606  123C 000C                576                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000160A  E268                     577                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000160C                           578                                      ; and the rest are zeroed out)           
0000160C  123C 0001                579                      MOVE.B  #1,D1           ; Shift 1 bits right
00001610  E260                     580                      ASR.W   D1,D0 
00001612                           581                      
00001612  C0FC 0006                582                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001616  4EB0 0000                583                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000161A                           584  
0000161A  4EF9 0000164A            585  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
00001620  4EF9 00001656            586                                   JMP    ADDcode001   *ADD.W                                      
00001626  4EF9 00001662            587                                   JMP    ADDcode010   *ADD.L
0000162C                           588                                   
0000162C  4EF9 0000166E            589                                   JMP    ADDcode011   *ADDA.W
00001632  4EF9 0000167A            590                                   JMP    ADDcode100   *ADD.B
00001638  4EF9 00001686            591                                   JMP    ADDcode101   *ADD.W 
0000163E  4EF9 00001692            592                                   JMP    ADDcode110   *ADD.L
00001644  4EF9 0000169E            593                                   JMP    ADDcode111   *ADDA.L
0000164A                           594  
0000164A                           595  
0000164A  4EB9 00001EDE            596  ADDcode000   JSR     ISADDB
00001650  4EB9 00002188            597               JSR     DONE
00001656  4EB9 00001EF4            598  ADDcode001   JSR     ISADDW  
0000165C  4EB9 00002188            599               JSR     DONE                                 
00001662  4EB9 00001F0A            600  ADDcode010   JSR     ISADDL 
00001668  4EB9 00002188            601               JSR     DONE  
0000166E  4EB9 00001EB2            602  ADDcode011   JSR     ISADDAW
00001674  4EB9 00002188            603               JSR     DONE
0000167A  4EB9 00001EDE            604  ADDcode100   JSR     ISADDB
00001680  4EB9 00002188            605               JSR     DONE
00001686  4EB9 00001EF4            606  ADDcode101   JSR     ISADDW  
0000168C  4EB9 00002188            607               JSR     DONE                                 
00001692  4EB9 00001F0A            608  ADDcode110   JSR     ISADDL 
00001698  4EB9 00002188            609               JSR     DONE 
0000169E  4EB9 00001EC8            610  ADDcode111   JSR     ISADDAL
000016A4  4EB9 00002188            611               JSR     DONE
000016AA                           612     
000016AA                           613  ***************************** END  ADD_BorADD_WorADD_L ************************************
000016AA                           614  
000016AA                           615  *****************************  SUB_BorSUB_WorSUB_L ************************************
000016AA  4FF8 7000                616  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
000016AE  41F9 000016D4            617                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
000016B4  4280                     618                      CLR.L   D0                  ; Zero it
000016B6  303C 8983                619                      MOVE.W  #example,D0         ; We'll play with it here
000016BA  123C 0007                620                      MOVE.B  #7,D1           ; Shift 7 bits left 
000016BE  E360                     621                      ASL.W   D1,D0            
000016C0  123C 000C                622                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000016C4  E268                     623                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000016C6                           624                                      ; and the rest are zeroed out)           
000016C6  123C 0001                625                      MOVE.B  #1,D1           ; Shift 1 bits right
000016CA  E260                     626                      ASR.W   D1,D0 
000016CC                           627                      
000016CC  C0FC 0006                628                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016D0  4EB0 0000                629                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000016D4                           630  
000016D4  4EF9 000016FE            631  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
000016DA  4EF9 0000170A            632                                   JMP    SUBcode001   *SUB.W                                      
000016E0  4EF9 00001716            633                                   JMP    SUBcode010   *SUB.L
000016E6                           634                                   
000016E6  4EF9 00001722            635                                   JMP    SUBcode011   
000016EC  4EF9 00001726            636                                   JMP    SUBcode100   *SUB.B
000016F2  4EF9 00001732            637                                   JMP    SUBcode101   *SUB.W 
000016F8  4EF9 0000173E            638                                   JMP    SUBcode110   *SUB.L
000016FE                           639     
000016FE                           640  
000016FE                           641  
000016FE  4EB9 00001F20            642  SUBcode000   JSR     ISSUBB
00001704  4EB9 00002188            643               JSR     DONE
0000170A  4EB9 00001F36            644  SUBcode001   JSR     ISSUBW  
00001710  4EB9 00002188            645               JSR     DONE                                 
00001716  4EB9 00001F4C            646  SUBcode010   JSR     ISSUBL 
0000171C  4EB9 00002188            647               JSR     DONE  
00001722  4E72 2700                648  SUBcode011   STOP  #$2700 
00001726  4EB9 00001F20            649  SUBcode100   JSR     ISSUBB
0000172C  4EB9 00002188            650               JSR     DONE
00001732  4EB9 00001F36            651  SUBcode101   JSR     ISSUBW  
00001738  4EB9 00002188            652               JSR     DONE                                 
0000173E  4EB9 00001F4C            653  SUBcode110   JSR     ISSUBL 
00001744  4EB9 00002188            654               JSR     DONE 
0000174A                           655     
0000174A                           656  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
0000174A                           657  
0000174A                           658  
0000174A                           659  ***************************** CMP_BorCMP_WorCMP_L ************************************
0000174A  4FF8 7000                660  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
0000174E  41F9 00001774            661                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
00001754  4280                     662                      CLR.L   D0                  ; Zero it
00001756  303C 8983                663                      MOVE.W  #example,D0         ; We'll play with it here
0000175A  123C 0007                664                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000175E  E360                     665                      ASL.W   D1,D0            
00001760  123C 000C                666                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001764  E268                     667                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001766                           668                                      ; and the rest are zeroed out)           
00001766  123C 0001                669                      MOVE.B  #1,D1           ; Shift 1 bits right
0000176A  E260                     670                      ASR.W   D1,D0 
0000176C                           671                      
0000176C  C0FC 0006                672                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001770  4EB0 0000                673                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001774                           674  
00001774  4EF9 00001786            675  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
0000177A  4EF9 00001792            676                                   JMP    CMPcode001   *CMP.W                                      
00001780  4EF9 0000179E            677                                   JMP    CMPcode010   *CMP.L
00001786                           678  
00001786  4EB9 00001F62            679  CMPcode000   JSR     ISCMPB
0000178C  4EB9 00002188            680              JSR     DONE
00001792  4EB9 00001F78            681  CMPcode001   JSR     ISCMPW  
00001798  4EB9 00002188            682              JSR     DONE                                 
0000179E  4EB9 00001F8E            683  CMPcode010   JSR     ISCMPL 
000017A4  4EB9 00002188            684              JSR     DONE                    
000017AA                           685  
000017AA                           686  ***************************** END CMP_BorCMP_WorCMP_L ************************************
000017AA                           687  
000017AA                           688  
000017AA                           689  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
000017AA  4FF8 7000                690  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
000017AE  41F9 000017D4            691                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
000017B4  4280                     692                      CLR.L   D0                  ; Zero it
000017B6  303C 8983                693                      MOVE.W  #example,D0         ; We'll play with it here
000017BA  123C 0008                694                      MOVE.B  #8,D1           ; Shift 8 bits left 
000017BE  E360                     695                      ASL.W   D1,D0            
000017C0  123C 000C                696                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000017C4  E268                     697                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000017C6                           698                                      ; and the rest are zeroed out)           
000017C6  123C 0002                699                      MOVE.B  #2,D1           ; Shift 2 bits right
000017CA  E260                     700                      ASR.W   D1,D0 
000017CC                           701                      
000017CC  C0FC 0006                702                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000017D0  4EB0 0000                703                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000017D4                           704  
000017D4  4EF9 000017E6            705  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
000017DA  4EF9 000017F2            706                                      JMP     ADDQcode01   *ADDQ.W                                      
000017E0  4EF9 000017FE            707                                      JMP     ADDQcode10   *ADDQ.L
000017E6                           708  
000017E6  4EB9 00001FA4            709  ADDQcode00   JSR     ISADDQB
000017EC  4EB9 00002188            710              JSR     DONE
000017F2  4EB9 00001FBA            711  ADDQcode01   JSR     ISADDQW  
000017F8  4EB9 00002188            712              JSR     DONE                                 
000017FE  4EB9 00001FD0            713  ADDQcode10   JSR     ISADDQL 
00001804  4EB9 00002188            714              JSR     DONE                    
0000180A                           715  
0000180A                           716  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
0000180A                           717  
0000180A                           718  
0000180A                           719  *****************************someCLR ************************************
0000180A  4FF8 7000                720  someCLR     LEA     STACK,SP            ; Load the SP
0000180E  41F9 00001834            721                      LEA     tableSomeCLR, A0            ; Index into the table
00001814  4280                     722                      CLR.L   D0                  ; Zero it
00001816  303C 8983                723                      MOVE.W  #example,D0         ; We'll play with it here
0000181A  123C 0008                724                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000181E  E360                     725                      ASL.W   D1,D0            
00001820  123C 000C                726                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001824  E268                     727                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001826                           728                                      ; and the rest are zeroed out)           
00001826  123C 0002                729                      MOVE.B  #2,D1           ; Shift 2 bits right
0000182A  E260                     730                      ASR.W   D1,D0 
0000182C                           731                      
0000182C  C0FC 0006                732                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001830  4EB0 0000                733                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001834                           734  
00001834  4EF9 00001846            735  tableSomeCLR        JMP     CLRcode00   *CLR.B
0000183A  4EF9 00001852            736                      JMP     CLRcode01   *CLR.W                                      
00001840  4EF9 0000185E            737                      JMP     CLRcode10   *CLR.L
00001846                           738  
00001846  4EB9 00001FFC            739  CLRcode00   JSR     ISCLRB
0000184C  4EB9 00002188            740              JSR     DONE
00001852  4EB9 00002012            741  CLRcode01   JSR     ISCLRW  
00001858  4EB9 00002188            742              JSR     DONE                                 
0000185E  4EB9 00002028            743  CLRcode10   JSR     ISCLRL  
00001864  4EB9 00002188            744              JSR     DONE                    
0000186A                           745  
0000186A                           746  *****************************END someCLR ************************************
0000186A                           747  
0000186A                           748  *****************************NOPorCLRorRTSorJSR ************************************
0000186A  4FF8 7000                749  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
0000186E  41F9 000018A2            750                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
00001874  4280                     751                      CLR.L   D0                  ; Zero it
00001876  303C 8983                752                      MOVE.W  #example,D0         ; We'll play with it here
0000187A                           753                      
0000187A  323C 4E71                754                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
0000187E  B240                     755                      CMP.W   D0, D1
00001880  6700 008C                756                      BEQ     NOPcommand
00001884                           757   
00001884  323C 4E75                758                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
00001888  B240                     759                      CMP.W   D0, D1
0000188A  6700 0076                760                      BEQ     RTScommand
0000188E                           761    
0000188E  123C 0004                762                      MOVE.B  #4,D1           ; Shift 4 bits left 
00001892  E360                     763                      ASL.W   D1,D0            
00001894  123C 000C                764                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001898  E268                     765                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000189A                           766                                      ; and the rest are zeroed out)           
0000189A                           767    
0000189A                           768                      
0000189A  C0FC 0006                769                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000189E  4EB0 0000                770                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000018A2                           771  
000018A2  4EF9 0000191A            772  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
000018A8  4EF9 0000191E            773                             JMP     JSRorCLRcode0001
000018AE  4EF9 00001922            774                             JMP     JSRorCLRcode0010   
000018B4  4EF9 0000192C            775                             JMP     JSRorCLRcode0011
000018BA  4EF9 00001930            776                             JMP     JSRorCLRcode0100
000018C0  4EF9 00001934            777                             JMP     JSRorCLRcode0101
000018C6  4EF9 00001938            778                             JMP     JSRorCLRcode0110
000018CC  4EF9 0000193C            779                             JMP     JSRorCLRcode0111
000018D2  4EF9 00001940            780                             JMP     JSRorCLRcode1000
000018D8  4EF9 00001944            781                             JMP     JSRorCLRcode1001
000018DE  4EF9 00001948            782                             JMP     JSRorCLRcode1010
000018E4  4EF9 0000194C            783                             JMP     JSRorCLRcode1011
000018EA  4EF9 00001950            784                             JMP     JSRorCLRcode1100
000018F0  4EF9 00001954            785                             JMP     JSRorCLRcode1101
000018F6  4EF9 00001958            786                             JMP     JSRorCLRcode1110
000018FC  4EF9 00001964            787                             JMP     JSRorCLRcode1111
00001902                           788  
00001902  4EB9 00002096            789  RTScommand          JSR     ISRTS
00001908  4EB9 00002188            790                      JSR     DONE
0000190E  4EB9 000020C2            791  NOPcommand          JSR     ISNOP 
00001914  4EB9 00002188            792                      JSR     DONE                                                                  
0000191A  4E72 2700                793  JSRorCLRcode0000     STOP  #$2700
0000191E  4E72 2700                794  JSRorCLRcode0001     STOP  #$2700
00001922  4EB8 180A                795  JSRorCLRcode0010    JSR      someCLR
00001926  4EB9 00002188            796                      JSR     DONE
0000192C  4E72 2700                797  JSRorCLRcode0011     STOP  #$2700
00001930  4E72 2700                798  JSRorCLRcode0100     STOP  #$2700
00001934  4E72 2700                799  JSRorCLRcode0101     STOP  #$2700
00001938  4E72 2700                800  JSRorCLRcode0110     STOP  #$2700
0000193C  4E72 2700                801  JSRorCLRcode0111     STOP  #$2700
00001940  4E72 2700                802  JSRorCLRcode1000     STOP  #$2700
00001944  4E72 2700                803  JSRorCLRcode1001     STOP  #$2700
00001948  4E72 2700                804  JSRorCLRcode1010     STOP  #$2700
0000194C  4E72 2700                805  JSRorCLRcode1011     STOP  #$2700
00001950  4E72 2700                806  JSRorCLRcode1100     STOP  #$2700
00001954  4E72 2700                807  JSRorCLRcode1101     STOP  #$2700
00001958  4EB9 00002080            808  JSRorCLRcode1110    JSR     ISJSR
0000195E  4EB9 00002188            809                      JSR     DONE
00001964  4E72 2700                810  JSRorCLRcode1111     STOP  #$2700
00001968                           811  
00001968                           812  *****************************END NOPorCLRorRTSorJSR ************************************
00001968                           813  
00001968                           814  
00001968                           815  *****************************someMOVEM ************************************
00001968  4FF8 7000                816  someMOVEM     LEA     STACK,SP            ; Load the SP
0000196C  41F9 00001992            817                      LEA     tableSomeMOVEM, A0            ; Index into the table
00001972  4280                     818                      CLR.L   D0                  ; Zero it
00001974  303C 8983                819                      MOVE.W  #example,D0         ; We'll play with it here
00001978  123C 0009                820                      MOVE.B  #9,D1           ; Shift 9 bits left 
0000197C  E360                     821                      ASL.W   D1,D0            
0000197E  123C 000C                822                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001982  E268                     823                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001984                           824                                      ; and the rest are zeroed out)           
00001984  123C 0003                825                      MOVE.B  #3,D1           ; Shift 3 bits right
00001988  E260                     826                      ASR.W   D1,D0  
0000198A                           827                      
0000198A  C0FC 0006                828                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000198E  4EB0 0000                829                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001992                           830  
00001992  4EF9 0000199E            831  tableSomeMOVEM    JMP     MOVEMcode0   ;MOVEM.W
00001998  4EF9 000019AA            832                    JMP     MOVEMcode1   ;MOVEM.L                                      
0000199E                           833                        
0000199E                           834  
0000199E                           835                            
0000199E  4EB9 00002054            836  MOVEMcode0         JSR     ISMOVEMW
000019A4  4EB9 00002188            837                      JSR     DONE
000019AA  4EB9 0000203E            838  MOVEMcode1         JSR     ISMOVEML
000019B0  4EB9 00002188            839                      JSR     DONE
000019B6                           840  
000019B6                           841  *****************************END someMOVEM ************************************
000019B6                           842  
000019B6                           843  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000019B6  4FF8 7000                844  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
000019BA  41F9 000019E0            845                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
000019C0  4280                     846                      CLR.L   D0                  ; Zero it
000019C2  303C 8983                847                      MOVE.W  #example,D0         ; We'll play with it here
000019C6  123C 0007                848                      MOVE.B  #7,D1           ; Shift 7 bits right 
000019CA  E260                     849                      ASR.W   D1,D0 
000019CC                           850  
000019CC  123C 000D                851                      MOVE.B  #13,D1           ; Shift 13 bits left 
000019D0  E360                     852                      ASL.W   D1,D0            
000019D2  123C 000C                853                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000019D6  E268                     854                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000019D8                           855                                      ; and the rest are zeroed out)         
000019D8                           856    
000019D8                           857                      
000019D8  C0FC 0006                858                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000019DC  4EB0 0000                859                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000019E0                           860  
000019E0  4EF9 00001A3A            861  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
000019E6  4EF9 00001A40            862                                    JMP     LOTScode0001
000019EC  4EF9 00001A44            863                                    JMP     LOTScode0010
000019F2  4EF9 00001A4E            864                                    JMP     LOTScode0011
000019F8  4EF9 00001A52            865                                    JMP     LOTScode0100
000019FE  4EF9 00001A56            866                                    JMP     LOTScode0101
00001A04  4EF9 00001A5A            867                                    JMP     LOTScode0110
00001A0A  4EF9 00001A66            868                                    JMP     LOTScode0111
00001A10  4EF9 00001A6A            869                                    JMP     LOTScode1000
00001A16  4EF9 00001A74            870                                    JMP     LOTScode1001
00001A1C  4EF9 00001A78            871                                    JMP     LOTScode1010
00001A22  4EF9 00001A82            872                                    JMP     LOTScode1011
00001A28  4EF9 00001A86            873                                    JMP     LOTScode1100
00001A2E  4EF9 00001A8A            874                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001A34  4EF9 00001A9A            875                                    JMP     LOTScode1111                           
00001A3A                           876                        
00001A3A                           877  
00001A3A                           878                            
00001A3A  4EB9 00001E44            879  LOTScode0000        JSR   ISMULSL
00001A40  4E72 2700                880  LOTScode0001        STOP  #$2700
00001A44  4EB8 1968                881  LOTScode0010        JSR    someMOVEM
00001A48  4EB9 00002188            882                      JSR    DONE
00001A4E  4E72 2700                883  LOTScode0011        STOP  #$2700                   
00001A52  4E72 2700                884  LOTScode0100        STOP  #$2700
00001A56  4E72 2700                885  LOTScode0101        STOP  #$2700
00001A5A  4EB9 0000206A            886  LOTScode0110        JSR    ISLEA  
00001A60  4EB9 00002188            887                      JSR    DONE 
00001A66  4E72 2700                888  LOTScode0111        STOP  #$2700 
00001A6A  4EB8 186A                889  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001A6E  4EB9 00002188            890                      JSR    DONE
00001A74  4E72 2700                891  LOTScode1001        STOP  #$2700               
00001A78  4EB8 186A                892  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001A7C  4EB9 00002188            893                      JSR    DONE
00001A82  4E72 2700                894  LOTScode1011        STOP  #$2700                   
00001A86  4E72 2700                895  LOTScode1100        STOP  #$2700
00001A8A  4E72 2700                896  LOTScode1101        STOP  #$2700
00001A8E  4EB9 0000206A            897  LOTScode1110        JSR    ISLEA 
00001A94  4EB9 00002188            898                      JSR    DONE
00001A9A  4E72 2700                899  LOTScode1111        STOP  #$2700                
00001A9E                           900                     
00001A9E                           901  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001A9E                           902  
00001A9E                           903  
00001A9E                           904  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001A9E  4FF8 7000                905  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001AA2  41F9 00001AC2            906                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001AA8  4280                     907                      CLR.L   D0                  ; Zero it
00001AAA  303C 8983                908                      MOVE.W  #example,D0         ; We'll play with it here
00001AAE  123C 0007                909                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001AB2  E360                     910                      ASL.W   D1,D0            
00001AB4  123C 000D                911                      MOVE.B  #13,D1           
00001AB8  E260                     912                      ASR.W   D1,D0             
00001ABA                           913    
00001ABA                           914                      
00001ABA  C0FC 0006                915                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001ABE  4EB0 0000                916                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001AC2                           917  
00001AC2  4EF9 00001AD4            918  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001AC8  4EF9 00001AE0            919                                 JMP     ADDIWcode01
00001ACE  4EF9 00001AEC            920                                 JMP     ADDILcode10
00001AD4                           921  
00001AD4                           922                            
00001AD4  4EB9 00002172            923  ADDIBcode00        JSR     ISADDIB
00001ADA  4EB9 00002188            924                      JSR    DONE
00001AE0  4EB9 00002146            925  ADDIWcode01        JSR     ISADDIW
00001AE6  4EB9 00002188            926                      JSR    DONE
00001AEC  4EB9 0000215C            927  ADDILcode10        JSR     ISADDIL
00001AF2  4EB9 00002188            928                      JSR    DONE
00001AF8                           929  
00001AF8                           930  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001AF8                           931  
00001AF8                           932  
00001AF8                           933  
00001AF8                           934  
00001AF8                           935  *****************************MOVEA_LorMOVE_L ************************************
00001AF8  4FF8 7000                936  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001AFC  41F9 00001B1C            937                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001B02  4280                     938                      CLR.L   D0                  ; Zero it
00001B04  303C 8983                939                      MOVE.W  #example,D0         ; We'll play with it here
00001B08  123C 0007                940                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001B0C  E360                     941                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001B0E  123C 000D                942                      MOVE.B  #13,D1           ; Shift 13 bits right
00001B12  E260                     943                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001B14                           944    
00001B14                           945                      
00001B14  C0FC 0006                946                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B18  4EB0 0000                947                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001B1C                           948  
00001B1C  4EF9 00001B4C            949  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001B22  4EF9 00001B58            950                          JMP     MOVEAcode001
00001B28  4EF9 00001B64            951                          JMP     MOVEcode010
00001B2E  4EF9 00001B70            952                          JMP     MOVEcode011
00001B34  4EF9 00001B7C            953                          JMP     MOVEcode100
00001B3A  4EF9 00001B88            954                          JMP     MOVEcode101
00001B40  4EF9 00001B94            955                          JMP     MOVEcode110
00001B46  4EF9 00001BA0            956                          JMP     MOVEcode111
00001B4C                           957                            
00001B4C  4EB9 00002104            958  MOVEcode000     JSR     ISMOVEL
00001B52  4EB9 00002188            959                  JSR    DONE
00001B58  4EB9 0000211A            960  MOVEAcode001    JSR     ISMOVEAL
00001B5E  4EB9 00002188            961                  JSR    DONE
00001B64  4EB9 00002104            962  MOVEcode010     JSR     ISMOVEL
00001B6A  4EB9 00002188            963                  JSR    DONE
00001B70  4EB9 00002104            964  MOVEcode011     JSR     ISMOVEL
00001B76  4EB9 00002188            965                  JSR    DONE
00001B7C  4EB9 00002104            966  MOVEcode100     JSR     ISMOVEL
00001B82  4EB9 00002188            967                  JSR    DONE
00001B88  4EB9 00002104            968  MOVEcode101     JSR     ISMOVEL
00001B8E  4EB9 00002188            969                  JSR    DONE
00001B94  4EB9 00002104            970  MOVEcode110     JSR     ISMOVEL
00001B9A  4EB9 00002188            971                  JSR    DONE
00001BA0  4EB9 00002104            972  MOVEcode111     JSR     ISMOVEL 
00001BA6  4EB9 00002188            973                  JSR    DONE
00001BAC                           974  *****************************END MOVEA_LorMOVE_L ************************************
00001BAC                           975  
00001BAC                           976  *****************************MOVEA_WorMOVE_W ************************************
00001BAC  4FF8 7000                977  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001BB0  41F9 00001BD0            978                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001BB6  4280                     979                      CLR.L   D0                  ; Zero it
00001BB8  303C 8983                980                      MOVE.W  #example,D0         ; We'll play with it here
00001BBC  123C 0007                981                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001BC0  E360                     982                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001BC2  123C 000D                983                      MOVE.B  #13,D1           ; Shift 13 bits right
00001BC6  E260                     984                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001BC8                           985    
00001BC8                           986                      
00001BC8  C0FC 0006                987                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001BCC  4EB0 0000                988                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001BD0                           989  
00001BD0  4EF9 00001C00            990  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001BD6  4EF9 00001C0C            991                          JMP     MOVEAWcode001
00001BDC  4EF9 00001C18            992                          JMP     MOVEWcode010
00001BE2  4EF9 00001C24            993                          JMP     MOVEWcode011
00001BE8  4EF9 00001C30            994                          JMP     MOVEWcode100
00001BEE  4EF9 00001C3C            995                          JMP     MOVEWcode101
00001BF4  4EF9 00001C48            996                          JMP     MOVEWcode110
00001BFA  4EF9 00001C54            997                          JMP     MOVEWcode111
00001C00                           998                            
00001C00  4EB9 000020D8            999  MOVEWcode000     JSR     ISMOVEW
00001C06  4EB9 00002188           1000                  JSR    DONE
00001C0C  4EB9 000020EE           1001  MOVEAWcode001    JSR     ISMOVEAW
00001C12  4EB9 00002188           1002                  JSR    DONE
00001C18  4EB9 000020D8           1003  MOVEWcode010     JSR     ISMOVEW
00001C1E  4EB9 00002188           1004                  JSR    DONE
00001C24  4EB9 000020D8           1005  MOVEWcode011     JSR     ISMOVEW
00001C2A  4EB9 00002188           1006                  JSR    DONE
00001C30  4EB9 000020D8           1007  MOVEWcode100     JSR     ISMOVEW
00001C36  4EB9 00002188           1008                  JSR    DONE
00001C3C  4EB9 000020D8           1009  MOVEWcode101     JSR     ISMOVEW
00001C42  4EB9 00002188           1010                  JSR    DONE
00001C48  4EB9 000020D8           1011  MOVEWcode110     JSR     ISMOVEW
00001C4E  4EB9 00002188           1012                  JSR    DONE
00001C54  4EB9 000020D8           1013  MOVEWcode111     JSR     ISMOVEW 
00001C5A  4EB9 00002188           1014                  JSR    DONE
00001C60                          1015  *****************************END MOVEA_WorMOVE_W ************************************
00001C60  48A7 FFFF               1016  ISDIVU  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C64  43F9 00002370           1017              LEA MESSAGEDIVU, A1         
00001C6A  103C 000E               1018              MOVE.B  #14, D0
00001C6E  4E4F                    1019              TRAP    #15
00001C70                          1020     
00001C70  4C9F FFFF               1021              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C74  4E75                    1022              RTS
00001C76                          1023  
00001C76  48A7 FFFF               1024  ISORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C7A  43F9 0000235B           1025              LEA MESSAGEORB, A1         
00001C80  103C 000E               1026              MOVE.B  #14, D0
00001C84  4E4F                    1027              TRAP    #15
00001C86                          1028     
00001C86  4C9F FFFF               1029              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C8A  4E75                    1030              RTS
00001C8C                          1031  
00001C8C  48A7 FFFF               1032  ISORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C90  43F9 00002362           1033              LEA MESSAGEORW, A1         
00001C96  103C 000E               1034              MOVE.B  #14, D0
00001C9A  4E4F                    1035              TRAP    #15
00001C9C                          1036     
00001C9C  4C9F FFFF               1037              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CA0  4E75                    1038              RTS
00001CA2                          1039              
00001CA2  48A7 FFFF               1040  ISORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CA6  43F9 00002369           1041              LEA MESSAGEORL, A1         
00001CAC  103C 000E               1042              MOVE.B  #14, D0
00001CB0  4E4F                    1043              TRAP    #15
00001CB2                          1044     
00001CB2  4C9F FFFF               1045              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CB6  4E75                    1046              RTS 
00001CB8                          1047  
00001CB8  48A7 FFFF               1048  ISASRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CBC  43F9 000022CB           1049              LEA MESSAGEASRB, A1         
00001CC2  103C 000E               1050              MOVE.B  #14, D0
00001CC6  4E4F                    1051              TRAP    #15
00001CC8                          1052     
00001CC8  4C9F FFFF               1053              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CCC  4E75                    1054              RTS
00001CCE                          1055  
00001CCE  48A7 FFFF               1056  ISASRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CD2  43F9 000022D3           1057              LEA MESSAGEASRW, A1         
00001CD8  103C 000E               1058              MOVE.B  #14, D0
00001CDC  4E4F                    1059              TRAP    #15
00001CDE                          1060     
00001CDE  4C9F FFFF               1061              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CE2  4E75                    1062              RTS
00001CE4                          1063              
00001CE4  48A7 FFFF               1064  ISASRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CE8  43F9 000022DB           1065              LEA MESSAGEASRL, A1         
00001CEE  103C 000E               1066              MOVE.B  #14, D0
00001CF2  4E4F                    1067              TRAP    #15
00001CF4                          1068     
00001CF4  4C9F FFFF               1069              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CF8  4E75                    1070              RTS 
00001CFA                          1071  
00001CFA  48A7 FFFF               1072  ISASLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CFE  43F9 000022E3           1073              LEA MESSAGEASLB, A1         
00001D04  103C 000E               1074              MOVE.B  #14, D0
00001D08  4E4F                    1075              TRAP    #15
00001D0A                          1076     
00001D0A  4C9F FFFF               1077              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D0E  4E75                    1078              RTS
00001D10                          1079  
00001D10  48A7 FFFF               1080  ISASLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D14  43F9 000022EB           1081              LEA MESSAGEASLW, A1         
00001D1A  103C 000E               1082              MOVE.B  #14, D0
00001D1E  4E4F                    1083              TRAP    #15
00001D20                          1084     
00001D20  4C9F FFFF               1085              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D24  4E75                    1086              RTS
00001D26                          1087              
00001D26  48A7 FFFF               1088  ISASLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D2A  43F9 000022F3           1089              LEA MESSAGEASLL, A1         
00001D30  103C 000E               1090              MOVE.B  #14, D0
00001D34  4E4F                    1091              TRAP    #15
00001D36                          1092     
00001D36  4C9F FFFF               1093              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D3A  4E75                    1094              RTS 
00001D3C                          1095              
00001D3C  48A7 FFFF               1096  ISLSRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D40  43F9 0000232B           1097              LEA MESSAGELSRB, A1         
00001D46  103C 000E               1098              MOVE.B  #14, D0
00001D4A  4E4F                    1099              TRAP    #15
00001D4C                          1100     
00001D4C  4C9F FFFF               1101              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D50  4E75                    1102              RTS
00001D52                          1103  
00001D52  48A7 FFFF               1104  ISLSRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D56  43F9 00002333           1105              LEA MESSAGELSRW, A1         
00001D5C  103C 000E               1106              MOVE.B  #14, D0
00001D60  4E4F                    1107              TRAP    #15
00001D62                          1108     
00001D62  4C9F FFFF               1109              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D66  4E75                    1110              RTS
00001D68                          1111              
00001D68  48A7 FFFF               1112  ISLSRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D6C  43F9 0000233B           1113              LEA MESSAGELSRL, A1         
00001D72  103C 000E               1114              MOVE.B  #14, D0
00001D76  4E4F                    1115              TRAP    #15
00001D78                          1116     
00001D78  4C9F FFFF               1117              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D7C  4E75                    1118              RTS 
00001D7E                          1119  
00001D7E  48A7 FFFF               1120  ISLSLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D82  43F9 00002343           1121              LEA MESSAGELSLB, A1         
00001D88  103C 000E               1122              MOVE.B  #14, D0
00001D8C  4E4F                    1123              TRAP    #15
00001D8E                          1124     
00001D8E  4C9F FFFF               1125              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D92  4E75                    1126              RTS
00001D94                          1127  
00001D94  48A7 FFFF               1128  ISLSLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D98  43F9 0000234B           1129              LEA MESSAGELSLW, A1        
00001D9E  103C 000E               1130              MOVE.B  #14, D0
00001DA2  4E4F                    1131              TRAP    #15
00001DA4                          1132     
00001DA4  4C9F FFFF               1133              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DA8  4E75                    1134              RTS
00001DAA                          1135              
00001DAA  48A7 FFFF               1136  ISLSLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DAE  43F9 00002353           1137              LEA MESSAGELSLL, A1         
00001DB4  103C 000E               1138              MOVE.B  #14, D0
00001DB8  4E4F                    1139              TRAP    #15
00001DBA                          1140     
00001DBA  4C9F FFFF               1141              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DBE  4E75                    1142              RTS 
00001DC0                          1143  
00001DC0  48A7 FFFF               1144  ISRORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DC4  43F9 000022FB           1145              LEA MESSAGERORB, A1         
00001DCA  103C 000E               1146              MOVE.B  #14, D0
00001DCE  4E4F                    1147              TRAP    #15
00001DD0                          1148     
00001DD0  4C9F FFFF               1149              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DD4  4E75                    1150              RTS
00001DD6                          1151  
00001DD6  48A7 FFFF               1152  ISRORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DDA  43F9 00002303           1153              LEA MESSAGERORW, A1         
00001DE0  103C 000E               1154              MOVE.B  #14, D0
00001DE4  4E4F                    1155              TRAP    #15
00001DE6                          1156     
00001DE6  4C9F FFFF               1157              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DEA  4E75                    1158              RTS
00001DEC                          1159              
00001DEC  48A7 FFFF               1160  ISRORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DF0  43F9 0000230B           1161              LEA MESSAGERORL, A1         
00001DF6  103C 000E               1162              MOVE.B  #14, D0
00001DFA  4E4F                    1163              TRAP    #15
00001DFC                          1164     
00001DFC  4C9F FFFF               1165              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E00  4E75                    1166              RTS 
00001E02                          1167  
00001E02  48A7 FFFF               1168  ISROLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E06  43F9 00002313           1169              LEA MESSAGEROLB, A1         
00001E0C  103C 000E               1170              MOVE.B  #14, D0
00001E10  4E4F                    1171              TRAP    #15
00001E12                          1172     
00001E12  4C9F FFFF               1173              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E16  4E75                    1174              RTS
00001E18                          1175  
00001E18  48A7 FFFF               1176  ISROLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E1C  43F9 0000231B           1177              LEA MESSAGEROLW, A1         
00001E22  103C 000E               1178              MOVE.B  #14, D0
00001E26  4E4F                    1179              TRAP    #15
00001E28                          1180     
00001E28  4C9F FFFF               1181              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E2C  4E75                    1182              RTS
00001E2E                          1183              
00001E2E  48A7 FFFF               1184  ISROLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E32  43F9 00002323           1185              LEA MESSAGEROLL, A1         
00001E38  103C 000E               1186              MOVE.B  #14, D0
00001E3C  4E4F                    1187              TRAP    #15
00001E3E                          1188     
00001E3E  4C9F FFFF               1189              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E42  4E75                    1190              RTS 
00001E44                          1191  
00001E44  48A7 FFFF               1192  ISMULSL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E48  43F9 000022C2           1193              LEA MESSAGEMULSL, A1         *OPCODE is MULS.L
00001E4E  103C 000E               1194              MOVE.B  #14, D0
00001E52  4E4F                    1195              TRAP    #15
00001E54                          1196     
00001E54  4C9F FFFF               1197              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E58  4E75                    1198              RTS
00001E5A                          1199  
00001E5A  48A7 FFFF               1200  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E5E  43F9 000022B9           1201              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001E64  103C 000E               1202              MOVE.B  #14, D0
00001E68  4E4F                    1203              TRAP    #15
00001E6A                          1204     
00001E6A  4C9F FFFF               1205              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E6E  4E75                    1206              RTS
00001E70                          1207  
00001E70  48A7 FFFF               1208  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E74  43F9 000022A1           1209              LEA MESSAGEANDB, A1         *OPCODE is AND.B
00001E7A  103C 000E               1210              MOVE.B  #14, D0
00001E7E  4E4F                    1211              TRAP    #15
00001E80                          1212     
00001E80  4C9F FFFF               1213              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E84  4E75                    1214              RTS
00001E86                          1215  
00001E86  48A7 FFFF               1216  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E8A  43F9 000022A9           1217              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001E90  103C 000E               1218              MOVE.B  #14, D0
00001E94  4E4F                    1219              TRAP    #15
00001E96                          1220     
00001E96  4C9F FFFF               1221              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E9A  4E75                    1222              RTS
00001E9C                          1223              
00001E9C  48A7 FFFF               1224  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EA0  43F9 000022B1           1225              LEA MESSAGEANDL, A1         *OPCODE is AND.L
00001EA6  103C 000E               1226              MOVE.B  #14, D0
00001EAA  4E4F                    1227              TRAP    #15
00001EAC                          1228     
00001EAC  4C9F FFFF               1229              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EB0  4E75                    1230              RTS  
00001EB2                          1231  
00001EB2  48A7 FFFF               1232  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EB6  43F9 00002285           1233              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001EBC  103C 000E               1234              MOVE.B  #14, D0
00001EC0  4E4F                    1235              TRAP    #15
00001EC2                          1236     
00001EC2  4C9F FFFF               1237              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EC6  4E75                    1238              RTS
00001EC8                          1239              
00001EC8  48A7 FFFF               1240  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001ECC  43F9 0000228E           1241              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001ED2  103C 000E               1242              MOVE.B  #14, D0
00001ED6  4E4F                    1243              TRAP    #15
00001ED8                          1244     
00001ED8  4C9F FFFF               1245              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EDC  4E75                    1246              RTS 
00001EDE                          1247  
00001EDE  48A7 FFFF               1248  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EE2  43F9 0000226D           1249              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
00001EE8  103C 000E               1250              MOVE.B  #14, D0
00001EEC  4E4F                    1251              TRAP    #15
00001EEE                          1252     
00001EEE  4C9F FFFF               1253              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EF2  4E75                    1254              RTS
00001EF4                          1255  
00001EF4  48A7 FFFF               1256  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EF8  43F9 00002275           1257              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
00001EFE  103C 000E               1258              MOVE.B  #14, D0
00001F02  4E4F                    1259              TRAP    #15
00001F04                          1260     
00001F04  4C9F FFFF               1261              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F08  4E75                    1262              RTS
00001F0A                          1263              
00001F0A  48A7 FFFF               1264  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F0E  43F9 0000227D           1265              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
00001F14  103C 000E               1266              MOVE.B  #14, D0
00001F18  4E4F                    1267              TRAP    #15
00001F1A                          1268     
00001F1A  4C9F FFFF               1269              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F1E  4E75                    1270              RTS  
00001F20                          1271  
00001F20  48A7 FFFF               1272  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F24  43F9 00002255           1273              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
00001F2A  103C 000E               1274              MOVE.B  #14, D0
00001F2E  4E4F                    1275              TRAP    #15
00001F30                          1276     
00001F30  4C9F FFFF               1277              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F34  4E75                    1278              RTS
00001F36                          1279  
00001F36  48A7 FFFF               1280  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F3A  43F9 0000225D           1281              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00001F40  103C 000E               1282              MOVE.B  #14, D0
00001F44  4E4F                    1283              TRAP    #15
00001F46                          1284     
00001F46  4C9F FFFF               1285              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F4A  4E75                    1286              RTS
00001F4C                          1287              
00001F4C  48A7 FFFF               1288  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F50  43F9 00002265           1289              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
00001F56  103C 000E               1290              MOVE.B  #14, D0
00001F5A  4E4F                    1291              TRAP    #15
00001F5C                          1292     
00001F5C  4C9F FFFF               1293              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F60  4E75                    1294              RTS  
00001F62                          1295  
00001F62  48A7 FFFF               1296  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F66  43F9 0000223D           1297              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00001F6C  103C 000E               1298              MOVE.B  #14, D0
00001F70  4E4F                    1299              TRAP    #15
00001F72                          1300     
00001F72  4C9F FFFF               1301              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F76  4E75                    1302              RTS
00001F78                          1303  
00001F78  48A7 FFFF               1304  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F7C  43F9 00002245           1305              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001F82  103C 000E               1306              MOVE.B  #14, D0
00001F86  4E4F                    1307              TRAP    #15
00001F88                          1308     
00001F88  4C9F FFFF               1309              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F8C  4E75                    1310              RTS
00001F8E                          1311              
00001F8E  48A7 FFFF               1312  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F92  43F9 0000224D           1313              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
00001F98  103C 000E               1314              MOVE.B  #14, D0
00001F9C  4E4F                    1315              TRAP    #15
00001F9E                          1316     
00001F9E  4C9F FFFF               1317              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FA2  4E75                    1318              RTS    
00001FA4                          1319  
00001FA4  48A7 FFFF               1320  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FA8  43F9 00002222           1321              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00001FAE  103C 000E               1322              MOVE.B  #14, D0
00001FB2  4E4F                    1323              TRAP    #15
00001FB4                          1324     
00001FB4  4C9F FFFF               1325              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FB8  4E75                    1326              RTS
00001FBA                          1327  
00001FBA  48A7 FFFF               1328  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FBE  43F9 0000222B           1329              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00001FC4  103C 000E               1330              MOVE.B  #14, D0
00001FC8  4E4F                    1331              TRAP    #15
00001FCA                          1332     
00001FCA  4C9F FFFF               1333              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FCE  4E75                    1334              RTS
00001FD0                          1335              
00001FD0  48A7 FFFF               1336  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FD4  43F9 00002234           1337              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
00001FDA  103C 000E               1338              MOVE.B  #14, D0
00001FDE  4E4F                    1339              TRAP    #15
00001FE0                          1340     
00001FE0  4C9F FFFF               1341              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FE4  4E75                    1342              RTS            
00001FE6                          1343              
00001FE6  48A7 FFFF               1344  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FEA  43F9 00002297           1345              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00001FF0  103C 000E               1346              MOVE.B  #14, D0
00001FF4  4E4F                    1347              TRAP    #15
00001FF6                          1348     
00001FF6  4C9F FFFF               1349              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FFA  4E75                    1350              RTS
00001FFC                          1351  
00001FFC  48A7 FFFF               1352  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002000  43F9 0000220A           1353              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00002006  103C 000E               1354              MOVE.B  #14, D0
0000200A  4E4F                    1355              TRAP    #15
0000200C                          1356     
0000200C  4C9F FFFF               1357              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002010  4E75                    1358              RTS
00002012                          1359  
00002012  48A7 FFFF               1360  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002016  43F9 00002212           1361              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
0000201C  103C 000E               1362              MOVE.B  #14, D0
00002020  4E4F                    1363              TRAP    #15
00002022                          1364     
00002022  4C9F FFFF               1365              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002026  4E75                    1366              RTS
00002028                          1367  
00002028  48A7 FFFF               1368  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000202C  43F9 0000221A           1369              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
00002032  103C 000E               1370              MOVE.B  #14, D0
00002036  4E4F                    1371              TRAP    #15
00002038                          1372     
00002038  4C9F FFFF               1373              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000203C  4E75                    1374              RTS
0000203E                          1375              
0000203E  48A7 FFFF               1376  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002042  43F9 000021DE           1377              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
00002048  103C 000E               1378              MOVE.B  #14, D0
0000204C  4E4F                    1379              TRAP    #15
0000204E                          1380     
0000204E  4C9F FFFF               1381              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002052  4E75                    1382              RTS
00002054                          1383  
00002054  48A7 FFFF               1384  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002058  43F9 000021E8           1385              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
0000205E  103C 000E               1386              MOVE.B  #14, D0
00002062  4E4F                    1387              TRAP    #15
00002064                          1388     
00002064  4C9F FFFF               1389              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002068  4E75                    1390              RTS  
0000206A                          1391  
0000206A  48A7 FFFF               1392  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000206E  43F9 00002204           1393              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
00002074  103C 000E               1394              MOVE.B  #14, D0
00002078  4E4F                    1395              TRAP    #15
0000207A                          1396     
0000207A  4C9F FFFF               1397              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000207E  4E75                    1398              RTS                          ; Exit subroutine
00002080                          1399  
00002080  48A7 FFFF               1400  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002084  43F9 000021F2           1401              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
0000208A  103C 000E               1402              MOVE.B  #14, D0
0000208E  4E4F                    1403              TRAP    #15
00002090  4C9F FFFF               1404              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002094  4E75                    1405              RTS                          ; Exit subroutine
00002096                          1406              
00002096  48A7 FFFF               1407  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000209A  43F9 000021FE           1408              LEA MESSAGERTS, A1         *OPCODE is RTS
000020A0  103C 000E               1409              MOVE.B  #14, D0
000020A4  4E4F                    1410              TRAP    #15
000020A6  4C9F FFFF               1411              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020AA  4E75                    1412              RTS  
000020AC                          1413  
000020AC  48A7 FFFF               1414  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020B0  43F9 000021F8           1415              LEA MESSAGECLR, A1         *OPCODE is CLR
000020B6  103C 000E               1416              MOVE.B  #14, D0
000020BA  4E4F                    1417              TRAP    #15
000020BC  4C9F FFFF               1418              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020C0  4E75                    1419              RTS  
000020C2                          1420              
000020C2  48A7 FFFF               1421  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020C6  43F9 0000218E           1422              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
000020CC  103C 000E               1423              MOVE.B  #14, D0
000020D0  4E4F                    1424              TRAP    #15
000020D2  4C9F FFFF               1425              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020D6  4E75                    1426              RTS                          ; Exit subroutine
000020D8                          1427           
000020D8  48A7 FFFF               1428  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020DC  43F9 00002194           1429              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
000020E2  103C 000E               1430              MOVE.B  #14, D0
000020E6  4E4F                    1431              TRAP    #15
000020E8                          1432     
000020E8  4C9F FFFF               1433              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020EC  4E75                    1434              RTS                          ; Exit subroutine
000020EE                          1435              
000020EE  48A7 FFFF               1436  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020F2  43F9 000021D4           1437              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
000020F8  103C 000E               1438              MOVE.B  #14, D0
000020FC  4E4F                    1439              TRAP    #15
000020FE                          1440     
000020FE  4C9F FFFF               1441              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002102  4E75                    1442              RTS                          ; Exit subroutine
00002104                          1443              
00002104  48A7 FFFF               1444  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002108  43F9 0000219D           1445              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
0000210E  103C 000E               1446              MOVE.B  #14, D0
00002112  4E4F                    1447              TRAP    #15
00002114                          1448              
00002114  4C9F FFFF               1449              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002118  4E75                    1450              RTS                          ; Exit subroutine
0000211A                          1451              
0000211A  48A7 FFFF               1452  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000211E  43F9 000021CA           1453              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
00002124  103C 000E               1454              MOVE.B  #14, D0
00002128  4E4F                    1455              TRAP    #15
0000212A                          1456              
0000212A  4C9F FFFF               1457              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000212E  4E75                    1458              RTS                          ; Exit subroutine
00002130                          1459         
00002130  48A7 FFFF               1460  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002134  43F9 000021A6           1461              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
0000213A  103C 000E               1462              MOVE.B  #14, D0
0000213E  4E4F                    1463              TRAP    #15
00002140                          1464              
00002140  4C9F FFFF               1465              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002144  4E75                    1466              RTS                          ; Exit subroutine
00002146                          1467           
00002146  48A7 FFFF               1468  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000214A  43F9 000021AF           1469              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
00002150  103C 000E               1470              MOVE.B  #14, D0
00002154  4E4F                    1471              TRAP    #15
00002156                          1472              
00002156  4C9F FFFF               1473              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000215A  4E75                    1474              RTS                          ; Exit subroutine
0000215C                          1475              
0000215C  48A7 FFFF               1476  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002160  43F9 000021B8           1477              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
00002166  103C 000E               1478              MOVE.B  #14, D0
0000216A  4E4F                    1479              TRAP    #15
0000216C                          1480              
0000216C  4C9F FFFF               1481              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002170  4E75                    1482              RTS                          ; Exit subroutine
00002172                          1483                  
00002172  48A7 FFFF               1484  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002176  43F9 000021C1           1485              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
0000217C  103C 000E               1486              MOVE.B  #14, D0
00002180  4E4F                    1487              TRAP    #15
00002182                          1488              
00002182  4C9F FFFF               1489              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002186  4E75                    1490              RTS                          ; Exit subroutine
00002188                          1491                        
00002188  103C 0009               1492  DONE        MOVE.B      #9, D0
0000218C  4E4F                    1493              TRAP        #15
0000218E                          1494  
0000218E  =0000000D               1495  CR  EQU     $0D 
0000218E  =0000000A               1496  LF  EQU     $0A
0000218E= 4E 4F 50 0D 0A 00       1497  MESSAGENOP DC.B    'NOP',CR,LF, 0    
00002194                          1498      
00002194= 4D 4F 56 45 2E 57 ...   1499  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
0000219D= 4D 4F 56 45 2E 4C ...   1500  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
000021A6= 4D 4F 56 45 2E 42 ...   1501  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
000021AF                          1502  
000021AF= 41 44 44 49 2E 57 ...   1503  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
000021B8= 41 44 44 49 2E 4C ...   1504  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
000021C1= 41 44 44 49 2E 42 ...   1505  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
000021CA                          1506  
000021CA= 4D 4F 56 45 41 2E ...   1507  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
000021D4= 4D 4F 56 45 41 2E ...   1508  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
000021DE                          1509  
000021DE= 4D 4F 56 45 4D 2E ...   1510  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
000021E8= 4D 4F 56 45 4D 2E ...   1511  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
000021F2                          1512  
000021F2= 4A 53 52 0D 0A 00       1513  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
000021F8                          1514  
000021F8= 43 4C 52 0D 0A 00       1515  MESSAGECLR DC.B    'CLR',CR,LF, 0
000021FE                          1516  
000021FE= 52 54 53 0D 0A 00       1517  MESSAGERTS DC.B    'RTS',CR,LF, 0
00002204                          1518  
00002204= 4C 45 41 0D 0A 00       1519  MESSAGELEA DC.B    'LEA',CR,LF, 0
0000220A                          1520  
0000220A= 43 4C 52 2E 42 0D ...   1521  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00002212= 43 4C 52 2E 57 0D ...   1522  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
0000221A= 43 4C 52 2E 4C 0D ...   1523  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00002222                          1524  
00002222= 41 44 44 51 2E 42 ...   1525  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
0000222B= 41 44 44 51 2E 57 ...   1526  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
00002234= 41 44 44 51 2E 4C ...   1527  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
0000223D                          1528  
0000223D= 43 4D 50 2E 42 0D ...   1529  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
00002245= 43 4D 50 2E 57 0D ...   1530  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
0000224D= 43 4D 50 2E 4C 0D ...   1531  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
00002255                          1532  
00002255= 53 55 42 2E 42 0D ...   1533  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
0000225D= 53 55 42 2E 57 0D ...   1534  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
00002265= 53 55 42 2E 4C 0D ...   1535  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
0000226D                          1536  
0000226D= 41 44 44 2E 42 0D ...   1537  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0 
00002275= 41 44 44 2E 57 0D ...   1538  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
0000227D= 41 44 44 2E 4C 0D ...   1539  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
00002285                          1540  
00002285= 41 44 44 41 2E 57 ...   1541  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
0000228E= 41 44 44 41 2E 4C ...   1542  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
00002297                          1543  
00002297= 4D 4F 56 45 51 2E ...   1544  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
000022A1                          1545  
000022A1= 41 4E 44 2E 42 0D ...   1546  MESSAGEANDB DC.B    'AND.B',CR,LF, 0 
000022A9= 41 4E 44 2E 57 0D ...   1547  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
000022B1= 41 4E 44 2E 4C 0D ...   1548  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
000022B9                          1549  
000022B9= 4D 55 4C 53 2E 57 ...   1550  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
000022C2= 4D 55 4C 53 2E 4C ...   1551  MESSAGEMULSL DC.B    'MULS.L',CR,LF, 0
000022CB                          1552  
000022CB= 41 53 52 2E 42 0D ...   1553  MESSAGEASRB DC.B    'ASR.B',CR,LF, 0 
000022D3= 41 53 52 2E 57 0D ...   1554  MESSAGEASRW DC.B    'ASR.W',CR,LF, 0
000022DB= 41 53 52 2E 4C 0D ...   1555  MESSAGEASRL DC.B    'ASR.L',CR,LF, 0
000022E3                          1556  
000022E3= 41 53 4C 2E 42 0D ...   1557  MESSAGEASLB DC.B    'ASL.B',CR,LF, 0 
000022EB= 41 53 4C 2E 57 0D ...   1558  MESSAGEASLW DC.B    'ASL.W',CR,LF, 0
000022F3= 41 53 4C 2E 4C 0D ...   1559  MESSAGEASLL DC.B    'ASL.L',CR,LF, 0
000022FB                          1560  
000022FB= 52 4F 52 2E 42 0D ...   1561  MESSAGERORB DC.B    'ROR.B',CR,LF, 0 
00002303= 52 4F 52 2E 57 0D ...   1562  MESSAGERORW DC.B    'ROR.W',CR,LF, 0
0000230B= 52 4F 52 2E 4C 0D ...   1563  MESSAGERORL DC.B    'ROR.L',CR,LF, 0
00002313                          1564  
00002313= 52 4F 4C 2E 42 0D ...   1565  MESSAGEROLB DC.B    'ROL.B',CR,LF, 0 
0000231B= 52 4F 4C 2E 57 0D ...   1566  MESSAGEROLW DC.B    'ROL.W',CR,LF, 0
00002323= 52 4F 4C 2E 4C 0D ...   1567  MESSAGEROLL DC.B    'ROL.L',CR,LF, 0
0000232B                          1568  
0000232B= 4C 53 52 2E 42 0D ...   1569  MESSAGELSRB DC.B    'LSR.B',CR,LF, 0 
00002333= 4C 53 52 2E 57 0D ...   1570  MESSAGELSRW DC.B    'LSR.W',CR,LF, 0
0000233B= 4C 53 52 2E 4C 0D ...   1571  MESSAGELSRL DC.B    'LSR.L',CR,LF, 0
00002343                          1572  
00002343= 4C 53 4C 2E 42 0D ...   1573  MESSAGELSLB DC.B    'LSL.B',CR,LF, 0 
0000234B= 4C 53 4C 2E 57 0D ...   1574  MESSAGELSLW DC.B    'LSL.W',CR,LF, 0
00002353= 4C 53 4C 2E 4C 0D ...   1575  MESSAGELSLL DC.B    'LSL.L',CR,LF, 0
0000235B                          1576  
0000235B= 4F 52 2E 42 0D 0A 00    1577  MESSAGEORB DC.B    'OR.B',CR,LF, 0 
00002362= 4F 52 2E 57 0D 0A 00    1578  MESSAGEORW DC.B    'OR.W',CR,LF, 0
00002369= 4F 52 2E 4C 0D 0A 00    1579  MESSAGEORL DC.B    'OR.L',CR,LF, 0
00002370                          1580  
00002370= 44 49 56 55 20 77 ...   1581  MESSAGEDIVU DC.B    'DIVU word or long from ea',CR,LF, 0
0000238C                          1582  
0000238C  FFFF FFFF               1583      SIMHALT             ; halt simulator
00002390                          1584  
00002390                          1585  * Put variables and constants here
00002390                          1586  
00002390                          1587      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          164A
ADDCODE001          1656
ADDCODE010          1662
ADDCODE011          166E
ADDCODE100          167A
ADDCODE101          1686
ADDCODE110          1692
ADDCODE111          169E
ADDIBCODE00         1AD4
ADDILCODE10         1AEC
ADDIWCODE01         1AE0
ADDI_BORADDI_WORADDI_L  1A9E
ADDQCODE00          17E6
ADDQCODE01          17F2
ADDQCODE10          17FE
ADDQ_BORADDQ_WORADDQ_L  17AA
ADD_BORADD_WORADD_L  15F0
ANDCODE000          1598
ANDCODE001          15A4
ANDCODE010          15B0
ANDCODE011          15BC
ANDCODE100          15C0
ANDCODE101          15CC
ANDCODE110          15D8
ANDCODE111          15E4
AND_BORAND_WORAND_LORMULS_W  153E
ASLCODE00           1258
ASLCODE01           1264
ASLCODE10           1270
ASL_ASR             1490
ASL_ASRCODE0        14C6
ASL_ASRCODE1        14D0
ASRCODE00           11F8
ASRCODE01           1204
ASRCODE10           1210
CLRCODE00           1846
CLRCODE01           1852
CLRCODE10           185E
CMPCODE000          1786
CMPCODE001          1792
CMPCODE010          179E
CMP_BORCMP_WORCMP_L  174A
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10D0
CODE1010            10DC
CODE1011            10E0
CODE1100            10EC
CODE1101            10F8
CODE1110            1104
CODE1111            1110
CR                  D
DONE                2188
EXAMPLE             8983
ISADDAL             1EC8
ISADDAW             1EB2
ISADDB              1EDE
ISADDIB             2172
ISADDIL             215C
ISADDIW             2146
ISADDL              1F0A
ISADDQB             1FA4
ISADDQL             1FD0
ISADDQW             1FBA
ISADDW              1EF4
ISANDB              1E70
ISANDL              1E9C
ISANDW              1E86
ISASLB              1CFA
ISASLL              1D26
ISASLW              1D10
ISASRB              1CB8
ISASRL              1CE4
ISASRW              1CCE
ISCLR               20AC
ISCLRB              1FFC
ISCLRL              2028
ISCLRW              2012
ISCMPB              1F62
ISCMPL              1F8E
ISCMPW              1F78
ISDIVU              1C60
ISJSR               2080
ISLEA               206A
ISLSLB              1D7E
ISLSLL              1DAA
ISLSLW              1D94
ISLSRB              1D3C
ISLSRL              1D68
ISLSRW              1D52
ISMOVEAL            211A
ISMOVEAW            20EE
ISMOVEB             2130
ISMOVEL             2104
ISMOVEML            203E
ISMOVEMW            2054
ISMOVEQL            1FE6
ISMOVEW             20D8
ISMULSL             1E44
ISMULSW             1E5A
ISNOP               20C2
ISORB               1C76
ISORL               1CA2
ISORW               1C8C
ISROLB              1E02
ISROLL              1E2E
ISROLW              1E18
ISRORB              1DC0
ISRORL              1DEC
ISRORW              1DD6
ISRTS               2096
ISSUBB              1F20
ISSUBL              1F4C
ISSUBW              1F36
JSRORCLRCODE0000    191A
JSRORCLRCODE0001    191E
JSRORCLRCODE0010    1922
JSRORCLRCODE0011    192C
JSRORCLRCODE0100    1930
JSRORCLRCODE0101    1934
JSRORCLRCODE0110    1938
JSRORCLRCODE0111    193C
JSRORCLRCODE1000    1940
JSRORCLRCODE1001    1944
JSRORCLRCODE1010    1948
JSRORCLRCODE1011    194C
JSRORCLRCODE1100    1950
JSRORCLRCODE1101    1954
JSRORCLRCODE1110    1958
JSRORCLRCODE1111    1964
LF                  A
LOTSCODE0000        1A3A
LOTSCODE0001        1A40
LOTSCODE0010        1A44
LOTSCODE0011        1A4E
LOTSCODE0100        1A52
LOTSCODE0101        1A56
LOTSCODE0110        1A5A
LOTSCODE0111        1A66
LOTSCODE1000        1A6A
LOTSCODE1001        1A74
LOTSCODE1010        1A78
LOTSCODE1011        1A82
LOTSCODE1100        1A86
LOTSCODE1101        1A8A
LOTSCODE1110        1A8E
LOTSCODE1111        1A9A
LSLCODE00           1318
LSLCODE01           1324
LSLCODE10           1330
LSL_LSR             1446
LSL_LSRCODE0        147C
LSL_LSRCODE1        1486
LSRCODE00           12B8
LSRCODE01           12C4
LSRCODE10           12D0
MESSAGEADDAL        228E
MESSAGEADDAW        2285
MESSAGEADDB         226D
MESSAGEADDIB        21C1
MESSAGEADDIL        21B8
MESSAGEADDIW        21AF
MESSAGEADDL         227D
MESSAGEADDQB        2222
MESSAGEADDQL        2234
MESSAGEADDQW        222B
MESSAGEADDW         2275
MESSAGEANDB         22A1
MESSAGEANDL         22B1
MESSAGEANDW         22A9
MESSAGEASLB         22E3
MESSAGEASLL         22F3
MESSAGEASLW         22EB
MESSAGEASRB         22CB
MESSAGEASRL         22DB
MESSAGEASRW         22D3
MESSAGECLR          21F8
MESSAGECLRB         220A
MESSAGECLRL         221A
MESSAGECLRW         2212
MESSAGECMPB         223D
MESSAGECMPL         224D
MESSAGECMPW         2245
MESSAGEDIVU         2370
MESSAGEJSR          21F2
MESSAGELEA          2204
MESSAGELSLB         2343
MESSAGELSLL         2353
MESSAGELSLW         234B
MESSAGELSRB         232B
MESSAGELSRL         233B
MESSAGELSRW         2333
MESSAGEMOVEAL       21CA
MESSAGEMOVEAW       21D4
MESSAGEMOVEB        21A6
MESSAGEMOVEL        219D
MESSAGEMOVEML       21DE
MESSAGEMOVEMW       21E8
MESSAGEMOVEQL       2297
MESSAGEMOVEW        2194
MESSAGEMULSL        22C2
MESSAGEMULSW        22B9
MESSAGENOP          218E
MESSAGEORB          235B
MESSAGEORL          2369
MESSAGEORW          2362
MESSAGEROLB         2313
MESSAGEROLL         2323
MESSAGEROLW         231B
MESSAGERORB         22FB
MESSAGERORL         230B
MESSAGERORW         2303
MESSAGERTS          21FE
MESSAGESUBB         2255
MESSAGESUBL         2265
MESSAGESUBW         225D
MOVEACODE001        1B58
MOVEAWCODE001       1C0C
MOVEA_LORMOVE_L     1AF8
MOVEA_WORMOVE_W     1BAC
MOVECODE000         1B4C
MOVECODE010         1B64
MOVECODE011         1B70
MOVECODE100         1B7C
MOVECODE101         1B88
MOVECODE110         1B94
MOVECODE111         1BA0
MOVEMCODE0          199E
MOVEMCODE1          19AA
MOVEWCODE000        1C00
MOVEWCODE010        1C18
MOVEWCODE011        1C24
MOVEWCODE100        1C30
MOVEWCODE101        1C3C
MOVEWCODE110        1C48
MOVEWCODE111        1C54
NOPCOMMAND          190E
NOPORCLRORRTSORJSR  186A
NOP_MOVEM_LEA_JSR_CLR_RTS  19B6
OR_BOROR_WOROR_LORDIVU  1114
OR_DIVUCODE000      1168
OR_DIVUCODE001      1174
OR_DIVUCODE010      1180
OR_DIVUCODE011      118C
OR_DIVUCODE100      1198
OR_DIVUCODE101      11A4
OR_DIVUCODE110      11B0
ROD_LSD_ASD         14DA
ROD_LSD_ASDCODE00   151C
ROD_LSD_ASDCODE01   1526
ROD_LSD_ASDCODE10   1530
ROD_LSD_ASDCODE11   1534
ROLCODE00           1378
ROLCODE01           1384
ROLCODE10           1390
ROL_ROR             13FC
ROL_RORCODE0        1432
ROL_RORCODE1        143C
RORCODE00           13D8
RORCODE01           13E4
RORCODE10           13F0
RTSCOMMAND          1902
SHIFT               C
SOMEASL             121C
SOMEASR             11BC
SOMECLR             180A
SOMELSL             12DC
SOMELSR             127C
SOMEMOVEM           1968
SOMEROL             133C
SOMEROR             139C
STACK               7000
START               1000
SUBCODE000          16FE
SUBCODE001          170A
SUBCODE010          1716
SUBCODE011          1722
SUBCODE100          1726
SUBCODE101          1732
SUBCODE110          173E
SUB_BORSUB_WORSUB_L  16AA
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1AC2
TABLEADDQ_BORADDQ_WORADDQ_L  17D4
TABLEADD_BORADD_WORADD_L  161A
TABLEAND_BORAND_WORAND_LORMULS_W  1568
TABLEASL_ASR        14BA
TABLECMP_BORCMP_WORCMP_L  1774
TABLELSL_LSR        1470
TABLEMOVEA_LORMOVE_L  1B1C
TABLEMOVEA_WORMOVE_W  1BD0
TABLENOPORCLRORRTSORJSR  18A2
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  19E0
TABLEOR_BOROR_WOROR_LORDIVU  113E
TABLEROD_LSD_ASD    1504
TABLEROL_ROR        1426
TABLESOMEASL        1246
TABLESOMEASR        11E6
TABLESOMECLR        1834
TABLESOMELSL        1306
TABLESOMELSR        12A6
TABLESOMEMOVEM      1992
TABLESOMEROL        1366
TABLESOMEROR        13C6
TABLESUB_BORSUB_WORSUB_L  16D4
