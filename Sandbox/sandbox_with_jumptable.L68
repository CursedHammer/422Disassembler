00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/16/2016 7:23:22 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000                            57  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000                            60  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            61  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            62  
00001000                            63  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            64  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            65  
00001000                            66  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            67  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            68  
00001000                            69  *example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            70  
00001000                            71  *example EQU     %0100110000000011 ; MULS.L D3, D4 = 01001 1 0000 000 011
00001000                            72  
00001000                            73  *example EQU     %0100100010010100 ; MOVEM.W (A4), (D16A6) = 0100 1000 10 010 100
00001000                            74  *example EQU     %0100110010101110 ; MOVEM.W (D16A6), (A4) = 0100 1100 10 101 110
00001000                            75  
00001000                            76  *example EQU     %0100100011010100 ; MOVEM.L (A4), (D16A6) = 0100 1000 11 010 100
00001000                            77  *example EQU     %0100110011101110 ; MOVEM.L (D16A6), (A4) = 0100 1100 11 101 110
00001000                            78  
00001000                            79  *example EQU     %1110111100011010  ; ROL.B  D1,D2 = 1110 111 1 00 0 11 010 where D1 = 0x111 or 7
00001000                            80  *example EQU     %1110111101011010  ; ROL.W  D1,D2 = 1110 111 1 01 0 11 010 where D1 = 0x111 or 7
00001000                            81  *example EQU     %1110111110011010  ; ROL.L  D1,D2 = 1110 111 1 10 0 11 010 where D1 = 0x111 or 7
00001000                            82  
00001000                            83  *example EQU     %1110111000011010  ; ROR.B  D1,D2 = 1110 111 0 00 0 11 010 where D1 = 0x111 or 7
00001000                            84  *example EQU     %1110111001011010  ; ROR.W  D1,D2 = 1110 111 0 01 0 11 010 where D1 = 0x111 or 7
00001000                            85  *example EQU     %1110111010011010  ; ROR.L  D1,D2 = 1110 111 0 10 0 11 010 where D1 = 0x111 or 7
00001000                            86  
00001000                            87  *example EQU     %1110111100001010  ; LSL.B  D1,D2 = 1110 111 1 00 0 01 010 where D1 = 0x111 or 7
00001000                            88  *example EQU     %1110111101001010  ; LSL.W  D1,D2 = 1110 111 1 01 0 01 010 where D1 = 0x111 or 7
00001000                            89  *example EQU     %1110111110001010  ; LSL.L  D1,D2 = 1110 111 1 10 0 01 010 where D1 = 0x111 or 7
00001000                            90  
00001000                            91  *example EQU     %1110111000001010  ; LSR.B  D1,D2 = 1110 111 0 00 0 01 010 where D1 = 0x111 or 7
00001000                            92  *example EQU     %1110111001001010  ; LSR.W  D1,D2 = 1110 111 0 01 0 01 010 where D1 = 0x111 or 7
00001000                            93  *example EQU     %1110111010001010  ; LSR.L  D1,D2 = 1110 111 0 10 0 01 010 where D1 = 0x111 or 7
00001000                            94  
00001000                            95  *example EQU     %1110111100000010  ; ASL.B  D1,D2 = 1110 111 1 00 0 00 010 where D1 = 0x111 or 7
00001000                            96  *example EQU     %1110111101000010  ; ASL.W  D1,D2 = 1110 111 1 01 0 00 010 where D1 = 0x111 or 7
00001000                            97  *example EQU     %1110111110000010  ; ASL.L  D1,D2 = 1110 111 1 10 0 00 010 where D1 = 0x111 or 7
00001000                            98  
00001000                            99  *example EQU     %1110111000000010  ; ASR.B  D1,D2 = 1110 111 0 00 0 00 010 where D1 = 0x111 or 7
00001000                           100  *example EQU     %1110111001000010  ; ASR.W  D1,D2 = 1110 111 0 01 0 00 010 where D1 = 0x111 or 7
00001000  =0000EE82                101  example EQU     %1110111010000010  ; ASR.L  D1,D2 = 1110 111 0 10 0 00 010 where D1 = 0x111 or 7
00001000                           102  
00001000                           103  
00001000                           104  
00001000                           105  
00001000  =0000000C                106  shift   EQU     12                 ; Shift 12 bits 
00001000                           107  
00001000                           108  * Program starts here
00001000                           109  
00001000  4FF8 7000                110          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E            111          LEA     table,A0            ; Index into the table
0000100A  4280                     112          CLR.L   D0                  ; Zero it
0000100C  303C EE82                113          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                114          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                     115          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                           116                                      ; and the rest are zeroed out)
00001016  C0FC 0006                117          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                118          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                           119  
0000101E  4EF9 0000107E            120  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084            121          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090            122          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096            123          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C            124          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS or MULS.W
0000103C  4EF9 000010A8            125          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4            126          JMP     code0110
00001048  4EF9 000010B8            127          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4            128          JMP     code1000
00001054  4EF9 000010C8            129          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010D4            130          JMP     code1010
00001060  4EF9 000010D8            131          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010E4            132          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 000010F0            133          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 000010FC            134          JMP     code1110        ; ROd_LSd_ASd
00001078  4EF9 00001108            135          JMP     code1111
0000107E                           136         
0000107E                           137  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           138  
0000107E  4EB9 000019EE            139  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 00002028            140  code0001 JSR   ISMOVEB
0000108A  4EB9 00002080            141           JSR   DONE
00001090  4EB9 00001A48            142  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 00001AFC            143  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 00001906            144  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 00002080            145           JSR    DONE
000010A8  4EB9 000016FA            146  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 00002080            147           JSR    DONE
000010B4  4E72 2700                148  code0110 STOP  #$2700
000010B8  4EB9 00001EDE            149  code0111 JSR    ISMOVEQL
000010BE  4EB9 00002080            150           JSR    DONE
000010C4  4E72 2700                151  code1000 STOP  #$2700
000010C8  4EB9 000015FA            152  code1001 JSR    SUB_BorSUB_WorSUB_L
000010CE  4EB9 00002080            153           JSR    DONE
000010D4  4E72 2700                154  code1010 STOP  #$2700
000010D8  4EB9 0000169A            155  code1011 JSR    CMP_BorCMP_WorCMP_L
000010DE  4EB9 00002080            156           JSR DONE
000010E4  4EB9 0000148E            157  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010EA  4EB9 00002080            158           JSR    DONE
000010F0  4EB9 00001540            159  code1101 JSR    ADD_BorADD_WorADD_L
000010F6  4EB9 00002080            160           JSR    DONE
000010FC  4EB9 0000142A            161  code1110 JSR    ROd_LSd_ASd
00001102  4EB9 00002080            162           JSR    DONE
00001108  4E72 2700                163  code1111 STOP  #$2700
0000110C                           164  
0000110C                           165  *****************************someASR ************************************
0000110C  4FF8 7000                166  someASR    LEA     STACK,SP            ; Load the SP
00001110  41F9 00001136            167                      LEA     tableSomeASR, A0            ; Index into the table
00001116  4280                     168                      CLR.L   D0                  ; Zero it
00001118  303C EE82                169                      MOVE.W  #example,D0         ; We'll play with it here
0000111C  123C 0008                170                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001120  E360                     171                      ASL.W   D1,D0            
00001122  123C 000C                172                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001126  E268                     173                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001128                           174                                      ; and the rest are zeroed out)           
00001128  123C 0002                175                      MOVE.B  #2,D1           ; Shift 2 bits right
0000112C  E260                     176                      ASR.W   D1,D0 
0000112E                           177                      
0000112E  C0FC 0006                178                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001132  4EB0 0000                179                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001136                           180  
00001136  4EF9 00001148            181  tableSomeASR        JMP     ASRcode00   *ASR.B
0000113C  4EF9 00001154            182                      JMP     ASRcode01   *ASR.W                                      
00001142  4EF9 00001160            183                      JMP     ASRcode10   *ASR.L
00001148                           184  
00001148  4EB9 00001BB0            185  ASRcode00   JSR     ISASRB
0000114E  4EB9 00002080            186              JSR     DONE
00001154  4EB9 00001BC6            187  ASRcode01   JSR     ISASRW  
0000115A  4EB9 00002080            188              JSR     DONE                                 
00001160  4EB9 00001BDC            189  ASRcode10   JSR     ISASRL  
00001166  4EB9 00002080            190              JSR     DONE                    
0000116C                           191  
0000116C                           192  *****************************END someLSL ************************************
0000116C                           193  
0000116C                           194  
0000116C                           195  *****************************someASL ************************************
0000116C  4FF8 7000                196  someASL    LEA     STACK,SP            ; Load the SP
00001170  41F9 00001196            197                      LEA     tableSomeASL, A0            ; Index into the table
00001176  4280                     198                      CLR.L   D0                  ; Zero it
00001178  303C EE82                199                      MOVE.W  #example,D0         ; We'll play with it here
0000117C  123C 0008                200                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001180  E360                     201                      ASL.W   D1,D0            
00001182  123C 000C                202                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001186  E268                     203                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001188                           204                                      ; and the rest are zeroed out)           
00001188  123C 0002                205                      MOVE.B  #2,D1           ; Shift 2 bits right
0000118C  E260                     206                      ASR.W   D1,D0 
0000118E                           207                      
0000118E  C0FC 0006                208                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001192  4EB0 0000                209                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001196                           210  
00001196  4EF9 000011A8            211  tableSomeASL        JMP     ASLcode00   *ASL.B
0000119C  4EF9 000011B4            212                      JMP     ASLcode01   *ASL.W                                      
000011A2  4EF9 000011C0            213                      JMP     ASLcode10   *ASL.L
000011A8                           214  
000011A8  4EB9 00001BF2            215  ASLcode00   JSR     ISASLB
000011AE  4EB9 00002080            216              JSR     DONE
000011B4  4EB9 00001C08            217  ASLcode01   JSR     ISASLW  
000011BA  4EB9 00002080            218              JSR     DONE                                 
000011C0  4EB9 00001C1E            219  ASLcode10   JSR     ISASLL  
000011C6  4EB9 00002080            220              JSR     DONE                    
000011CC                           221  
000011CC                           222  *****************************END someLSL ************************************
000011CC                           223  
000011CC                           224  
000011CC                           225  *****************************someLSR ************************************
000011CC  4FF8 7000                226  someLSR    LEA     STACK,SP            ; Load the SP
000011D0  41F9 000011F6            227                      LEA     tableSomeLSR, A0            ; Index into the table
000011D6  4280                     228                      CLR.L   D0                  ; Zero it
000011D8  303C EE82                229                      MOVE.W  #example,D0         ; We'll play with it here
000011DC  123C 0008                230                      MOVE.B  #8,D1           ; Shift 8 bits left 
000011E0  E360                     231                      ASL.W   D1,D0            
000011E2  123C 000C                232                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011E6  E268                     233                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011E8                           234                                      ; and the rest are zeroed out)           
000011E8  123C 0002                235                      MOVE.B  #2,D1           ; Shift 2 bits right
000011EC  E260                     236                      ASR.W   D1,D0 
000011EE                           237                      
000011EE  C0FC 0006                238                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011F2  4EB0 0000                239                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011F6                           240  
000011F6  4EF9 00001208            241  tableSomeLSR        JMP     LSRcode00   *LSR.B
000011FC  4EF9 00001214            242                      JMP     LSRcode01   *LSR.W                                      
00001202  4EF9 00001220            243                      JMP     LSRcode10   *LSR.L
00001208                           244  
00001208  4EB9 00001C34            245  LSRcode00   JSR     ISLSRB
0000120E  4EB9 00002080            246              JSR     DONE
00001214  4EB9 00001C4A            247  LSRcode01   JSR     ISLSRW  
0000121A  4EB9 00002080            248              JSR     DONE                                 
00001220  4EB9 00001C60            249  LSRcode10   JSR     ISLSRL  
00001226  4EB9 00002080            250              JSR     DONE                    
0000122C                           251  
0000122C                           252  *****************************END someLSR ************************************
0000122C                           253  
0000122C                           254  
0000122C                           255  *****************************someLSL ************************************
0000122C  4FF8 7000                256  someLSL    LEA     STACK,SP            ; Load the SP
00001230  41F9 00001256            257                      LEA     tableSomeLSL, A0            ; Index into the table
00001236  4280                     258                      CLR.L   D0                  ; Zero it
00001238  303C EE82                259                      MOVE.W  #example,D0         ; We'll play with it here
0000123C  123C 0008                260                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001240  E360                     261                      ASL.W   D1,D0            
00001242  123C 000C                262                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001246  E268                     263                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001248                           264                                      ; and the rest are zeroed out)           
00001248  123C 0002                265                      MOVE.B  #2,D1           ; Shift 2 bits right
0000124C  E260                     266                      ASR.W   D1,D0 
0000124E                           267                      
0000124E  C0FC 0006                268                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001252  4EB0 0000                269                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001256                           270  
00001256  4EF9 00001268            271  tableSomeLSL        JMP     LSLcode00   *LSL.B
0000125C  4EF9 00001274            272                      JMP     LSLcode01   *LSL.W                                      
00001262  4EF9 00001280            273                      JMP     LSLcode10   *LSL.L
00001268                           274  
00001268  4EB9 00001C76            275  LSLcode00   JSR     ISLSLB
0000126E  4EB9 00002080            276              JSR     DONE
00001274  4EB9 00001C8C            277  LSLcode01   JSR     ISLSLW  
0000127A  4EB9 00002080            278              JSR     DONE                                 
00001280  4EB9 00001CA2            279  LSLcode10   JSR     ISLSLL  
00001286  4EB9 00002080            280              JSR     DONE                    
0000128C                           281  
0000128C                           282  *****************************END someLSL ************************************
0000128C                           283  
0000128C                           284  
0000128C                           285  *****************************someROL ************************************
0000128C  4FF8 7000                286  someROL    LEA     STACK,SP            ; Load the SP
00001290  41F9 000012B6            287                      LEA     tableSomeROL, A0            ; Index into the table
00001296  4280                     288                      CLR.L   D0                  ; Zero it
00001298  303C EE82                289                      MOVE.W  #example,D0         ; We'll play with it here
0000129C  123C 0008                290                      MOVE.B  #8,D1           ; Shift 8 bits left 
000012A0  E360                     291                      ASL.W   D1,D0            
000012A2  123C 000C                292                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000012A6  E268                     293                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012A8                           294                                      ; and the rest are zeroed out)           
000012A8  123C 0002                295                      MOVE.B  #2,D1           ; Shift 2 bits right
000012AC  E260                     296                      ASR.W   D1,D0 
000012AE                           297                      
000012AE  C0FC 0006                298                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012B2  4EB0 0000                299                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012B6                           300  
000012B6  4EF9 000012C8            301  tableSomeROL        JMP     ROLcode00   *ROL.B
000012BC  4EF9 000012D4            302                      JMP     ROLcode01   *ROL.W                                      
000012C2  4EF9 000012E0            303                      JMP     ROLcode10   *ROL.L
000012C8                           304  
000012C8  4EB9 00001CFA            305  ROLcode00   JSR     ISROLB
000012CE  4EB9 00002080            306              JSR     DONE
000012D4  4EB9 00001D10            307  ROLcode01   JSR     ISROLW  
000012DA  4EB9 00002080            308              JSR     DONE                                 
000012E0  4EB9 00001D26            309  ROLcode10   JSR     ISROLL  
000012E6  4EB9 00002080            310              JSR     DONE                    
000012EC                           311  
000012EC                           312  *****************************END someROR ************************************
000012EC                           313  
000012EC                           314  
000012EC                           315  *****************************someROR ************************************
000012EC  4FF8 7000                316  someROR     LEA     STACK,SP            ; Load the SP
000012F0  41F9 00001316            317                      LEA     tableSomeROR, A0            ; Index into the table
000012F6  4280                     318                      CLR.L   D0                  ; Zero it
000012F8  303C EE82                319                      MOVE.W  #example,D0         ; We'll play with it here
000012FC  123C 0008                320                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001300  E360                     321                      ASL.W   D1,D0            
00001302  123C 000C                322                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001306  E268                     323                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001308                           324                                      ; and the rest are zeroed out)           
00001308  123C 0002                325                      MOVE.B  #2,D1           ; Shift 2 bits right
0000130C  E260                     326                      ASR.W   D1,D0 
0000130E                           327                      
0000130E  C0FC 0006                328                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001312  4EB0 0000                329                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001316                           330  
00001316  4EF9 00001328            331  tableSomeROR        JMP     RORcode00   *ROR.B
0000131C  4EF9 00001334            332                      JMP     RORcode01   *ROR.W                                      
00001322  4EF9 00001340            333                      JMP     RORcode10   *ROR.L
00001328                           334  
00001328  4EB9 00001CB8            335  RORcode00   JSR     ISRORB
0000132E  4EB9 00002080            336              JSR     DONE
00001334  4EB9 00001CCE            337  RORcode01   JSR     ISRORW  
0000133A  4EB9 00002080            338              JSR     DONE                                 
00001340  4EB9 00001CE4            339  RORcode10   JSR     ISRORL  
00001346  4EB9 00002080            340              JSR     DONE                    
0000134C                           341  
0000134C                           342  *****************************END someROR ************************************
0000134C                           343  
0000134C                           344  
0000134C                           345  *****************************  ROL_ROR ************************************
0000134C  4FF8 7000                346  ROL_ROR     LEA     STACK,SP            ; Load the SP
00001350  41F9 00001376            347                      LEA     tableROL_ROR, A0            ; Index into the table
00001356  4280                     348                      CLR.L   D0                  ; Zero it
00001358  303C EE82                349                      MOVE.W  #example,D0         ; We'll play with it here
0000135C  123C 0007                350                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001360  E360                     351                      ASL.W   D1,D0            
00001362  123C 000C                352                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001366  E268                     353                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001368                           354                                      ; and the rest are zeroed out)           
00001368  123C 0003                355                      MOVE.B  #3,D1           ; Shift 3 bits right
0000136C  E260                     356                      ASR.W   D1,D0 
0000136E                           357                      
0000136E  C0FC 0006                358                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001372  4EB0 0000                359                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001376                           360  
00001376  4EF9 00001382            361  tableROL_ROR            JMP    ROL_RORcode0   ; ROR
0000137C  4EF9 0000138C            362                          JMP    ROL_RORcode1   ; ROL                                 
00001382                           363  
00001382                           364    
00001382                           365  
00001382                           366  
00001382  4EB8 12EC                367  ROL_RORcode0   JSR     someROR
00001386  4EB9 00002080            368                 JSR     DONE
0000138C  4EB8 128C                369  ROL_RORcode1   JSR     someROL  
00001390  4EB9 00002080            370                 JSR     DONE                                 
00001396                           371  
00001396                           372     
00001396                           373  ***************************** END ROL_ROR ************************************
00001396                           374  
00001396                           375  
00001396                           376  *****************************  LSL_LSR ************************************
00001396  4FF8 7000                377  LSL_LSR     LEA     STACK,SP            ; Load the SP
0000139A  41F9 000013C0            378                      LEA     tableLSL_LSR, A0            ; Index into the table
000013A0  4280                     379                      CLR.L   D0                  ; Zero it
000013A2  303C EE82                380                      MOVE.W  #example,D0         ; We'll play with it here
000013A6  123C 0007                381                      MOVE.B  #7,D1           ; Shift 7 bits left 
000013AA  E360                     382                      ASL.W   D1,D0            
000013AC  123C 000C                383                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013B0  E268                     384                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013B2                           385                                      ; and the rest are zeroed out)           
000013B2  123C 0003                386                      MOVE.B  #3,D1           ; Shift 3 bits right
000013B6  E260                     387                      ASR.W   D1,D0 
000013B8                           388                      
000013B8  C0FC 0006                389                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013BC  4EB0 0000                390                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013C0                           391  
000013C0  4EF9 000013CC            392  tableLSL_LSR            JMP    LSL_LSRcode0   ; LSR
000013C6  4EF9 000013D6            393                          JMP    LSL_LSRcode1   ; LSL                                 
000013CC                           394  
000013CC                           395    
000013CC                           396  
000013CC                           397  
000013CC  4EB8 11CC                398  LSL_LSRcode0   JSR     someLSR
000013D0  4EB9 00002080            399                 JSR     DONE
000013D6  4EB8 122C                400  LSL_LSRcode1   JSR     someLSL  
000013DA  4EB9 00002080            401                 JSR     DONE                                 
000013E0                           402  
000013E0                           403     
000013E0                           404  ***************************** END LSL_LSR ************************************
000013E0                           405  
000013E0                           406  
000013E0                           407  *****************************  ASL_ASR ************************************
000013E0  4FF8 7000                408  ASL_ASR     LEA     STACK,SP            ; Load the SP
000013E4  41F9 0000140A            409                      LEA     tableASL_ASR, A0            ; Index into the table
000013EA  4280                     410                      CLR.L   D0                  ; Zero it
000013EC  303C EE82                411                      MOVE.W  #example,D0         ; We'll play with it here
000013F0  123C 0007                412                      MOVE.B  #7,D1           ; Shift 7 bits left 
000013F4  E360                     413                      ASL.W   D1,D0            
000013F6  123C 000C                414                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013FA  E268                     415                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013FC                           416                                      ; and the rest are zeroed out)           
000013FC  123C 0003                417                      MOVE.B  #3,D1           ; Shift 3 bits right
00001400  E260                     418                      ASR.W   D1,D0 
00001402                           419                      
00001402  C0FC 0006                420                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001406  4EB0 0000                421                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000140A                           422  
0000140A  4EF9 00001416            423  tableASL_ASR            JMP    ASL_ASRcode0   ; ASR
00001410  4EF9 00001420            424                          JMP    ASL_ASRcode1   ; ASL                                  
00001416                           425  
00001416                           426    
00001416                           427  
00001416                           428  
00001416  4EB8 110C                429  ASL_ASRcode0   JSR     someASR
0000141A  4EB9 00002080            430                 JSR     DONE
00001420  4EB8 116C                431  ASL_ASRcode1   JSR     someASL 
00001424  4EB9 00002080            432                 JSR     DONE                                 
0000142A                           433  
0000142A                           434     
0000142A                           435  ***************************** END ASL_ASR ************************************
0000142A                           436  
0000142A                           437  
0000142A                           438  *****************************  ROd_LSd_ASd ************************************
0000142A  4FF8 7000                439  ROd_LSd_ASd     LEA     STACK,SP            ; Load the SP
0000142E  41F9 00001454            440                      LEA     tableROd_LSd_ASd, A0            ; Index into the table
00001434  4280                     441                      CLR.L   D0                  ; Zero it
00001436  303C EE82                442                      MOVE.W  #example,D0         ; We'll play with it here
0000143A  123C 000B                443                      MOVE.B  #11,D1           ; Shift 11 bits left 
0000143E  E360                     444                      ASL.W   D1,D0            
00001440  123C 000C                445                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001444  E268                     446                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001446                           447                                      ; and the rest are zeroed out)           
00001446  123C 0002                448                      MOVE.B  #2,D1           ; Shift 2 bits right
0000144A  E260                     449                      ASR.W   D1,D0 
0000144C                           450                      
0000144C  C0FC 0006                451                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001450  4EB0 0000                452                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001454                           453  
00001454  4EF9 0000146C            454  tableROd_LSd_ASd        JMP    ROd_LSd_ASdcode00   ; ASL_ASR
0000145A  4EF9 00001476            455                          JMP    ROd_LSd_ASdcode01   ; LSL_LSR                                     
00001460  4EF9 00001480            456                          JMP    ROd_LSd_ASdcode10   
00001466  4EF9 00001484            457                          JMP    ROd_LSd_ASdcode11   ; ROL_ROR
0000146C                           458    
0000146C                           459  
0000146C                           460  
0000146C  4EB8 13E0                461  ROd_LSd_ASdcode00   JSR     ASL_ASR
00001470  4EB9 00002080            462                      JSR     DONE
00001476  4EB8 1396                463  ROd_LSd_ASdcode01   JSR     LSL_LSR   
0000147A  4EB9 00002080            464                      JSR     DONE                                 
00001480  4E72 2700                465  ROd_LSd_ASdcode10   STOP    #$2700     
00001484  4EB8 134C                466  ROd_LSd_ASdcode11   JSR     ROL_ROR
00001488  4EB9 00002080            467                      JSR     DONE 
0000148E                           468     
0000148E                           469  ***************************** END  ROd_LSd_ASd ************************************
0000148E                           470  
0000148E                           471  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
0000148E  4FF8 7000                472  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
00001492  41F9 000014B8            473                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
00001498  4280                     474                      CLR.L   D0                  ; Zero it
0000149A  303C EE82                475                      MOVE.W  #example,D0         ; We'll play with it here
0000149E  123C 0007                476                      MOVE.B  #7,D1           ; Shift 7 bits left 
000014A2  E360                     477                      ASL.W   D1,D0            
000014A4  123C 000C                478                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014A8  E268                     479                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014AA                           480                                      ; and the rest are zeroed out)           
000014AA  123C 0001                481                      MOVE.B  #1,D1           ; Shift 1 bits right
000014AE  E260                     482                      ASR.W   D1,D0 
000014B0                           483                      
000014B0  C0FC 0006                484                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014B4  4EB0 0000                485                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000014B8                           486  
000014B8  4EF9 000014E8            487  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
000014BE  4EF9 000014F4            488                                          JMP    ANDcode001   ; AND.W                                     
000014C4  4EF9 00001500            489                                          JMP    ANDcode010   ; AND.L
000014CA                           490                                   
000014CA  4EF9 0000150C            491                                          JMP    ANDcode011   
000014D0  4EF9 00001510            492                                          JMP    ANDcode100   ; AND.B
000014D6  4EF9 0000151C            493                                          JMP    ANDcode101   ; AND.W 
000014DC  4EF9 00001528            494                                          JMP    ANDcode110   ; AND.L
000014E2  4EF9 00001534            495                                          JMP    ANDcode111   ; MULS.W
000014E8                           496  
000014E8                           497  
000014E8  4EB9 00001D68            498  ANDcode000   JSR     ISANDB
000014EE  4EB9 00002080            499               JSR     DONE
000014F4  4EB9 00001D7E            500  ANDcode001   JSR     ISANDW  
000014FA  4EB9 00002080            501               JSR     DONE                                 
00001500  4EB9 00001D94            502  ANDcode010   JSR     ISANDL 
00001506  4EB9 00002080            503               JSR     DONE  
0000150C  4E72 2700                504  ANDcode011   STOP  #$2700
00001510  4EB9 00001D68            505  ANDcode100   JSR     ISANDB
00001516  4EB9 00002080            506               JSR     DONE
0000151C  4EB9 00001D7E            507  ANDcode101   JSR     ISANDW  
00001522  4EB9 00002080            508               JSR     DONE                                 
00001528  4EB9 00001D94            509  ANDcode110   JSR     ISANDL 
0000152E  4EB9 00002080            510               JSR     DONE 
00001534  4EB9 00001D52            511  ANDcode111   JSR     ISMULSW
0000153A  4EB9 00002080            512               JSR     DONE
00001540                           513     
00001540                           514  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001540                           515  
00001540                           516  *****************************  ADD_BorADD_WorADD_L ************************************
00001540  4FF8 7000                517  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
00001544  41F9 0000156A            518                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
0000154A  4280                     519                      CLR.L   D0                  ; Zero it
0000154C  303C EE82                520                      MOVE.W  #example,D0         ; We'll play with it here
00001550  123C 0007                521                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001554  E360                     522                      ASL.W   D1,D0            
00001556  123C 000C                523                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000155A  E268                     524                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000155C                           525                                      ; and the rest are zeroed out)           
0000155C  123C 0001                526                      MOVE.B  #1,D1           ; Shift 1 bits right
00001560  E260                     527                      ASR.W   D1,D0 
00001562                           528                      
00001562  C0FC 0006                529                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001566  4EB0 0000                530                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000156A                           531  
0000156A  4EF9 0000159A            532  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
00001570  4EF9 000015A6            533                                   JMP    ADDcode001   *ADD.W                                      
00001576  4EF9 000015B2            534                                   JMP    ADDcode010   *ADD.L
0000157C                           535                                   
0000157C  4EF9 000015BE            536                                   JMP    ADDcode011   *ADDA.W
00001582  4EF9 000015CA            537                                   JMP    ADDcode100   *ADD.B
00001588  4EF9 000015D6            538                                   JMP    ADDcode101   *ADD.W 
0000158E  4EF9 000015E2            539                                   JMP    ADDcode110   *ADD.L
00001594  4EF9 000015EE            540                                   JMP    ADDcode111   *ADDA.L
0000159A                           541  
0000159A                           542  
0000159A  4EB9 00001DD6            543  ADDcode000   JSR     ISADDB
000015A0  4EB9 00002080            544               JSR     DONE
000015A6  4EB9 00001DEC            545  ADDcode001   JSR     ISADDW  
000015AC  4EB9 00002080            546               JSR     DONE                                 
000015B2  4EB9 00001E02            547  ADDcode010   JSR     ISADDL 
000015B8  4EB9 00002080            548               JSR     DONE  
000015BE  4EB9 00001DAA            549  ADDcode011   JSR     ISADDAW
000015C4  4EB9 00002080            550               JSR     DONE
000015CA  4EB9 00001DD6            551  ADDcode100   JSR     ISADDB
000015D0  4EB9 00002080            552               JSR     DONE
000015D6  4EB9 00001DEC            553  ADDcode101   JSR     ISADDW  
000015DC  4EB9 00002080            554               JSR     DONE                                 
000015E2  4EB9 00001E02            555  ADDcode110   JSR     ISADDL 
000015E8  4EB9 00002080            556               JSR     DONE 
000015EE  4EB9 00001DC0            557  ADDcode111   JSR     ISADDAL
000015F4  4EB9 00002080            558               JSR     DONE
000015FA                           559     
000015FA                           560  ***************************** END  ADD_BorADD_WorADD_L ************************************
000015FA                           561  
000015FA                           562  *****************************  SUB_BorSUB_WorSUB_L ************************************
000015FA  4FF8 7000                563  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
000015FE  41F9 00001624            564                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
00001604  4280                     565                      CLR.L   D0                  ; Zero it
00001606  303C EE82                566                      MOVE.W  #example,D0         ; We'll play with it here
0000160A  123C 0007                567                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000160E  E360                     568                      ASL.W   D1,D0            
00001610  123C 000C                569                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001614  E268                     570                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001616                           571                                      ; and the rest are zeroed out)           
00001616  123C 0001                572                      MOVE.B  #1,D1           ; Shift 1 bits right
0000161A  E260                     573                      ASR.W   D1,D0 
0000161C                           574                      
0000161C  C0FC 0006                575                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001620  4EB0 0000                576                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001624                           577  
00001624  4EF9 0000164E            578  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
0000162A  4EF9 0000165A            579                                   JMP    SUBcode001   *SUB.W                                      
00001630  4EF9 00001666            580                                   JMP    SUBcode010   *SUB.L
00001636                           581                                   
00001636  4EF9 00001672            582                                   JMP    SUBcode011   
0000163C  4EF9 00001676            583                                   JMP    SUBcode100   *SUB.B
00001642  4EF9 00001682            584                                   JMP    SUBcode101   *SUB.W 
00001648  4EF9 0000168E            585                                   JMP    SUBcode110   *SUB.L
0000164E                           586     
0000164E                           587  
0000164E                           588  
0000164E  4EB9 00001E18            589  SUBcode000   JSR     ISSUBB
00001654  4EB9 00002080            590               JSR     DONE
0000165A  4EB9 00001E2E            591  SUBcode001   JSR     ISSUBW  
00001660  4EB9 00002080            592               JSR     DONE                                 
00001666  4EB9 00001E44            593  SUBcode010   JSR     ISSUBL 
0000166C  4EB9 00002080            594               JSR     DONE  
00001672  4E72 2700                595  SUBcode011   STOP  #$2700 
00001676  4EB9 00001E18            596  SUBcode100   JSR     ISSUBB
0000167C  4EB9 00002080            597               JSR     DONE
00001682  4EB9 00001E2E            598  SUBcode101   JSR     ISSUBW  
00001688  4EB9 00002080            599               JSR     DONE                                 
0000168E  4EB9 00001E44            600  SUBcode110   JSR     ISSUBL 
00001694  4EB9 00002080            601               JSR     DONE 
0000169A                           602     
0000169A                           603  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
0000169A                           604  
0000169A                           605  
0000169A                           606  ***************************** CMP_BorCMP_WorCMP_L ************************************
0000169A  4FF8 7000                607  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
0000169E  41F9 000016C4            608                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
000016A4  4280                     609                      CLR.L   D0                  ; Zero it
000016A6  303C EE82                610                      MOVE.W  #example,D0         ; We'll play with it here
000016AA  123C 0007                611                      MOVE.B  #7,D1           ; Shift 7 bits left 
000016AE  E360                     612                      ASL.W   D1,D0            
000016B0  123C 000C                613                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000016B4  E268                     614                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000016B6                           615                                      ; and the rest are zeroed out)           
000016B6  123C 0001                616                      MOVE.B  #1,D1           ; Shift 1 bits right
000016BA  E260                     617                      ASR.W   D1,D0 
000016BC                           618                      
000016BC  C0FC 0006                619                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016C0  4EB0 0000                620                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000016C4                           621  
000016C4  4EF9 000016D6            622  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
000016CA  4EF9 000016E2            623                                   JMP    CMPcode001   *CMP.W                                      
000016D0  4EF9 000016EE            624                                   JMP    CMPcode010   *CMP.L
000016D6                           625  
000016D6  4EB9 00001E5A            626  CMPcode000   JSR     ISCMPB
000016DC  4EB9 00002080            627              JSR     DONE
000016E2  4EB9 00001E70            628  CMPcode001   JSR     ISCMPW  
000016E8  4EB9 00002080            629              JSR     DONE                                 
000016EE  4EB9 00001E86            630  CMPcode010   JSR     ISCMPL 
000016F4  4EB9 00002080            631              JSR     DONE                    
000016FA                           632  
000016FA                           633  ***************************** END CMP_BorCMP_WorCMP_L ************************************
000016FA                           634  
000016FA                           635  
000016FA                           636  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
000016FA  4FF8 7000                637  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
000016FE  41F9 00001724            638                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
00001704  4280                     639                      CLR.L   D0                  ; Zero it
00001706  303C EE82                640                      MOVE.W  #example,D0         ; We'll play with it here
0000170A  123C 0008                641                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000170E  E360                     642                      ASL.W   D1,D0            
00001710  123C 000C                643                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001714  E268                     644                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001716                           645                                      ; and the rest are zeroed out)           
00001716  123C 0002                646                      MOVE.B  #2,D1           ; Shift 2 bits right
0000171A  E260                     647                      ASR.W   D1,D0 
0000171C                           648                      
0000171C  C0FC 0006                649                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001720  4EB0 0000                650                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001724                           651  
00001724  4EF9 00001736            652  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
0000172A  4EF9 00001742            653                                      JMP     ADDQcode01   *ADDQ.W                                      
00001730  4EF9 0000174E            654                                      JMP     ADDQcode10   *ADDQ.L
00001736                           655  
00001736  4EB9 00001E9C            656  ADDQcode00   JSR     ISADDQB
0000173C  4EB9 00002080            657              JSR     DONE
00001742  4EB9 00001EB2            658  ADDQcode01   JSR     ISADDQW  
00001748  4EB9 00002080            659              JSR     DONE                                 
0000174E  4EB9 00001EC8            660  ADDQcode10   JSR     ISADDQL 
00001754  4EB9 00002080            661              JSR     DONE                    
0000175A                           662  
0000175A                           663  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
0000175A                           664  
0000175A                           665  
0000175A                           666  *****************************someCLR ************************************
0000175A  4FF8 7000                667  someCLR     LEA     STACK,SP            ; Load the SP
0000175E  41F9 00001784            668                      LEA     tableSomeCLR, A0            ; Index into the table
00001764  4280                     669                      CLR.L   D0                  ; Zero it
00001766  303C EE82                670                      MOVE.W  #example,D0         ; We'll play with it here
0000176A  123C 0008                671                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000176E  E360                     672                      ASL.W   D1,D0            
00001770  123C 000C                673                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001774  E268                     674                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001776                           675                                      ; and the rest are zeroed out)           
00001776  123C 0002                676                      MOVE.B  #2,D1           ; Shift 2 bits right
0000177A  E260                     677                      ASR.W   D1,D0 
0000177C                           678                      
0000177C  C0FC 0006                679                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001780  4EB0 0000                680                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001784                           681  
00001784  4EF9 00001796            682  tableSomeCLR        JMP     CLRcode00   *CLR.B
0000178A  4EF9 000017A2            683                      JMP     CLRcode01   *CLR.W                                      
00001790  4EF9 000017AE            684                      JMP     CLRcode10   *CLR.L
00001796                           685  
00001796  4EB9 00001EF4            686  CLRcode00   JSR     ISCLRB
0000179C  4EB9 00002080            687              JSR     DONE
000017A2  4EB9 00001F0A            688  CLRcode01   JSR     ISCLRW  
000017A8  4EB9 00002080            689              JSR     DONE                                 
000017AE  4EB9 00001F20            690  CLRcode10   JSR     ISCLRL  
000017B4  4EB9 00002080            691              JSR     DONE                    
000017BA                           692  
000017BA                           693  *****************************END someCLR ************************************
000017BA                           694  
000017BA                           695  *****************************NOPorCLRorRTSorJSR ************************************
000017BA  4FF8 7000                696  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
000017BE  41F9 000017F2            697                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
000017C4  4280                     698                      CLR.L   D0                  ; Zero it
000017C6  303C EE82                699                      MOVE.W  #example,D0         ; We'll play with it here
000017CA                           700                      
000017CA  323C 4E71                701                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
000017CE  B240                     702                      CMP.W   D0, D1
000017D0  6700 008C                703                      BEQ     NOPcommand
000017D4                           704   
000017D4  323C 4E75                705                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
000017D8  B240                     706                      CMP.W   D0, D1
000017DA  6700 0076                707                      BEQ     RTScommand
000017DE                           708    
000017DE  123C 0004                709                      MOVE.B  #4,D1           ; Shift 4 bits left 
000017E2  E360                     710                      ASL.W   D1,D0            
000017E4  123C 000C                711                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000017E8  E268                     712                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000017EA                           713                                      ; and the rest are zeroed out)           
000017EA                           714    
000017EA                           715                      
000017EA  C0FC 0006                716                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000017EE  4EB0 0000                717                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000017F2                           718  
000017F2  4EF9 0000186A            719  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
000017F8  4EF9 0000186E            720                             JMP     JSRorCLRcode0001
000017FE  4EF9 00001872            721                             JMP     JSRorCLRcode0010   
00001804  4EF9 0000187C            722                             JMP     JSRorCLRcode0011
0000180A  4EF9 00001880            723                             JMP     JSRorCLRcode0100
00001810  4EF9 00001884            724                             JMP     JSRorCLRcode0101
00001816  4EF9 00001888            725                             JMP     JSRorCLRcode0110
0000181C  4EF9 0000188C            726                             JMP     JSRorCLRcode0111
00001822  4EF9 00001890            727                             JMP     JSRorCLRcode1000
00001828  4EF9 00001894            728                             JMP     JSRorCLRcode1001
0000182E  4EF9 00001898            729                             JMP     JSRorCLRcode1010
00001834  4EF9 0000189C            730                             JMP     JSRorCLRcode1011
0000183A  4EF9 000018A0            731                             JMP     JSRorCLRcode1100
00001840  4EF9 000018A4            732                             JMP     JSRorCLRcode1101
00001846  4EF9 000018A8            733                             JMP     JSRorCLRcode1110
0000184C  4EF9 000018B4            734                             JMP     JSRorCLRcode1111
00001852                           735  
00001852  4EB9 00001F8E            736  RTScommand          JSR     ISRTS
00001858  4EB9 00002080            737                      JSR     DONE
0000185E  4EB9 00001FBA            738  NOPcommand          JSR     ISNOP 
00001864  4EB9 00002080            739                      JSR     DONE                                                                  
0000186A  4E72 2700                740  JSRorCLRcode0000     STOP  #$2700
0000186E  4E72 2700                741  JSRorCLRcode0001     STOP  #$2700
00001872  4EB8 175A                742  JSRorCLRcode0010    JSR      someCLR
00001876  4EB9 00002080            743                      JSR     DONE
0000187C  4E72 2700                744  JSRorCLRcode0011     STOP  #$2700
00001880  4E72 2700                745  JSRorCLRcode0100     STOP  #$2700
00001884  4E72 2700                746  JSRorCLRcode0101     STOP  #$2700
00001888  4E72 2700                747  JSRorCLRcode0110     STOP  #$2700
0000188C  4E72 2700                748  JSRorCLRcode0111     STOP  #$2700
00001890  4E72 2700                749  JSRorCLRcode1000     STOP  #$2700
00001894  4E72 2700                750  JSRorCLRcode1001     STOP  #$2700
00001898  4E72 2700                751  JSRorCLRcode1010     STOP  #$2700
0000189C  4E72 2700                752  JSRorCLRcode1011     STOP  #$2700
000018A0  4E72 2700                753  JSRorCLRcode1100     STOP  #$2700
000018A4  4E72 2700                754  JSRorCLRcode1101     STOP  #$2700
000018A8  4EB9 00001F78            755  JSRorCLRcode1110    JSR     ISJSR
000018AE  4EB9 00002080            756                      JSR     DONE
000018B4  4E72 2700                757  JSRorCLRcode1111     STOP  #$2700
000018B8                           758  
000018B8                           759  *****************************END NOPorCLRorRTSorJSR ************************************
000018B8                           760  
000018B8                           761  
000018B8                           762  *****************************someMOVEM ************************************
000018B8  4FF8 7000                763  someMOVEM     LEA     STACK,SP            ; Load the SP
000018BC  41F9 000018E2            764                      LEA     tableSomeMOVEM, A0            ; Index into the table
000018C2  4280                     765                      CLR.L   D0                  ; Zero it
000018C4  303C EE82                766                      MOVE.W  #example,D0         ; We'll play with it here
000018C8  123C 0009                767                      MOVE.B  #9,D1           ; Shift 9 bits left 
000018CC  E360                     768                      ASL.W   D1,D0            
000018CE  123C 000C                769                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000018D2  E268                     770                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000018D4                           771                                      ; and the rest are zeroed out)           
000018D4  123C 0003                772                      MOVE.B  #3,D1           ; Shift 3 bits right
000018D8  E260                     773                      ASR.W   D1,D0  
000018DA                           774                      
000018DA  C0FC 0006                775                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000018DE  4EB0 0000                776                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000018E2                           777  
000018E2  4EF9 000018EE            778  tableSomeMOVEM    JMP     MOVEMcode0   ;MOVEM.W
000018E8  4EF9 000018FA            779                    JMP     MOVEMcode1   ;MOVEM.L                                      
000018EE                           780                        
000018EE                           781  
000018EE                           782                            
000018EE  4EB9 00001F4C            783  MOVEMcode0         JSR     ISMOVEMW
000018F4  4EB9 00002080            784                      JSR     DONE
000018FA  4EB9 00001F36            785  MOVEMcode1         JSR     ISMOVEML
00001900  4EB9 00002080            786                      JSR     DONE
00001906                           787  
00001906                           788  *****************************END someMOVEM ************************************
00001906                           789  
00001906                           790  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001906  4FF8 7000                791  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
0000190A  41F9 00001930            792                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001910  4280                     793                      CLR.L   D0                  ; Zero it
00001912  303C EE82                794                      MOVE.W  #example,D0         ; We'll play with it here
00001916  123C 0007                795                      MOVE.B  #7,D1           ; Shift 7 bits right 
0000191A  E260                     796                      ASR.W   D1,D0 
0000191C                           797  
0000191C  123C 000D                798                      MOVE.B  #13,D1           ; Shift 13 bits left 
00001920  E360                     799                      ASL.W   D1,D0            
00001922  123C 000C                800                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001926  E268                     801                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001928                           802                                      ; and the rest are zeroed out)         
00001928                           803    
00001928                           804                      
00001928  C0FC 0006                805                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000192C  4EB0 0000                806                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001930                           807  
00001930  4EF9 0000198A            808  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
00001936  4EF9 00001990            809                                    JMP     LOTScode0001
0000193C  4EF9 00001994            810                                    JMP     LOTScode0010
00001942  4EF9 0000199E            811                                    JMP     LOTScode0011
00001948  4EF9 000019A2            812                                    JMP     LOTScode0100
0000194E  4EF9 000019A6            813                                    JMP     LOTScode0101
00001954  4EF9 000019AA            814                                    JMP     LOTScode0110
0000195A  4EF9 000019B6            815                                    JMP     LOTScode0111
00001960  4EF9 000019BA            816                                    JMP     LOTScode1000
00001966  4EF9 000019C4            817                                    JMP     LOTScode1001
0000196C  4EF9 000019C8            818                                    JMP     LOTScode1010
00001972  4EF9 000019D2            819                                    JMP     LOTScode1011
00001978  4EF9 000019D6            820                                    JMP     LOTScode1100
0000197E  4EF9 000019DA            821                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001984  4EF9 000019EA            822                                    JMP     LOTScode1111                           
0000198A                           823                        
0000198A                           824  
0000198A                           825                            
0000198A  4EB9 00001D3C            826  LOTScode0000        JSR   ISMULSL
00001990  4E72 2700                827  LOTScode0001        STOP  #$2700
00001994  4EB8 18B8                828  LOTScode0010        JSR    someMOVEM
00001998  4EB9 00002080            829                      JSR    DONE
0000199E  4E72 2700                830  LOTScode0011        STOP  #$2700                   
000019A2  4E72 2700                831  LOTScode0100        STOP  #$2700
000019A6  4E72 2700                832  LOTScode0101        STOP  #$2700
000019AA  4EB9 00001F62            833  LOTScode0110        JSR    ISLEA  
000019B0  4EB9 00002080            834                      JSR    DONE 
000019B6  4E72 2700                835  LOTScode0111        STOP  #$2700 
000019BA  4EB8 17BA                836  LOTScode1000        JSR    NOPorCLRorRTSorJSR
000019BE  4EB9 00002080            837                      JSR    DONE
000019C4  4E72 2700                838  LOTScode1001        STOP  #$2700               
000019C8  4EB8 17BA                839  LOTScode1010        JSR    NOPorCLRorRTSorJSR
000019CC  4EB9 00002080            840                      JSR    DONE
000019D2  4E72 2700                841  LOTScode1011        STOP  #$2700                   
000019D6  4E72 2700                842  LOTScode1100        STOP  #$2700
000019DA  4E72 2700                843  LOTScode1101        STOP  #$2700
000019DE  4EB9 00001F62            844  LOTScode1110        JSR    ISLEA 
000019E4  4EB9 00002080            845                      JSR    DONE
000019EA  4E72 2700                846  LOTScode1111        STOP  #$2700                
000019EE                           847                     
000019EE                           848  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000019EE                           849  
000019EE                           850  
000019EE                           851  *****************************ADDI_BorADDI_WorADDI_L ************************************
000019EE  4FF8 7000                852  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
000019F2  41F9 00001A12            853                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
000019F8  4280                     854                      CLR.L   D0                  ; Zero it
000019FA  303C EE82                855                      MOVE.W  #example,D0         ; We'll play with it here
000019FE  123C 0007                856                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001A02  E360                     857                      ASL.W   D1,D0            
00001A04  123C 000D                858                      MOVE.B  #13,D1           
00001A08  E260                     859                      ASR.W   D1,D0             
00001A0A                           860    
00001A0A                           861                      
00001A0A  C0FC 0006                862                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A0E  4EB0 0000                863                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001A12                           864  
00001A12  4EF9 00001A24            865  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001A18  4EF9 00001A30            866                                 JMP     ADDIWcode01
00001A1E  4EF9 00001A3C            867                                 JMP     ADDILcode10
00001A24                           868  
00001A24                           869                            
00001A24  4EB9 0000206A            870  ADDIBcode00        JSR     ISADDIB
00001A2A  4EB9 00002080            871                      JSR    DONE
00001A30  4EB9 0000203E            872  ADDIWcode01        JSR     ISADDIW
00001A36  4EB9 00002080            873                      JSR    DONE
00001A3C  4EB9 00002054            874  ADDILcode10        JSR     ISADDIL
00001A42  4EB9 00002080            875                      JSR    DONE
00001A48                           876  
00001A48                           877  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001A48                           878  
00001A48                           879  
00001A48                           880  
00001A48                           881  
00001A48                           882  *****************************MOVEA_LorMOVE_L ************************************
00001A48  4FF8 7000                883  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001A4C  41F9 00001A6C            884                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001A52  4280                     885                      CLR.L   D0                  ; Zero it
00001A54  303C EE82                886                      MOVE.W  #example,D0         ; We'll play with it here
00001A58  123C 0007                887                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001A5C  E360                     888                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001A5E  123C 000D                889                      MOVE.B  #13,D1           ; Shift 13 bits right
00001A62  E260                     890                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001A64                           891    
00001A64                           892                      
00001A64  C0FC 0006                893                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A68  4EB0 0000                894                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001A6C                           895  
00001A6C  4EF9 00001A9C            896  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001A72  4EF9 00001AA8            897                          JMP     MOVEAcode001
00001A78  4EF9 00001AB4            898                          JMP     MOVEcode010
00001A7E  4EF9 00001AC0            899                          JMP     MOVEcode011
00001A84  4EF9 00001ACC            900                          JMP     MOVEcode100
00001A8A  4EF9 00001AD8            901                          JMP     MOVEcode101
00001A90  4EF9 00001AE4            902                          JMP     MOVEcode110
00001A96  4EF9 00001AF0            903                          JMP     MOVEcode111
00001A9C                           904                            
00001A9C  4EB9 00001FFC            905  MOVEcode000     JSR     ISMOVEL
00001AA2  4EB9 00002080            906                  JSR    DONE
00001AA8  4EB9 00002012            907  MOVEAcode001    JSR     ISMOVEAL
00001AAE  4EB9 00002080            908                  JSR    DONE
00001AB4  4EB9 00001FFC            909  MOVEcode010     JSR     ISMOVEL
00001ABA  4EB9 00002080            910                  JSR    DONE
00001AC0  4EB9 00001FFC            911  MOVEcode011     JSR     ISMOVEL
00001AC6  4EB9 00002080            912                  JSR    DONE
00001ACC  4EB9 00001FFC            913  MOVEcode100     JSR     ISMOVEL
00001AD2  4EB9 00002080            914                  JSR    DONE
00001AD8  4EB9 00001FFC            915  MOVEcode101     JSR     ISMOVEL
00001ADE  4EB9 00002080            916                  JSR    DONE
00001AE4  4EB9 00001FFC            917  MOVEcode110     JSR     ISMOVEL
00001AEA  4EB9 00002080            918                  JSR    DONE
00001AF0  4EB9 00001FFC            919  MOVEcode111     JSR     ISMOVEL 
00001AF6  4EB9 00002080            920                  JSR    DONE
00001AFC                           921  *****************************END MOVEA_LorMOVE_L ************************************
00001AFC                           922  
00001AFC                           923  *****************************MOVEA_WorMOVE_W ************************************
00001AFC  4FF8 7000                924  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001B00  41F9 00001B20            925                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001B06  4280                     926                      CLR.L   D0                  ; Zero it
00001B08  303C EE82                927                      MOVE.W  #example,D0         ; We'll play with it here
00001B0C  123C 0007                928                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001B10  E360                     929                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001B12  123C 000D                930                      MOVE.B  #13,D1           ; Shift 13 bits right
00001B16  E260                     931                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001B18                           932    
00001B18                           933                      
00001B18  C0FC 0006                934                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B1C  4EB0 0000                935                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001B20                           936  
00001B20  4EF9 00001B50            937  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001B26  4EF9 00001B5C            938                          JMP     MOVEAWcode001
00001B2C  4EF9 00001B68            939                          JMP     MOVEWcode010
00001B32  4EF9 00001B74            940                          JMP     MOVEWcode011
00001B38  4EF9 00001B80            941                          JMP     MOVEWcode100
00001B3E  4EF9 00001B8C            942                          JMP     MOVEWcode101
00001B44  4EF9 00001B98            943                          JMP     MOVEWcode110
00001B4A  4EF9 00001BA4            944                          JMP     MOVEWcode111
00001B50                           945                            
00001B50  4EB9 00001FD0            946  MOVEWcode000     JSR     ISMOVEW
00001B56  4EB9 00002080            947                  JSR    DONE
00001B5C  4EB9 00001FE6            948  MOVEAWcode001    JSR     ISMOVEAW
00001B62  4EB9 00002080            949                  JSR    DONE
00001B68  4EB9 00001FD0            950  MOVEWcode010     JSR     ISMOVEW
00001B6E  4EB9 00002080            951                  JSR    DONE
00001B74  4EB9 00001FD0            952  MOVEWcode011     JSR     ISMOVEW
00001B7A  4EB9 00002080            953                  JSR    DONE
00001B80  4EB9 00001FD0            954  MOVEWcode100     JSR     ISMOVEW
00001B86  4EB9 00002080            955                  JSR    DONE
00001B8C  4EB9 00001FD0            956  MOVEWcode101     JSR     ISMOVEW
00001B92  4EB9 00002080            957                  JSR    DONE
00001B98  4EB9 00001FD0            958  MOVEWcode110     JSR     ISMOVEW
00001B9E  4EB9 00002080            959                  JSR    DONE
00001BA4  4EB9 00001FD0            960  MOVEWcode111     JSR     ISMOVEW 
00001BAA  4EB9 00002080            961                  JSR    DONE
00001BB0                           962  *****************************END MOVEA_WorMOVE_W ************************************
00001BB0                           963  
00001BB0  48A7 FFFF                964  ISASRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001BB4  43F9 000021C3            965              LEA MESSAGEASRB, A1         
00001BBA  103C 000E                966              MOVE.B  #14, D0
00001BBE  4E4F                     967              TRAP    #15
00001BC0                           968     
00001BC0  4C9F FFFF                969              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001BC4  4E75                     970              RTS
00001BC6                           971  
00001BC6  48A7 FFFF                972  ISASRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001BCA  43F9 000021CB            973              LEA MESSAGEASRW, A1         
00001BD0  103C 000E                974              MOVE.B  #14, D0
00001BD4  4E4F                     975              TRAP    #15
00001BD6                           976     
00001BD6  4C9F FFFF                977              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001BDA  4E75                     978              RTS
00001BDC                           979              
00001BDC  48A7 FFFF                980  ISASRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001BE0  43F9 000021D3            981              LEA MESSAGEASRL, A1         
00001BE6  103C 000E                982              MOVE.B  #14, D0
00001BEA  4E4F                     983              TRAP    #15
00001BEC                           984     
00001BEC  4C9F FFFF                985              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001BF0  4E75                     986              RTS 
00001BF2                           987  
00001BF2  48A7 FFFF                988  ISASLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001BF6  43F9 000021DB            989              LEA MESSAGEASLB, A1         
00001BFC  103C 000E                990              MOVE.B  #14, D0
00001C00  4E4F                     991              TRAP    #15
00001C02                           992     
00001C02  4C9F FFFF                993              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C06  4E75                     994              RTS
00001C08                           995  
00001C08  48A7 FFFF                996  ISASLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C0C  43F9 000021E3            997              LEA MESSAGEASLW, A1         
00001C12  103C 000E                998              MOVE.B  #14, D0
00001C16  4E4F                     999              TRAP    #15
00001C18                          1000     
00001C18  4C9F FFFF               1001              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C1C  4E75                    1002              RTS
00001C1E                          1003              
00001C1E  48A7 FFFF               1004  ISASLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C22  43F9 000021EB           1005              LEA MESSAGEASLL, A1         
00001C28  103C 000E               1006              MOVE.B  #14, D0
00001C2C  4E4F                    1007              TRAP    #15
00001C2E                          1008     
00001C2E  4C9F FFFF               1009              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C32  4E75                    1010              RTS 
00001C34                          1011              
00001C34  48A7 FFFF               1012  ISLSRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C38  43F9 00002223           1013              LEA MESSAGELSRB, A1         
00001C3E  103C 000E               1014              MOVE.B  #14, D0
00001C42  4E4F                    1015              TRAP    #15
00001C44                          1016     
00001C44  4C9F FFFF               1017              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C48  4E75                    1018              RTS
00001C4A                          1019  
00001C4A  48A7 FFFF               1020  ISLSRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C4E  43F9 0000222B           1021              LEA MESSAGELSRW, A1         
00001C54  103C 000E               1022              MOVE.B  #14, D0
00001C58  4E4F                    1023              TRAP    #15
00001C5A                          1024     
00001C5A  4C9F FFFF               1025              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C5E  4E75                    1026              RTS
00001C60                          1027              
00001C60  48A7 FFFF               1028  ISLSRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C64  43F9 00002233           1029              LEA MESSAGELSRL, A1         
00001C6A  103C 000E               1030              MOVE.B  #14, D0
00001C6E  4E4F                    1031              TRAP    #15
00001C70                          1032     
00001C70  4C9F FFFF               1033              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C74  4E75                    1034              RTS 
00001C76                          1035  
00001C76  48A7 FFFF               1036  ISLSLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C7A  43F9 0000223B           1037              LEA MESSAGELSLB, A1         
00001C80  103C 000E               1038              MOVE.B  #14, D0
00001C84  4E4F                    1039              TRAP    #15
00001C86                          1040     
00001C86  4C9F FFFF               1041              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C8A  4E75                    1042              RTS
00001C8C                          1043  
00001C8C  48A7 FFFF               1044  ISLSLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C90  43F9 00002243           1045              LEA MESSAGELSLW, A1        
00001C96  103C 000E               1046              MOVE.B  #14, D0
00001C9A  4E4F                    1047              TRAP    #15
00001C9C                          1048     
00001C9C  4C9F FFFF               1049              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CA0  4E75                    1050              RTS
00001CA2                          1051              
00001CA2  48A7 FFFF               1052  ISLSLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CA6  43F9 0000224B           1053              LEA MESSAGELSLL, A1         
00001CAC  103C 000E               1054              MOVE.B  #14, D0
00001CB0  4E4F                    1055              TRAP    #15
00001CB2                          1056     
00001CB2  4C9F FFFF               1057              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CB6  4E75                    1058              RTS 
00001CB8                          1059  
00001CB8  48A7 FFFF               1060  ISRORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CBC  43F9 000021F3           1061              LEA MESSAGERORB, A1         
00001CC2  103C 000E               1062              MOVE.B  #14, D0
00001CC6  4E4F                    1063              TRAP    #15
00001CC8                          1064     
00001CC8  4C9F FFFF               1065              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CCC  4E75                    1066              RTS
00001CCE                          1067  
00001CCE  48A7 FFFF               1068  ISRORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CD2  43F9 000021FB           1069              LEA MESSAGERORW, A1         
00001CD8  103C 000E               1070              MOVE.B  #14, D0
00001CDC  4E4F                    1071              TRAP    #15
00001CDE                          1072     
00001CDE  4C9F FFFF               1073              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CE2  4E75                    1074              RTS
00001CE4                          1075              
00001CE4  48A7 FFFF               1076  ISRORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CE8  43F9 00002203           1077              LEA MESSAGERORL, A1         
00001CEE  103C 000E               1078              MOVE.B  #14, D0
00001CF2  4E4F                    1079              TRAP    #15
00001CF4                          1080     
00001CF4  4C9F FFFF               1081              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CF8  4E75                    1082              RTS 
00001CFA                          1083  
00001CFA  48A7 FFFF               1084  ISROLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CFE  43F9 0000220B           1085              LEA MESSAGEROLB, A1         
00001D04  103C 000E               1086              MOVE.B  #14, D0
00001D08  4E4F                    1087              TRAP    #15
00001D0A                          1088     
00001D0A  4C9F FFFF               1089              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D0E  4E75                    1090              RTS
00001D10                          1091  
00001D10  48A7 FFFF               1092  ISROLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D14  43F9 00002213           1093              LEA MESSAGEROLW, A1         
00001D1A  103C 000E               1094              MOVE.B  #14, D0
00001D1E  4E4F                    1095              TRAP    #15
00001D20                          1096     
00001D20  4C9F FFFF               1097              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D24  4E75                    1098              RTS
00001D26                          1099              
00001D26  48A7 FFFF               1100  ISROLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D2A  43F9 0000221B           1101              LEA MESSAGEROLL, A1         
00001D30  103C 000E               1102              MOVE.B  #14, D0
00001D34  4E4F                    1103              TRAP    #15
00001D36                          1104     
00001D36  4C9F FFFF               1105              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D3A  4E75                    1106              RTS 
00001D3C                          1107  
00001D3C  48A7 FFFF               1108  ISMULSL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D40  43F9 000021BA           1109              LEA MESSAGEMULSL, A1         *OPCODE is MULS.L
00001D46  103C 000E               1110              MOVE.B  #14, D0
00001D4A  4E4F                    1111              TRAP    #15
00001D4C                          1112     
00001D4C  4C9F FFFF               1113              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D50  4E75                    1114              RTS
00001D52                          1115  
00001D52  48A7 FFFF               1116  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D56  43F9 000021B1           1117              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001D5C  103C 000E               1118              MOVE.B  #14, D0
00001D60  4E4F                    1119              TRAP    #15
00001D62                          1120     
00001D62  4C9F FFFF               1121              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D66  4E75                    1122              RTS
00001D68                          1123  
00001D68  48A7 FFFF               1124  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D6C  43F9 00002199           1125              LEA MESSAGEANDB, A1         *OPCODE is AND.B
00001D72  103C 000E               1126              MOVE.B  #14, D0
00001D76  4E4F                    1127              TRAP    #15
00001D78                          1128     
00001D78  4C9F FFFF               1129              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D7C  4E75                    1130              RTS
00001D7E                          1131  
00001D7E  48A7 FFFF               1132  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D82  43F9 000021A1           1133              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001D88  103C 000E               1134              MOVE.B  #14, D0
00001D8C  4E4F                    1135              TRAP    #15
00001D8E                          1136     
00001D8E  4C9F FFFF               1137              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D92  4E75                    1138              RTS
00001D94                          1139              
00001D94  48A7 FFFF               1140  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D98  43F9 000021A9           1141              LEA MESSAGEANDL, A1         *OPCODE is AND.L
00001D9E  103C 000E               1142              MOVE.B  #14, D0
00001DA2  4E4F                    1143              TRAP    #15
00001DA4                          1144     
00001DA4  4C9F FFFF               1145              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DA8  4E75                    1146              RTS  
00001DAA                          1147  
00001DAA  48A7 FFFF               1148  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DAE  43F9 0000217D           1149              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001DB4  103C 000E               1150              MOVE.B  #14, D0
00001DB8  4E4F                    1151              TRAP    #15
00001DBA                          1152     
00001DBA  4C9F FFFF               1153              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DBE  4E75                    1154              RTS
00001DC0                          1155              
00001DC0  48A7 FFFF               1156  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DC4  43F9 00002186           1157              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001DCA  103C 000E               1158              MOVE.B  #14, D0
00001DCE  4E4F                    1159              TRAP    #15
00001DD0                          1160     
00001DD0  4C9F FFFF               1161              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DD4  4E75                    1162              RTS 
00001DD6                          1163  
00001DD6  48A7 FFFF               1164  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DDA  43F9 00002165           1165              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
00001DE0  103C 000E               1166              MOVE.B  #14, D0
00001DE4  4E4F                    1167              TRAP    #15
00001DE6                          1168     
00001DE6  4C9F FFFF               1169              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DEA  4E75                    1170              RTS
00001DEC                          1171  
00001DEC  48A7 FFFF               1172  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DF0  43F9 0000216D           1173              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
00001DF6  103C 000E               1174              MOVE.B  #14, D0
00001DFA  4E4F                    1175              TRAP    #15
00001DFC                          1176     
00001DFC  4C9F FFFF               1177              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E00  4E75                    1178              RTS
00001E02                          1179              
00001E02  48A7 FFFF               1180  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E06  43F9 00002175           1181              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
00001E0C  103C 000E               1182              MOVE.B  #14, D0
00001E10  4E4F                    1183              TRAP    #15
00001E12                          1184     
00001E12  4C9F FFFF               1185              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E16  4E75                    1186              RTS  
00001E18                          1187  
00001E18  48A7 FFFF               1188  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E1C  43F9 0000214D           1189              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
00001E22  103C 000E               1190              MOVE.B  #14, D0
00001E26  4E4F                    1191              TRAP    #15
00001E28                          1192     
00001E28  4C9F FFFF               1193              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E2C  4E75                    1194              RTS
00001E2E                          1195  
00001E2E  48A7 FFFF               1196  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E32  43F9 00002155           1197              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00001E38  103C 000E               1198              MOVE.B  #14, D0
00001E3C  4E4F                    1199              TRAP    #15
00001E3E                          1200     
00001E3E  4C9F FFFF               1201              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E42  4E75                    1202              RTS
00001E44                          1203              
00001E44  48A7 FFFF               1204  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E48  43F9 0000215D           1205              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
00001E4E  103C 000E               1206              MOVE.B  #14, D0
00001E52  4E4F                    1207              TRAP    #15
00001E54                          1208     
00001E54  4C9F FFFF               1209              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E58  4E75                    1210              RTS  
00001E5A                          1211  
00001E5A  48A7 FFFF               1212  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E5E  43F9 00002135           1213              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00001E64  103C 000E               1214              MOVE.B  #14, D0
00001E68  4E4F                    1215              TRAP    #15
00001E6A                          1216     
00001E6A  4C9F FFFF               1217              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E6E  4E75                    1218              RTS
00001E70                          1219  
00001E70  48A7 FFFF               1220  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E74  43F9 0000213D           1221              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001E7A  103C 000E               1222              MOVE.B  #14, D0
00001E7E  4E4F                    1223              TRAP    #15
00001E80                          1224     
00001E80  4C9F FFFF               1225              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E84  4E75                    1226              RTS
00001E86                          1227              
00001E86  48A7 FFFF               1228  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E8A  43F9 00002145           1229              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
00001E90  103C 000E               1230              MOVE.B  #14, D0
00001E94  4E4F                    1231              TRAP    #15
00001E96                          1232     
00001E96  4C9F FFFF               1233              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E9A  4E75                    1234              RTS    
00001E9C                          1235  
00001E9C  48A7 FFFF               1236  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EA0  43F9 0000211A           1237              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00001EA6  103C 000E               1238              MOVE.B  #14, D0
00001EAA  4E4F                    1239              TRAP    #15
00001EAC                          1240     
00001EAC  4C9F FFFF               1241              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EB0  4E75                    1242              RTS
00001EB2                          1243  
00001EB2  48A7 FFFF               1244  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EB6  43F9 00002123           1245              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00001EBC  103C 000E               1246              MOVE.B  #14, D0
00001EC0  4E4F                    1247              TRAP    #15
00001EC2                          1248     
00001EC2  4C9F FFFF               1249              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EC6  4E75                    1250              RTS
00001EC8                          1251              
00001EC8  48A7 FFFF               1252  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001ECC  43F9 0000212C           1253              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
00001ED2  103C 000E               1254              MOVE.B  #14, D0
00001ED6  4E4F                    1255              TRAP    #15
00001ED8                          1256     
00001ED8  4C9F FFFF               1257              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EDC  4E75                    1258              RTS            
00001EDE                          1259              
00001EDE  48A7 FFFF               1260  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EE2  43F9 0000218F           1261              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00001EE8  103C 000E               1262              MOVE.B  #14, D0
00001EEC  4E4F                    1263              TRAP    #15
00001EEE                          1264     
00001EEE  4C9F FFFF               1265              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EF2  4E75                    1266              RTS
00001EF4                          1267  
00001EF4  48A7 FFFF               1268  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EF8  43F9 00002102           1269              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00001EFE  103C 000E               1270              MOVE.B  #14, D0
00001F02  4E4F                    1271              TRAP    #15
00001F04                          1272     
00001F04  4C9F FFFF               1273              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F08  4E75                    1274              RTS
00001F0A                          1275  
00001F0A  48A7 FFFF               1276  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F0E  43F9 0000210A           1277              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
00001F14  103C 000E               1278              MOVE.B  #14, D0
00001F18  4E4F                    1279              TRAP    #15
00001F1A                          1280     
00001F1A  4C9F FFFF               1281              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F1E  4E75                    1282              RTS
00001F20                          1283  
00001F20  48A7 FFFF               1284  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F24  43F9 00002112           1285              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
00001F2A  103C 000E               1286              MOVE.B  #14, D0
00001F2E  4E4F                    1287              TRAP    #15
00001F30                          1288     
00001F30  4C9F FFFF               1289              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F34  4E75                    1290              RTS
00001F36                          1291              
00001F36  48A7 FFFF               1292  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F3A  43F9 000020D6           1293              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
00001F40  103C 000E               1294              MOVE.B  #14, D0
00001F44  4E4F                    1295              TRAP    #15
00001F46                          1296     
00001F46  4C9F FFFF               1297              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F4A  4E75                    1298              RTS
00001F4C                          1299  
00001F4C  48A7 FFFF               1300  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F50  43F9 000020E0           1301              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
00001F56  103C 000E               1302              MOVE.B  #14, D0
00001F5A  4E4F                    1303              TRAP    #15
00001F5C                          1304     
00001F5C  4C9F FFFF               1305              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F60  4E75                    1306              RTS  
00001F62                          1307  
00001F62  48A7 FFFF               1308  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F66  43F9 000020FC           1309              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
00001F6C  103C 000E               1310              MOVE.B  #14, D0
00001F70  4E4F                    1311              TRAP    #15
00001F72                          1312     
00001F72  4C9F FFFF               1313              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F76  4E75                    1314              RTS                          ; Exit subroutine
00001F78                          1315  
00001F78  48A7 FFFF               1316  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F7C  43F9 000020EA           1317              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
00001F82  103C 000E               1318              MOVE.B  #14, D0
00001F86  4E4F                    1319              TRAP    #15
00001F88  4C9F FFFF               1320              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F8C  4E75                    1321              RTS                          ; Exit subroutine
00001F8E                          1322              
00001F8E  48A7 FFFF               1323  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F92  43F9 000020F6           1324              LEA MESSAGERTS, A1         *OPCODE is RTS
00001F98  103C 000E               1325              MOVE.B  #14, D0
00001F9C  4E4F                    1326              TRAP    #15
00001F9E  4C9F FFFF               1327              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FA2  4E75                    1328              RTS  
00001FA4                          1329  
00001FA4  48A7 FFFF               1330  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FA8  43F9 000020F0           1331              LEA MESSAGECLR, A1         *OPCODE is CLR
00001FAE  103C 000E               1332              MOVE.B  #14, D0
00001FB2  4E4F                    1333              TRAP    #15
00001FB4  4C9F FFFF               1334              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FB8  4E75                    1335              RTS  
00001FBA                          1336              
00001FBA  48A7 FFFF               1337  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FBE  43F9 00002086           1338              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
00001FC4  103C 000E               1339              MOVE.B  #14, D0
00001FC8  4E4F                    1340              TRAP    #15
00001FCA  4C9F FFFF               1341              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FCE  4E75                    1342              RTS                          ; Exit subroutine
00001FD0                          1343           
00001FD0  48A7 FFFF               1344  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FD4  43F9 0000208C           1345              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00001FDA  103C 000E               1346              MOVE.B  #14, D0
00001FDE  4E4F                    1347              TRAP    #15
00001FE0                          1348     
00001FE0  4C9F FFFF               1349              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FE4  4E75                    1350              RTS                          ; Exit subroutine
00001FE6                          1351              
00001FE6  48A7 FFFF               1352  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FEA  43F9 000020CC           1353              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
00001FF0  103C 000E               1354              MOVE.B  #14, D0
00001FF4  4E4F                    1355              TRAP    #15
00001FF6                          1356     
00001FF6  4C9F FFFF               1357              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FFA  4E75                    1358              RTS                          ; Exit subroutine
00001FFC                          1359              
00001FFC  48A7 FFFF               1360  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002000  43F9 00002095           1361              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
00002006  103C 000E               1362              MOVE.B  #14, D0
0000200A  4E4F                    1363              TRAP    #15
0000200C                          1364              
0000200C  4C9F FFFF               1365              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002010  4E75                    1366              RTS                          ; Exit subroutine
00002012                          1367              
00002012  48A7 FFFF               1368  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002016  43F9 000020C2           1369              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
0000201C  103C 000E               1370              MOVE.B  #14, D0
00002020  4E4F                    1371              TRAP    #15
00002022                          1372              
00002022  4C9F FFFF               1373              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002026  4E75                    1374              RTS                          ; Exit subroutine
00002028                          1375         
00002028  48A7 FFFF               1376  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000202C  43F9 0000209E           1377              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
00002032  103C 000E               1378              MOVE.B  #14, D0
00002036  4E4F                    1379              TRAP    #15
00002038                          1380              
00002038  4C9F FFFF               1381              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000203C  4E75                    1382              RTS                          ; Exit subroutine
0000203E                          1383           
0000203E  48A7 FFFF               1384  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002042  43F9 000020A7           1385              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
00002048  103C 000E               1386              MOVE.B  #14, D0
0000204C  4E4F                    1387              TRAP    #15
0000204E                          1388              
0000204E  4C9F FFFF               1389              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002052  4E75                    1390              RTS                          ; Exit subroutine
00002054                          1391              
00002054  48A7 FFFF               1392  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002058  43F9 000020B0           1393              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
0000205E  103C 000E               1394              MOVE.B  #14, D0
00002062  4E4F                    1395              TRAP    #15
00002064                          1396              
00002064  4C9F FFFF               1397              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002068  4E75                    1398              RTS                          ; Exit subroutine
0000206A                          1399                  
0000206A  48A7 FFFF               1400  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000206E  43F9 000020B9           1401              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
00002074  103C 000E               1402              MOVE.B  #14, D0
00002078  4E4F                    1403              TRAP    #15
0000207A                          1404              
0000207A  4C9F FFFF               1405              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000207E  4E75                    1406              RTS                          ; Exit subroutine
00002080                          1407                        
00002080  103C 0009               1408  DONE        MOVE.B      #9, D0
00002084  4E4F                    1409              TRAP        #15
00002086                          1410  
00002086  =0000000D               1411  CR  EQU     $0D 
00002086  =0000000A               1412  LF  EQU     $0A
00002086= 4E 4F 50 0D 0A 00       1413  MESSAGENOP DC.B    'NOP',CR,LF, 0    
0000208C                          1414      
0000208C= 4D 4F 56 45 2E 57 ...   1415  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
00002095= 4D 4F 56 45 2E 4C ...   1416  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
0000209E= 4D 4F 56 45 2E 42 ...   1417  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
000020A7                          1418  
000020A7= 41 44 44 49 2E 57 ...   1419  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
000020B0= 41 44 44 49 2E 4C ...   1420  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
000020B9= 41 44 44 49 2E 42 ...   1421  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
000020C2                          1422  
000020C2= 4D 4F 56 45 41 2E ...   1423  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
000020CC= 4D 4F 56 45 41 2E ...   1424  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
000020D6                          1425  
000020D6= 4D 4F 56 45 4D 2E ...   1426  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
000020E0= 4D 4F 56 45 4D 2E ...   1427  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
000020EA                          1428  
000020EA= 4A 53 52 0D 0A 00       1429  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
000020F0                          1430  
000020F0= 43 4C 52 0D 0A 00       1431  MESSAGECLR DC.B    'CLR',CR,LF, 0
000020F6                          1432  
000020F6= 52 54 53 0D 0A 00       1433  MESSAGERTS DC.B    'RTS',CR,LF, 0
000020FC                          1434  
000020FC= 4C 45 41 0D 0A 00       1435  MESSAGELEA DC.B    'LEA',CR,LF, 0
00002102                          1436  
00002102= 43 4C 52 2E 42 0D ...   1437  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
0000210A= 43 4C 52 2E 57 0D ...   1438  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00002112= 43 4C 52 2E 4C 0D ...   1439  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
0000211A                          1440  
0000211A= 41 44 44 51 2E 42 ...   1441  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
00002123= 41 44 44 51 2E 57 ...   1442  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
0000212C= 41 44 44 51 2E 4C ...   1443  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
00002135                          1444  
00002135= 43 4D 50 2E 42 0D ...   1445  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
0000213D= 43 4D 50 2E 57 0D ...   1446  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
00002145= 43 4D 50 2E 4C 0D ...   1447  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
0000214D                          1448  
0000214D= 53 55 42 2E 42 0D ...   1449  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
00002155= 53 55 42 2E 57 0D ...   1450  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
0000215D= 53 55 42 2E 4C 0D ...   1451  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
00002165                          1452  
00002165= 41 44 44 2E 42 0D ...   1453  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0 
0000216D= 41 44 44 2E 57 0D ...   1454  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
00002175= 41 44 44 2E 4C 0D ...   1455  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
0000217D                          1456  
0000217D= 41 44 44 41 2E 57 ...   1457  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
00002186= 41 44 44 41 2E 4C ...   1458  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
0000218F                          1459  
0000218F= 4D 4F 56 45 51 2E ...   1460  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
00002199                          1461  
00002199= 41 4E 44 2E 42 0D ...   1462  MESSAGEANDB DC.B    'AND.B',CR,LF, 0 
000021A1= 41 4E 44 2E 57 0D ...   1463  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
000021A9= 41 4E 44 2E 4C 0D ...   1464  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
000021B1                          1465  
000021B1= 4D 55 4C 53 2E 57 ...   1466  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
000021BA= 4D 55 4C 53 2E 4C ...   1467  MESSAGEMULSL DC.B    'MULS.L',CR,LF, 0
000021C3                          1468  
000021C3= 41 53 52 2E 42 0D ...   1469  MESSAGEASRB DC.B    'ASR.B',CR,LF, 0 
000021CB= 41 53 52 2E 57 0D ...   1470  MESSAGEASRW DC.B    'ASR.W',CR,LF, 0
000021D3= 41 53 52 2E 4C 0D ...   1471  MESSAGEASRL DC.B    'ASR.L',CR,LF, 0
000021DB                          1472  
000021DB= 41 53 4C 2E 42 0D ...   1473  MESSAGEASLB DC.B    'ASL.B',CR,LF, 0 
000021E3= 41 53 4C 2E 57 0D ...   1474  MESSAGEASLW DC.B    'ASL.W',CR,LF, 0
000021EB= 41 53 4C 2E 4C 0D ...   1475  MESSAGEASLL DC.B    'ASL.L',CR,LF, 0
000021F3                          1476  
000021F3= 52 4F 52 2E 42 0D ...   1477  MESSAGERORB DC.B    'ROR.B',CR,LF, 0 
000021FB= 52 4F 52 2E 57 0D ...   1478  MESSAGERORW DC.B    'ROR.W',CR,LF, 0
00002203= 52 4F 52 2E 4C 0D ...   1479  MESSAGERORL DC.B    'ROR.L',CR,LF, 0
0000220B                          1480  
0000220B= 52 4F 4C 2E 42 0D ...   1481  MESSAGEROLB DC.B    'ROL.B',CR,LF, 0 
00002213= 52 4F 4C 2E 57 0D ...   1482  MESSAGEROLW DC.B    'ROL.W',CR,LF, 0
0000221B= 52 4F 4C 2E 4C 0D ...   1483  MESSAGEROLL DC.B    'ROL.L',CR,LF, 0
00002223                          1484  
00002223= 4C 53 52 2E 42 0D ...   1485  MESSAGELSRB DC.B    'LSR.B',CR,LF, 0 
0000222B= 4C 53 52 2E 57 0D ...   1486  MESSAGELSRW DC.B    'LSR.W',CR,LF, 0
00002233= 4C 53 52 2E 4C 0D ...   1487  MESSAGELSRL DC.B    'LSR.L',CR,LF, 0
0000223B                          1488  
0000223B= 4C 53 4C 2E 42 0D ...   1489  MESSAGELSLB DC.B    'LSL.B',CR,LF, 0 
00002243= 4C 53 4C 2E 57 0D ...   1490  MESSAGELSLW DC.B    'LSL.W',CR,LF, 0
0000224B= 4C 53 4C 2E 4C 0D ...   1491  MESSAGELSLL DC.B    'LSL.L',CR,LF, 0
00002253                          1492  
00002254  FFFF FFFF               1493      SIMHALT             ; halt simulator
00002258                          1494  
00002258                          1495  * Put variables and constants here
00002258                          1496  
00002258                          1497      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          159A
ADDCODE001          15A6
ADDCODE010          15B2
ADDCODE011          15BE
ADDCODE100          15CA
ADDCODE101          15D6
ADDCODE110          15E2
ADDCODE111          15EE
ADDIBCODE00         1A24
ADDILCODE10         1A3C
ADDIWCODE01         1A30
ADDI_BORADDI_WORADDI_L  19EE
ADDQCODE00          1736
ADDQCODE01          1742
ADDQCODE10          174E
ADDQ_BORADDQ_WORADDQ_L  16FA
ADD_BORADD_WORADD_L  1540
ANDCODE000          14E8
ANDCODE001          14F4
ANDCODE010          1500
ANDCODE011          150C
ANDCODE100          1510
ANDCODE101          151C
ANDCODE110          1528
ANDCODE111          1534
AND_BORAND_WORAND_LORMULS_W  148E
ASLCODE00           11A8
ASLCODE01           11B4
ASLCODE10           11C0
ASL_ASR             13E0
ASL_ASRCODE0        1416
ASL_ASRCODE1        1420
ASRCODE00           1148
ASRCODE01           1154
ASRCODE10           1160
CLRCODE00           1796
CLRCODE01           17A2
CLRCODE10           17AE
CMPCODE000          16D6
CMPCODE001          16E2
CMPCODE010          16EE
CMP_BORCMP_WORCMP_L  169A
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10C8
CODE1010            10D4
CODE1011            10D8
CODE1100            10E4
CODE1101            10F0
CODE1110            10FC
CODE1111            1108
CR                  D
DONE                2080
EXAMPLE             EE82
ISADDAL             1DC0
ISADDAW             1DAA
ISADDB              1DD6
ISADDIB             206A
ISADDIL             2054
ISADDIW             203E
ISADDL              1E02
ISADDQB             1E9C
ISADDQL             1EC8
ISADDQW             1EB2
ISADDW              1DEC
ISANDB              1D68
ISANDL              1D94
ISANDW              1D7E
ISASLB              1BF2
ISASLL              1C1E
ISASLW              1C08
ISASRB              1BB0
ISASRL              1BDC
ISASRW              1BC6
ISCLR               1FA4
ISCLRB              1EF4
ISCLRL              1F20
ISCLRW              1F0A
ISCMPB              1E5A
ISCMPL              1E86
ISCMPW              1E70
ISJSR               1F78
ISLEA               1F62
ISLSLB              1C76
ISLSLL              1CA2
ISLSLW              1C8C
ISLSRB              1C34
ISLSRL              1C60
ISLSRW              1C4A
ISMOVEAL            2012
ISMOVEAW            1FE6
ISMOVEB             2028
ISMOVEL             1FFC
ISMOVEML            1F36
ISMOVEMW            1F4C
ISMOVEQL            1EDE
ISMOVEW             1FD0
ISMULSL             1D3C
ISMULSW             1D52
ISNOP               1FBA
ISROLB              1CFA
ISROLL              1D26
ISROLW              1D10
ISRORB              1CB8
ISRORL              1CE4
ISRORW              1CCE
ISRTS               1F8E
ISSUBB              1E18
ISSUBL              1E44
ISSUBW              1E2E
JSRORCLRCODE0000    186A
JSRORCLRCODE0001    186E
JSRORCLRCODE0010    1872
JSRORCLRCODE0011    187C
JSRORCLRCODE0100    1880
JSRORCLRCODE0101    1884
JSRORCLRCODE0110    1888
JSRORCLRCODE0111    188C
JSRORCLRCODE1000    1890
JSRORCLRCODE1001    1894
JSRORCLRCODE1010    1898
JSRORCLRCODE1011    189C
JSRORCLRCODE1100    18A0
JSRORCLRCODE1101    18A4
JSRORCLRCODE1110    18A8
JSRORCLRCODE1111    18B4
LF                  A
LOTSCODE0000        198A
LOTSCODE0001        1990
LOTSCODE0010        1994
LOTSCODE0011        199E
LOTSCODE0100        19A2
LOTSCODE0101        19A6
LOTSCODE0110        19AA
LOTSCODE0111        19B6
LOTSCODE1000        19BA
LOTSCODE1001        19C4
LOTSCODE1010        19C8
LOTSCODE1011        19D2
LOTSCODE1100        19D6
LOTSCODE1101        19DA
LOTSCODE1110        19DE
LOTSCODE1111        19EA
LSLCODE00           1268
LSLCODE01           1274
LSLCODE10           1280
LSL_LSR             1396
LSL_LSRCODE0        13CC
LSL_LSRCODE1        13D6
LSRCODE00           1208
LSRCODE01           1214
LSRCODE10           1220
MESSAGEADDAL        2186
MESSAGEADDAW        217D
MESSAGEADDB         2165
MESSAGEADDIB        20B9
MESSAGEADDIL        20B0
MESSAGEADDIW        20A7
MESSAGEADDL         2175
MESSAGEADDQB        211A
MESSAGEADDQL        212C
MESSAGEADDQW        2123
MESSAGEADDW         216D
MESSAGEANDB         2199
MESSAGEANDL         21A9
MESSAGEANDW         21A1
MESSAGEASLB         21DB
MESSAGEASLL         21EB
MESSAGEASLW         21E3
MESSAGEASRB         21C3
MESSAGEASRL         21D3
MESSAGEASRW         21CB
MESSAGECLR          20F0
MESSAGECLRB         2102
MESSAGECLRL         2112
MESSAGECLRW         210A
MESSAGECMPB         2135
MESSAGECMPL         2145
MESSAGECMPW         213D
MESSAGEJSR          20EA
MESSAGELEA          20FC
MESSAGELSLB         223B
MESSAGELSLL         224B
MESSAGELSLW         2243
MESSAGELSRB         2223
MESSAGELSRL         2233
MESSAGELSRW         222B
MESSAGEMOVEAL       20C2
MESSAGEMOVEAW       20CC
MESSAGEMOVEB        209E
MESSAGEMOVEL        2095
MESSAGEMOVEML       20D6
MESSAGEMOVEMW       20E0
MESSAGEMOVEQL       218F
MESSAGEMOVEW        208C
MESSAGEMULSL        21BA
MESSAGEMULSW        21B1
MESSAGENOP          2086
MESSAGEROLB         220B
MESSAGEROLL         221B
MESSAGEROLW         2213
MESSAGERORB         21F3
MESSAGERORL         2203
MESSAGERORW         21FB
MESSAGERTS          20F6
MESSAGESUBB         214D
MESSAGESUBL         215D
MESSAGESUBW         2155
MOVEACODE001        1AA8
MOVEAWCODE001       1B5C
MOVEA_LORMOVE_L     1A48
MOVEA_WORMOVE_W     1AFC
MOVECODE000         1A9C
MOVECODE010         1AB4
MOVECODE011         1AC0
MOVECODE100         1ACC
MOVECODE101         1AD8
MOVECODE110         1AE4
MOVECODE111         1AF0
MOVEMCODE0          18EE
MOVEMCODE1          18FA
MOVEWCODE000        1B50
MOVEWCODE010        1B68
MOVEWCODE011        1B74
MOVEWCODE100        1B80
MOVEWCODE101        1B8C
MOVEWCODE110        1B98
MOVEWCODE111        1BA4
NOPCOMMAND          185E
NOPORCLRORRTSORJSR  17BA
NOP_MOVEM_LEA_JSR_CLR_RTS  1906
ROD_LSD_ASD         142A
ROD_LSD_ASDCODE00   146C
ROD_LSD_ASDCODE01   1476
ROD_LSD_ASDCODE10   1480
ROD_LSD_ASDCODE11   1484
ROLCODE00           12C8
ROLCODE01           12D4
ROLCODE10           12E0
ROL_ROR             134C
ROL_RORCODE0        1382
ROL_RORCODE1        138C
RORCODE00           1328
RORCODE01           1334
RORCODE10           1340
RTSCOMMAND          1852
SHIFT               C
SOMEASL             116C
SOMEASR             110C
SOMECLR             175A
SOMELSL             122C
SOMELSR             11CC
SOMEMOVEM           18B8
SOMEROL             128C
SOMEROR             12EC
STACK               7000
START               1000
SUBCODE000          164E
SUBCODE001          165A
SUBCODE010          1666
SUBCODE011          1672
SUBCODE100          1676
SUBCODE101          1682
SUBCODE110          168E
SUB_BORSUB_WORSUB_L  15FA
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1A12
TABLEADDQ_BORADDQ_WORADDQ_L  1724
TABLEADD_BORADD_WORADD_L  156A
TABLEAND_BORAND_WORAND_LORMULS_W  14B8
TABLEASL_ASR        140A
TABLECMP_BORCMP_WORCMP_L  16C4
TABLELSL_LSR        13C0
TABLEMOVEA_LORMOVE_L  1A6C
TABLEMOVEA_WORMOVE_W  1B20
TABLENOPORCLRORRTSORJSR  17F2
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  1930
TABLEROD_LSD_ASD    1454
TABLEROL_ROR        1376
TABLESOMEASL        1196
TABLESOMEASR        1136
TABLESOMECLR        1784
TABLESOMELSL        1256
TABLESOMELSR        11F6
TABLESOMEMOVEM      18E2
TABLESOMEROL        12B6
TABLESOMEROR        1316
TABLESUB_BORSUB_WORSUB_L  1624
