00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/11/2016 8:15:43 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001   ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100    ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100    ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100    ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100    ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101       ; 0000 0110 0000 0101 = ADDI.B D5, D7
00001000                            23  *example EQU     %0000011001000101       ; 0000 0110 0100 0101 = ADDI.W D5, D7
00001000                            24  *example EQU     %0000011010000101       ; 0000 0110 1000 0101 = ADDI.L D5, D7
00001000                            25  *example EQU     %0100100111010101      ; 0100 1001 1101 0101 = LEA D5, (A5)
00001000                            26  *example EQU     %0100111001110101  ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111  ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111  ; CLR.B  = 0100 0010 0000 0111
00001000  =00004247                 29  example EQU     %0100001001000111  ; CLR.W  = 0100 0010 0100 0111
00001000                            30  
00001000                            31  *example EQU     %0100111010010110  ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  
00001000  =0000000C                 33  shift   EQU     12                  ; Shift 12 bits 
00001000                            34  
00001000                            35  * Program starts here
00001000                            36  
00001000  4FF8 7000                 37          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E             38          LEA     table,A0            ; Index into the table
0000100A  4280                      39          CLR.L   D0                  ; Zero it
0000100C  303C 4247                 40          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                 41          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                      42          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                            43                                      ; and the rest are zeroed out)
00001016  C0FC 0006                 44          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                 45          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                            46  
0000101E  4EF9 0000107E             47  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084             48          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090             49          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096             50          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C             51          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS
0000103C  4EF9 000010A8             52          JMP     code0101
00001042  4EF9 000010AC             53          JMP     code0110
00001048  4EF9 000010B0             54          JMP     code0111
0000104E  4EF9 000010B4             55          JMP     code1000
00001054  4EF9 000010B8             56          JMP     code1001
0000105A  4EF9 000010BC             57          JMP     code1010
00001060  4EF9 000010C0             58          JMP     code1011
00001066  4EF9 000010C4             59          JMP     code1100
0000106C  4EF9 000010C8             60          JMP     code1101
00001072  4EF9 000010CC             61          JMP     code1110
00001078  4EF9 000010D0             62          JMP     code1111
0000107E                            63         
0000107E                            64  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                            65  
0000107E  4EB9 00001360             66  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 00001656             67  code0001 JSR   ISMOVEB
0000108A  4EB9 000016AE             68           JSR   DONE
00001090  4EB9 000013BA             69  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 0000146E             70  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 0000127A             71  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 000016AE             72           JSR    DONE
000010A8  4E72 2700                 73  code0101 STOP  #$2700
000010AC  4E72 2700                 74  code0110 STOP  #$2700
000010B0  4E72 2700                 75  code0111 STOP  #$2700
000010B4  4E72 2700                 76  code1000 STOP  #$2700
000010B8  4E72 2700                 77  code1001 STOP  #$2700
000010BC  4E72 2700                 78  code1010 STOP  #$2700
000010C0  4E72 2700                 79  code1011 STOP  #$2700
000010C4  4E72 2700                 80  code1100 STOP  #$2700
000010C8  4E72 2700                 81  code1101 STOP  #$2700
000010CC  4E72 2700                 82  code1110 STOP  #$2700
000010D0  4E72 2700                 83  code1111 STOP  #$2700
000010D4                            84  
000010D4                            85  *****************************someCLR ************************************
000010D4  4FF8 7000                 86  someCLR     LEA     STACK,SP            ; Load the SP
000010D8  41F9 000010FE             87                      LEA     tableSomeCLR, A0            ; Index into the table
000010DE  4280                      88                      CLR.L   D0                  ; Zero it
000010E0  303C 4247                 89                      MOVE.W  #example,D0         ; We'll play with it here
000010E4  123C 0008                 90                      MOVE.B  #8,D1           ; Shift 9 bits left 
000010E8  E360                      91                      ASL.W   D1,D0            
000010EA  123C 000C                 92                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000010EE  E268                      93                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000010F0                            94                                      ; and the rest are zeroed out)           
000010F0  123C 0002                 95                      MOVE.B  #2,D1           ; Shift 2 bits right
000010F4  E260                      96                      ASR.W   D1,D0 
000010F6                            97                      
000010F6  C0FC 0006                 98                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000010FA  4EB0 0000                 99                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000010FE                           100  
000010FE  4EF9 00001110            101  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001104  4EF9 0000111C            102                      JMP     CLRcode01   *CLR.W                                      
0000110A  4EF9 00001128            103                      JMP     CLRcode10   *CLR.L
00001110                           104  
00001110  4EB9 00001522            105  CLRcode00   JSR     ISCLRB
00001116  4EB9 000016AE            106              JSR     DONE
0000111C  4EB9 00001538            107  CLRcode01   JSR     ISCLRW  
00001122  4EB9 000016AE            108              JSR     DONE                                 
00001128  4EB9 0000154E            109  CLRcode10   JSR     ISCLRL  
0000112E  4EB9 000016AE            110              JSR     DONE                    
00001134                           111  
00001134                           112  *****************************END someCLR ************************************
00001134                           113  
00001134                           114  *****************************NOPorCLRorRTSorJSR ************************************
00001134  4FF8 7000                115  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
00001138  41F9 0000116C            116                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
0000113E  4280                     117                      CLR.L   D0                  ; Zero it
00001140  303C 4247                118                      MOVE.W  #example,D0         ; We'll play with it here
00001144                           119                      
00001144  323C 4E71                120                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
00001148  B240                     121                      CMP.W   D0, D1
0000114A  6700 008C                122                      BEQ     NOPcommand
0000114E                           123   
0000114E  323C 4E75                124                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
00001152  B240                     125                      CMP.W   D0, D1
00001154  6700 0076                126                      BEQ     RTScommand
00001158                           127    
00001158  123C 0004                128                      MOVE.B  #4,D1           ; Shift 4 bits left 
0000115C  E360                     129                      ASL.W   D1,D0            
0000115E  123C 000C                130                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001162  E268                     131                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001164                           132                                      ; and the rest are zeroed out)           
00001164                           133    
00001164                           134                      
00001164  C0FC 0006                135                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001168  4EB0 0000                136                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000116C                           137  
0000116C  4EF9 000011E4            138  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
00001172  4EF9 000011E8            139                             JMP     JSRorCLRcode0001
00001178  4EF9 000011EC            140                             JMP     JSRorCLRcode0010   
0000117E  4EF9 000011F6            141                             JMP     JSRorCLRcode0011
00001184  4EF9 000011FA            142                             JMP     JSRorCLRcode0100
0000118A  4EF9 000011FE            143                             JMP     JSRorCLRcode0101
00001190  4EF9 00001202            144                             JMP     JSRorCLRcode0110
00001196  4EF9 00001206            145                             JMP     JSRorCLRcode0111
0000119C  4EF9 0000120A            146                             JMP     JSRorCLRcode1000
000011A2  4EF9 0000120E            147                             JMP     JSRorCLRcode1001
000011A8  4EF9 00001212            148                             JMP     JSRorCLRcode1010
000011AE  4EF9 00001216            149                             JMP     JSRorCLRcode1011
000011B4  4EF9 0000121A            150                             JMP     JSRorCLRcode1100
000011BA  4EF9 0000121E            151                             JMP     JSRorCLRcode1101
000011C0  4EF9 00001222            152                             JMP     JSRorCLRcode1110
000011C6  4EF9 0000122E            153                             JMP     JSRorCLRcode1111
000011CC                           154  
000011CC  4EB9 000015BC            155  RTScommand          JSR     ISRTS
000011D2  4EB9 000016AE            156                      JSR     DONE
000011D8  4EB9 000015E8            157  NOPcommand          JSR     ISNOP 
000011DE  4EB9 000016AE            158                      JSR     DONE                                                                  
000011E4  4E72 2700                159  JSRorCLRcode0000     STOP  #$2700
000011E8  4E72 2700                160  JSRorCLRcode0001     STOP  #$2700
000011EC  4EB8 10D4                161  JSRorCLRcode0010    JSR      someCLR
000011F0  4EB9 000016AE            162                      JSR     DONE
000011F6  4E72 2700                163  JSRorCLRcode0011     STOP  #$2700
000011FA  4E72 2700                164  JSRorCLRcode0100     STOP  #$2700
000011FE  4E72 2700                165  JSRorCLRcode0101     STOP  #$2700
00001202  4E72 2700                166  JSRorCLRcode0110     STOP  #$2700
00001206  4E72 2700                167  JSRorCLRcode0111     STOP  #$2700
0000120A  4E72 2700                168  JSRorCLRcode1000     STOP  #$2700
0000120E  4E72 2700                169  JSRorCLRcode1001     STOP  #$2700
00001212  4E72 2700                170  JSRorCLRcode1010     STOP  #$2700
00001216  4E72 2700                171  JSRorCLRcode1011     STOP  #$2700
0000121A  4E72 2700                172  JSRorCLRcode1100     STOP  #$2700
0000121E  4E72 2700                173  JSRorCLRcode1101     STOP  #$2700
00001222  4EB9 000015A6            174  JSRorCLRcode1110    JSR     ISJSR
00001228  4EB9 000016AE            175                      JSR     DONE
0000122E  4E72 2700                176  JSRorCLRcode1111     STOP  #$2700
00001232                           177  
00001232                           178  *****************************END NOPorCLRorRTSorJSR ************************************
00001232                           179  
00001232                           180  
00001232                           181  *****************************someMOVEM ************************************
00001232  4FF8 7000                182  someMOVEM     LEA     STACK,SP            ; Load the SP
00001236  41F9 00001256            183                      LEA     tableSomeMOVEM, A0            ; Index into the table
0000123C  4280                     184                      CLR.L   D0                  ; Zero it
0000123E  303C 4247                185                      MOVE.W  #example,D0         ; We'll play with it here
00001242  123C 0009                186                      MOVE.B  #9,D1           ; Shift 9 bits left 
00001246  E360                     187                      ASL.W   D1,D0            
00001248  123C 000C                188                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000124C  E268                     189                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000124E                           190                                      ; and the rest are zeroed out)           
0000124E                           191    
0000124E                           192                      
0000124E  C0FC 0006                193                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001252  4EB0 0000                194                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001256                           195  
00001256  4EF9 00001262            196  tableSomeMOVEM    JMP     MOVEMcode00   ;MOVEM.W
0000125C  4EF9 0000126E            197                    JMP     MOVEMcode01   ;MOVEM.L                                      
00001262                           198                        
00001262                           199  
00001262                           200                            
00001262  4EB9 0000157A            201  MOVEMcode00         JSR     ISMOVEMW
00001268  4EB9 000016AE            202                      JSR     DONE
0000126E  4EB9 00001564            203  MOVEMcode01         JSR     ISMOVEML
00001274  4EB9 000016AE            204                      JSR     DONE
0000127A                           205  
0000127A                           206  *****************************END someMOVEM ************************************
0000127A                           207  
0000127A                           208  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
0000127A  4FF8 7000                209  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
0000127E  41F9 000012A4            210                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001284  4280                     211                      CLR.L   D0                  ; Zero it
00001286  303C 4247                212                      MOVE.W  #example,D0         ; We'll play with it here
0000128A  123C 0007                213                      MOVE.B  #7,D1           ; Shift 7 bits right 
0000128E  E260                     214                      ASR.W   D1,D0 
00001290                           215  
00001290  123C 000D                216                      MOVE.B  #13,D1           ; Shift 6 bits left 
00001294  E360                     217                      ASL.W   D1,D0            
00001296  123C 000C                218                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000129A  E268                     219                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000129C                           220                                      ; and the rest are zeroed out)         
0000129C                           221    
0000129C                           222                      
0000129C  C0FC 0006                223                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012A0  4EB0 0000                224                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012A4                           225  
000012A4  4EF9 000012FE            226  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
000012AA  4EF9 00001302            227                                    JMP     LOTScode0001
000012B0  4EF9 00001306            228                                    JMP     LOTScode0010
000012B6  4EF9 00001310            229                                    JMP     LOTScode0011
000012BC  4EF9 00001314            230                                    JMP     LOTScode0100
000012C2  4EF9 00001318            231                                    JMP     LOTScode0101
000012C8  4EF9 0000131C            232                                    JMP     LOTScode0110
000012CE  4EF9 00001328            233                                    JMP     LOTScode0111
000012D4  4EF9 0000132C            234                                    JMP     LOTScode1000
000012DA  4EF9 00001336            235                                    JMP     LOTScode1001
000012E0  4EF9 0000133A            236                                    JMP     LOTScode1010
000012E6  4EF9 00001344            237                                    JMP     LOTScode1011
000012EC  4EF9 00001348            238                                    JMP     LOTScode1100
000012F2  4EF9 0000134C            239                                    JMP     LOTScode1101                               JMP     LOTScode1110
000012F8  4EF9 0000135C            240                                    JMP     LOTScode1111                           
000012FE                           241                        
000012FE                           242  
000012FE                           243                            
000012FE  4E72 2700                244  LOTScode0000       STOP  #$2700
00001302  4E72 2700                245  LOTScode0001       STOP  #$2700
00001306  4EB8 1232                246  LOTScode0010        JSR    someMOVEM
0000130A  4EB9 000016AE            247                     JSR    DONE
00001310  4E72 2700                248  LOTScode0011       STOP  #$2700                   
00001314  4E72 2700                249  LOTScode0100        STOP  #$2700
00001318  4E72 2700                250  LOTScode0101        STOP  #$2700
0000131C  4EB9 00001590            251  LOTScode0110        JSR    ISLEA  
00001322  4EB9 000016AE            252                     JSR    DONE 
00001328  4E72 2700                253  LOTScode0111        STOP  #$2700 
0000132C  4EB8 1134                254  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001330  4EB9 000016AE            255                     JSR    DONE
00001336  4E72 2700                256  LOTScode1001        STOP  #$2700               
0000133A  4EB8 1134                257  LOTScode1010        JSR    NOPorCLRorRTSorJSR
0000133E  4EB9 000016AE            258                     JSR    DONE
00001344  4E72 2700                259  LOTScode1011        STOP  #$2700                   
00001348  4E72 2700                260  LOTScode1100        STOP  #$2700
0000134C  4E72 2700                261  LOTScode1101     STOP  #$2700
00001350  4EB9 00001590            262  LOTScode1110        JSR    ISLEA 
00001356  4EB9 000016AE            263                     JSR    DONE
0000135C  4E72 2700                264  LOTScode1111       STOP  #$2700                
00001360                           265                     
00001360                           266  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001360                           267  
00001360                           268  
00001360                           269  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001360  4FF8 7000                270  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001364  41F9 00001384            271                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
0000136A  4280                     272                      CLR.L   D0                  ; Zero it
0000136C  303C 4247                273                      MOVE.W  #example,D0         ; We'll play with it here
00001370  123C 0007                274                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001374  E360                     275                      ASL.W   D1,D0            
00001376  123C 000D                276                      MOVE.B  #13,D1           
0000137A  E260                     277                      ASR.W   D1,D0             
0000137C                           278    
0000137C                           279                      
0000137C  C0FC 0006                280                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001380  4EB0 0000                281                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001384                           282  
00001384  4EF9 00001396            283  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
0000138A  4EF9 000013A2            284                                 JMP     ADDIWcode01
00001390  4EF9 000013AE            285                                 JMP     ADDILcode10
00001396                           286  
00001396                           287                            
00001396  4EB9 00001698            288  ADDIBcode00        JSR     ISADDIB
0000139C  4EB9 000016AE            289                      JSR    DONE
000013A2  4EB9 0000166C            290  ADDIWcode01        JSR     ISADDIW
000013A8  4EB9 000016AE            291                      JSR    DONE
000013AE  4EB9 00001682            292  ADDILcode10        JSR     ISADDIL
000013B4  4EB9 000016AE            293                      JSR    DONE
000013BA                           294  
000013BA                           295  *****************************END ADDI_BorADDI_WorADDI_L ************************************
000013BA                           296  
000013BA                           297  
000013BA                           298  
000013BA                           299  
000013BA                           300  *****************************MOVEA_LorMOVE_L ************************************
000013BA  4FF8 7000                301  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
000013BE  41F9 000013DE            302                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
000013C4  4280                     303                      CLR.L   D0                  ; Zero it
000013C6  303C 4247                304                      MOVE.W  #example,D0         ; We'll play with it here
000013CA  123C 0007                305                      MOVE.B  #7,D1           ; Shift 7 bits left 
000013CE  E360                     306                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
000013D0  123C 000D                307                      MOVE.B  #13,D1           ; Shift 13 bits right
000013D4  E260                     308                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
000013D6                           309    
000013D6                           310                      
000013D6  C0FC 0006                311                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013DA  4EB0 0000                312                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013DE                           313  
000013DE  4EF9 0000140E            314  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
000013E4  4EF9 0000141A            315                          JMP     MOVEAcode001
000013EA  4EF9 00001426            316                          JMP     MOVEcode010
000013F0  4EF9 00001432            317                          JMP     MOVEcode011
000013F6  4EF9 0000143E            318                          JMP     MOVEcode100
000013FC  4EF9 0000144A            319                          JMP     MOVEcode101
00001402  4EF9 00001456            320                          JMP     MOVEcode110
00001408  4EF9 00001462            321                          JMP     MOVEcode111
0000140E                           322                            
0000140E  4EB9 0000162A            323  MOVEcode000     JSR     ISMOVEL
00001414  4EB9 000016AE            324                  JSR    DONE
0000141A  4EB9 00001640            325  MOVEAcode001    JSR     ISMOVEAL
00001420  4EB9 000016AE            326                  JSR    DONE
00001426  4EB9 0000162A            327  MOVEcode010     JSR     ISMOVEL
0000142C  4EB9 000016AE            328                  JSR    DONE
00001432  4EB9 0000162A            329  MOVEcode011     JSR     ISMOVEL
00001438  4EB9 000016AE            330                  JSR    DONE
0000143E  4EB9 0000162A            331  MOVEcode100     JSR     ISMOVEL
00001444  4EB9 000016AE            332                  JSR    DONE
0000144A  4EB9 0000162A            333  MOVEcode101     JSR     ISMOVEL
00001450  4EB9 000016AE            334                  JSR    DONE
00001456  4EB9 0000162A            335  MOVEcode110     JSR     ISMOVEL
0000145C  4EB9 000016AE            336                  JSR    DONE
00001462  4EB9 0000162A            337  MOVEcode111     JSR     ISMOVEL 
00001468  4EB9 000016AE            338                  JSR    DONE
0000146E                           339  *****************************END MOVEA_LorMOVE_L ************************************
0000146E                           340  
0000146E                           341  *****************************MOVEA_WorMOVE_W ************************************
0000146E  4FF8 7000                342  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001472  41F9 00001492            343                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001478  4280                     344                      CLR.L   D0                  ; Zero it
0000147A  303C 4247                345                      MOVE.W  #example,D0         ; We'll play with it here
0000147E  123C 0007                346                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001482  E360                     347                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001484  123C 000D                348                      MOVE.B  #13,D1           ; Shift 13 bits right
00001488  E260                     349                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
0000148A                           350    
0000148A                           351                      
0000148A  C0FC 0006                352                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000148E  4EB0 0000                353                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001492                           354  
00001492  4EF9 000014C2            355  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001498  4EF9 000014CE            356                          JMP     MOVEAWcode001
0000149E  4EF9 000014DA            357                          JMP     MOVEWcode010
000014A4  4EF9 000014E6            358                          JMP     MOVEWcode011
000014AA  4EF9 000014F2            359                          JMP     MOVEWcode100
000014B0  4EF9 000014FE            360                          JMP     MOVEWcode101
000014B6  4EF9 0000150A            361                          JMP     MOVEWcode110
000014BC  4EF9 00001516            362                          JMP     MOVEWcode111
000014C2                           363                            
000014C2  4EB9 000015FE            364  MOVEWcode000     JSR     ISMOVEW
000014C8  4EB9 000016AE            365                  JSR    DONE
000014CE  4EB9 00001614            366  MOVEAWcode001    JSR     ISMOVEAW
000014D4  4EB9 000016AE            367                  JSR    DONE
000014DA  4EB9 000015FE            368  MOVEWcode010     JSR     ISMOVEW
000014E0  4EB9 000016AE            369                  JSR    DONE
000014E6  4EB9 000015FE            370  MOVEWcode011     JSR     ISMOVEW
000014EC  4EB9 000016AE            371                  JSR    DONE
000014F2  4EB9 000015FE            372  MOVEWcode100     JSR     ISMOVEW
000014F8  4EB9 000016AE            373                  JSR    DONE
000014FE  4EB9 000015FE            374  MOVEWcode101     JSR     ISMOVEW
00001504  4EB9 000016AE            375                  JSR    DONE
0000150A  4EB9 000015FE            376  MOVEWcode110     JSR     ISMOVEW
00001510  4EB9 000016AE            377                  JSR    DONE
00001516  4EB9 000015FE            378  MOVEWcode111     JSR     ISMOVEW 
0000151C  4EB9 000016AE            379                  JSR    DONE
00001522                           380  *****************************END MOVEA_WorMOVE_W ************************************
00001522                           381  
00001522  48A7 FFFF                382  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001526  43F9 00001730            383              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
0000152C  103C 000E                384              MOVE.B  #14, D0
00001530  4E4F                     385              TRAP    #15
00001532                           386     
00001532  4C9F FFFF                387              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001536  4E75                     388              RTS
00001538                           389  
00001538  48A7 FFFF                390  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000153C  43F9 00001738            391              LEA MESSAGECLRW, A1         *OPCODE is CLR.B
00001542  103C 000E                392              MOVE.B  #14, D0
00001546  4E4F                     393              TRAP    #15
00001548                           394     
00001548  4C9F FFFF                395              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000154C  4E75                     396              RTS
0000154E                           397  
0000154E  48A7 FFFF                398  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001552  43F9 00001740            399              LEA MESSAGECLRL, A1         *OPCODE is CLR.B
00001558  103C 000E                400              MOVE.B  #14, D0
0000155C  4E4F                     401              TRAP    #15
0000155E                           402     
0000155E  4C9F FFFF                403              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001562  4E75                     404              RTS
00001564                           405              
00001564  48A7 FFFF                406  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001568  43F9 00001704            407              LEA MESSAGEMOVEML, A1         *OPCODE is MOVE.L so display MOVE.L message
0000156E  103C 000E                408              MOVE.B  #14, D0
00001572  4E4F                     409              TRAP    #15
00001574                           410     
00001574  4C9F FFFF                411              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001578  4E75                     412              RTS
0000157A                           413  
0000157A  48A7 FFFF                414  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000157E  43F9 0000170E            415              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVE.W so display MOVE.W message
00001584  103C 000E                416              MOVE.B  #14, D0
00001588  4E4F                     417              TRAP    #15
0000158A                           418     
0000158A  4C9F FFFF                419              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000158E  4E75                     420              RTS  
00001590                           421  
00001590  48A7 FFFF                422  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001594  43F9 0000172A            423              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
0000159A  103C 000E                424              MOVE.B  #14, D0
0000159E  4E4F                     425              TRAP    #15
000015A0                           426     
000015A0  4C9F FFFF                427              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015A4  4E75                     428              RTS                          ; Exit subroutine
000015A6                           429  
000015A6  48A7 FFFF                430  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015AA  43F9 00001718            431              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
000015B0  103C 000E                432              MOVE.B  #14, D0
000015B4  4E4F                     433              TRAP    #15
000015B6  4C9F FFFF                434              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015BA  4E75                     435              RTS                          ; Exit subroutine
000015BC                           436              
000015BC  48A7 FFFF                437  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015C0  43F9 00001724            438              LEA MESSAGERTS, A1         *OPCODE is RTS
000015C6  103C 000E                439              MOVE.B  #14, D0
000015CA  4E4F                     440              TRAP    #15
000015CC  4C9F FFFF                441              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015D0  4E75                     442              RTS  
000015D2                           443  
000015D2  48A7 FFFF                444  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015D6  43F9 0000171E            445              LEA MESSAGECLR, A1         *OPCODE is CLR
000015DC  103C 000E                446              MOVE.B  #14, D0
000015E0  4E4F                     447              TRAP    #15
000015E2  4C9F FFFF                448              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015E6  4E75                     449              RTS  
000015E8                           450              
000015E8  48A7 FFFF                451  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015EC  43F9 000016B4            452              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
000015F2  103C 000E                453              MOVE.B  #14, D0
000015F6  4E4F                     454              TRAP    #15
000015F8  4C9F FFFF                455              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000015FC  4E75                     456              RTS                          ; Exit subroutine
000015FE                           457           
000015FE  48A7 FFFF                458  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001602  43F9 000016BA            459              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00001608  103C 000E                460              MOVE.B  #14, D0
0000160C  4E4F                     461              TRAP    #15
0000160E                           462     
0000160E  4C9F FFFF                463              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001612  4E75                     464              RTS                          ; Exit subroutine
00001614                           465              
00001614  48A7 FFFF                466  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001618  43F9 000016FA            467              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
0000161E  103C 000E                468              MOVE.B  #14, D0
00001622  4E4F                     469              TRAP    #15
00001624                           470     
00001624  4C9F FFFF                471              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001628  4E75                     472              RTS                          ; Exit subroutine
0000162A                           473              
0000162A  48A7 FFFF                474  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000162E  43F9 000016C3            475              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
00001634  103C 000E                476              MOVE.B  #14, D0
00001638  4E4F                     477              TRAP    #15
0000163A                           478              
0000163A  4C9F FFFF                479              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000163E  4E75                     480              RTS                          ; Exit subroutine
00001640                           481              
00001640  48A7 FFFF                482  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001644  43F9 000016F0            483              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
0000164A  103C 000E                484              MOVE.B  #14, D0
0000164E  4E4F                     485              TRAP    #15
00001650                           486              
00001650  4C9F FFFF                487              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001654  4E75                     488              RTS                          ; Exit subroutine
00001656                           489         
00001656  48A7 FFFF                490  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000165A  43F9 000016CC            491              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
00001660  103C 000E                492              MOVE.B  #14, D0
00001664  4E4F                     493              TRAP    #15
00001666                           494              
00001666  4C9F FFFF                495              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000166A  4E75                     496              RTS                          ; Exit subroutine
0000166C                           497           
0000166C  48A7 FFFF                498  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001670  43F9 000016D5            499              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
00001676  103C 000E                500              MOVE.B  #14, D0
0000167A  4E4F                     501              TRAP    #15
0000167C                           502              
0000167C  4C9F FFFF                503              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001680  4E75                     504              RTS                          ; Exit subroutine
00001682                           505              
00001682  48A7 FFFF                506  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001686  43F9 000016DE            507              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
0000168C  103C 000E                508              MOVE.B  #14, D0
00001690  4E4F                     509              TRAP    #15
00001692                           510              
00001692  4C9F FFFF                511              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001696  4E75                     512              RTS                          ; Exit subroutine
00001698                           513                  
00001698  48A7 FFFF                514  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000169C  43F9 000016E7            515              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
000016A2  103C 000E                516              MOVE.B  #14, D0
000016A6  4E4F                     517              TRAP    #15
000016A8                           518              
000016A8  4C9F FFFF                519              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016AC  4E75                     520              RTS                          ; Exit subroutine
000016AE                           521                        
000016AE  103C 0009                522  DONE        MOVE.B      #9, D0
000016B2  4E4F                     523              TRAP        #15
000016B4                           524  
000016B4  =0000000D                525  CR  EQU     $0D 
000016B4  =0000000A                526  LF  EQU     $0A
000016B4= 4E 4F 50 0D 0A 00        527  MESSAGENOP DC.B    'NOP',CR,LF, 0    
000016BA                           528      
000016BA= 4D 4F 56 45 2E 57 ...    529  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
000016C3= 4D 4F 56 45 2E 4C ...    530  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
000016CC= 4D 4F 56 45 2E 42 ...    531  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
000016D5                           532  
000016D5= 41 44 44 49 2E 57 ...    533  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
000016DE= 41 44 44 49 2E 4C ...    534  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
000016E7= 41 44 44 49 2E 42 ...    535  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
000016F0                           536  
000016F0= 4D 4F 56 45 41 2E ...    537  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
000016FA= 4D 4F 56 45 41 2E ...    538  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
00001704                           539  
00001704= 4D 4F 56 45 4D 2E ...    540  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
0000170E= 4D 4F 56 45 4D 2E ...    541  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00001718                           542  
00001718= 4A 53 52 0D 0A 00        543  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
0000171E                           544  
0000171E= 43 4C 52 0D 0A 00        545  MESSAGECLR DC.B    'CLR',CR,LF, 0
00001724                           546  
00001724= 52 54 53 0D 0A 00        547  MESSAGERTS DC.B    'RTS',CR,LF, 0
0000172A                           548  
0000172A= 4C 45 41 0D 0A 00        549  MESSAGELEA DC.B    'LEA',CR,LF, 0
00001730                           550  
00001730= 43 4C 52 2E 42 0D ...    551  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00001738= 43 4C 52 2E 57 0D ...    552  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00001740= 43 4C 52 2E 4C 0D ...    553  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00001748                           554  
00001748  FFFF FFFF                555      SIMHALT             ; halt simulator
0000174C                           556  
0000174C                           557  * Put variables and constants here
0000174C                           558  
0000174C                           559      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIBCODE00         1396
ADDILCODE10         13AE
ADDIWCODE01         13A2
ADDI_BORADDI_WORADDI_L  1360
CLRCODE00           1110
CLRCODE01           111C
CLRCODE10           1128
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10AC
CODE0111            10B0
CODE1000            10B4
CODE1001            10B8
CODE1010            10BC
CODE1011            10C0
CODE1100            10C4
CODE1101            10C8
CODE1110            10CC
CODE1111            10D0
CR                  D
DONE                16AE
EXAMPLE             4247
ISADDIB             1698
ISADDIL             1682
ISADDIW             166C
ISCLR               15D2
ISCLRB              1522
ISCLRL              154E
ISCLRW              1538
ISJSR               15A6
ISLEA               1590
ISMOVEAL            1640
ISMOVEAW            1614
ISMOVEB             1656
ISMOVEL             162A
ISMOVEML            1564
ISMOVEMW            157A
ISMOVEW             15FE
ISNOP               15E8
ISRTS               15BC
JSRORCLRCODE0000    11E4
JSRORCLRCODE0001    11E8
JSRORCLRCODE0010    11EC
JSRORCLRCODE0011    11F6
JSRORCLRCODE0100    11FA
JSRORCLRCODE0101    11FE
JSRORCLRCODE0110    1202
JSRORCLRCODE0111    1206
JSRORCLRCODE1000    120A
JSRORCLRCODE1001    120E
JSRORCLRCODE1010    1212
JSRORCLRCODE1011    1216
JSRORCLRCODE1100    121A
JSRORCLRCODE1101    121E
JSRORCLRCODE1110    1222
JSRORCLRCODE1111    122E
LF                  A
LOTSCODE0000        12FE
LOTSCODE0001        1302
LOTSCODE0010        1306
LOTSCODE0011        1310
LOTSCODE0100        1314
LOTSCODE0101        1318
LOTSCODE0110        131C
LOTSCODE0111        1328
LOTSCODE1000        132C
LOTSCODE1001        1336
LOTSCODE1010        133A
LOTSCODE1011        1344
LOTSCODE1100        1348
LOTSCODE1101        134C
LOTSCODE1110        1350
LOTSCODE1111        135C
MESSAGEADDIB        16E7
MESSAGEADDIL        16DE
MESSAGEADDIW        16D5
MESSAGECLR          171E
MESSAGECLRB         1730
MESSAGECLRL         1740
MESSAGECLRW         1738
MESSAGEJSR          1718
MESSAGELEA          172A
MESSAGEMOVEAL       16F0
MESSAGEMOVEAW       16FA
MESSAGEMOVEB        16CC
MESSAGEMOVEL        16C3
MESSAGEMOVEML       1704
MESSAGEMOVEMW       170E
MESSAGEMOVEW        16BA
MESSAGENOP          16B4
MESSAGERTS          1724
MOVEACODE001        141A
MOVEAWCODE001       14CE
MOVEA_LORMOVE_L     13BA
MOVEA_WORMOVE_W     146E
MOVECODE000         140E
MOVECODE010         1426
MOVECODE011         1432
MOVECODE100         143E
MOVECODE101         144A
MOVECODE110         1456
MOVECODE111         1462
MOVEMCODE00         1262
MOVEMCODE01         126E
MOVEWCODE000        14C2
MOVEWCODE010        14DA
MOVEWCODE011        14E6
MOVEWCODE100        14F2
MOVEWCODE101        14FE
MOVEWCODE110        150A
MOVEWCODE111        1516
NOPCOMMAND          11D8
NOPORCLRORRTSORJSR  1134
NOP_MOVEM_LEA_JSR_CLR_RTS  127A
RTSCOMMAND          11CC
SHIFT               C
SOMECLR             10D4
SOMEMOVEM           1232
STACK               7000
START               1000
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1384
TABLEMOVEA_LORMOVE_L  13DE
TABLEMOVEA_WORMOVE_W  1492
TABLENOPORCLRORRTSORJSR  116C
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  12A4
TABLESOMECLR        10FE
TABLESOMEMOVEM      1256
