00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2016 5:36:20 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000                            57  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000                            60  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            61  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            62  
00001000                            63  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            64  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            65  
00001000                            66  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            67  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            68  
00001000                            69  *example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            70  
00001000                            71  *example EQU     %0100110000000011 ; MULS.L D3, D4 = 01001 1 0000 000 011
00001000                            72  
00001000                            73  *example EQU     %0100100010010100 ; MOVEM.W (A4), (D16A6) = 0100 1000 10 010 100
00001000                            74  *example EQU     %0100110010101110 ; MOVEM.W (D16A6), (A4) = 0100 1100 10 101 110
00001000                            75  
00001000                            76  *example EQU     %0100100011010100 ; MOVEM.L (A4), (D16A6) = 0100 1000 11 010 100
00001000                            77  *example EQU     %0100110011101110 ; MOVEM.L (D16A6), (A4) = 0100 1100 11 101 110
00001000                            78  
00001000                            79  *example EQU     %1110111100011010  ; ROL.B  D1,D2 = 1110 111 1 00 0 11 010 where D1 = 0x111 or 7
00001000                            80  *example EQU     %1110111101011010  ; ROL.W  D1,D2 = 1110 111 1 01 0 11 010 where D1 = 0x111 or 7
00001000                            81  *example EQU     %1110111110011010  ; ROL.L  D1,D2 = 1110 111 1 10 0 11 010 where D1 = 0x111 or 7
00001000                            82  
00001000                            83  *example EQU     %1110111000011010  ; ROR.B  D1,D2 = 1110 111 0 00 0 11 010 where D1 = 0x111 or 7
00001000                            84  *example EQU     %1110111001011010  ; ROR.W  D1,D2 = 1110 111 0 01 0 11 010 where D1 = 0x111 or 7
00001000                            85  *example EQU     %1110111010011010  ; ROR.L  D1,D2 = 1110 111 0 10 0 11 010 where D1 = 0x111 or 7
00001000                            86  
00001000                            87  *example EQU     %1110111100001010  ; LSL.B  D1,D2 = 1110 111 1 00 0 01 010 where D1 = 0x111 or 7
00001000                            88  *example EQU     %1110111101001010  ; LSL.W  D1,D2 = 1110 111 1 01 0 01 010 where D1 = 0x111 or 7
00001000                            89  *example EQU     %1110111110001010  ; LSL.L  D1,D2 = 1110 111 1 10 0 01 010 where D1 = 0x111 or 7
00001000                            90  
00001000                            91  *example EQU     %1110111000001010  ; LSR.B  D1,D2 = 1110 111 0 00 0 01 010 where D1 = 0x111 or 7
00001000                            92  *example EQU     %1110111001001010  ; LSR.W  D1,D2 = 1110 111 0 01 0 01 010 where D1 = 0x111 or 7
00001000                            93  *example EQU     %1110111010001010  ; LSR.L  D1,D2 = 1110 111 0 10 0 01 010 where D1 = 0x111 or 7
00001000                            94  
00001000                            95  *example EQU     %1110111100000010  ; ASL.B  D1,D2 = 1110 111 1 00 0 00 010 where D1 = 0x111 or 7
00001000                            96  *example EQU     %1110111101000010  ; ASL.W  D1,D2 = 1110 111 1 01 0 00 010 where D1 = 0x111 or 7
00001000                            97  *example EQU     %1110111110000010  ; ASL.L  D1,D2 = 1110 111 1 10 0 00 010 where D1 = 0x111 or 7
00001000                            98  
00001000                            99  *example EQU     %1110111000000010  ; ASR.B  D1,D2 = 1110 111 0 00 0 00 010 where D1 = 0x111 or 7
00001000                           100  *example EQU     %1110111001000010  ; ASR.W  D1,D2 = 1110 111 0 01 0 00 010 where D1 = 0x111 or 7
00001000                           101  *example EQU     %1110111010000010  ; ASR.L  D1,D2 = 1110 111 0 10 0 00 010 where D1 = 0x111 or 7
00001000                           102  
00001000                           103  *example EQU     %1000100011000011 ; DIVU.W D3,D4 = 1000 100 011 000 011
00001000                           104  *example EQU     %0100110001000011 ; DIVU.L D3,D4 = 0100 110001 000 011
00001000                           105  
00001000                           106  *example EQU     %1000100000000011 ; OR.B D3,D4 = 1000 100 000 000 011
00001000                           107  *example EQU     %1000100100000011 ; OR.B D3,D4 = 1000 100 100 000 011
00001000                           108  *example EQU     %1000100001000011 ; OR.W D3,D4 = 1000 100 001 000 011
00001000                           109  *example EQU     %1000100101000011 ; OR.W D3,D4 = 1000 100 101 000 011
00001000                           110  *example EQU     %1000100010000011 ; OR.L D3,D4 = 1000 100 010 000 011
00001000                           111  *example EQU     %1000100110000011 ; OR.L D3,D4 = 1000 100 110 000 011
00001000                           112  
00001000                           113  *example EQU     %0110010000000000 ; BCC = 0110 0100 0000 0000
00001000                           114  *example EQU     %0110111000000000 ; BGT = 0110 1110 0000 0000
00001000  =00006F00                115  example EQU     %0110111100000000  ; BLE = 0110 1111 0000 0000 
00001000                           116  
00001000  =0000000C                117  shift   EQU     12                 ; Shift 12 bits 
00001000                           118  
00001000                           119  * Program starts here
00001000                           120  
00001000  4FF8 7000                121          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E            122          LEA     table,A0            ; Index into the table
0000100A  4280                     123          CLR.L   D0                  ; Zero it
0000100C  303C 6F00                124          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                125          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                     126          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                           127                                      ; and the rest are zeroed out)
00001016  C0FC 0006                128          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                129          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                           130  
0000101E  4EF9 0000107E            131  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084            132          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090            133          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096            134          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C            135          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS or MULS.W
0000103C  4EF9 000010A8            136          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4            137          JMP     code0110        ; BCC or BGT or BLE
00001048  4EF9 000010C0            138          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010CC            139          JMP     code1000        ; OR.B or OR.W or OR.L or DIVU.W
00001054  4EF9 000010D8            140          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010E4            141          JMP     code1010
00001060  4EF9 000010E8            142          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010F4            143          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 00001100            144          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 0000110C            145          JMP     code1110        ; ROd_LSd_ASd
00001078  4EF9 00001118            146          JMP     code1111
0000107E                           147         
0000107E                           148  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           149  
0000107E  4EB9 00001B5C            150  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 00002246            151  code0001 JSR   ISMOVEB
0000108A  4EB9 0000229E            152           JSR   DONE
00001090  4EB9 00001BB6            153  code0010 JSR   MOVEA_LorMOVE_L        
00001096  4EB9 00001C6A            154  code0011 JSR  MOVEA_WorMOVE_W        
0000109C  4EB9 00001A70            155  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 0000229E            156           JSR    DONE
000010A8  4EB9 00001864            157  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 0000229E            158           JSR    DONE
000010B4  4EB9 0000111C            159  code0110 JSR    BCCorBGTorBLE
000010BA  4EB9 0000229E            160           JSR    DONE
000010C0  4EB9 000020FC            161  code0111 JSR    ISMOVEQL
000010C6  4EB9 0000229E            162           JSR    DONE
000010CC  4EB9 000011CE            163  code1000 JSR    OR_BorOR_WorOR_LorDIVU
000010D2  4EB9 0000229E            164           JSR    DONE
000010D8  4EB9 00001764            165  code1001 JSR    SUB_BorSUB_WorSUB_L
000010DE  4EB9 0000229E            166           JSR    DONE
000010E4  4E72 2700                167  code1010 STOP  #$2700
000010E8  4EB9 00001804            168  code1011 JSR    CMP_BorCMP_WorCMP_L
000010EE  4EB9 0000229E            169           JSR DONE
000010F4  4EB9 000015F8            170  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010FA  4EB9 0000229E            171           JSR    DONE
00001100  4EB9 000016AA            172  code1101 JSR    ADD_BorADD_WorADD_L
00001106  4EB9 0000229E            173           JSR    DONE
0000110C  4EB9 00001594            174  code1110 JSR    ROd_LSd_ASd
00001112  4EB9 0000229E            175           JSR    DONE
00001118  4E72 2700                176  code1111 STOP  #$2700
0000111C                           177  
0000111C                           178  *****************************  BCCorBGTorBLE ************************************
0000111C  4FF8 7000                179  BCCorBGTorBLE       LEA     STACK,SP            ; Load the SP
00001120  41F9 00001146            180                      LEA     tableBCCorBGTorBLE, A0            ; Index into the table
00001126  4280                     181                      CLR.L   D0                  ; Zero it
00001128  303C 6F00                182                      MOVE.W  #example,D0         ; We'll play with it here
0000112C  123C 0006                183                      MOVE.B  #6,D1           ; Shift 6 bits left 
00001130  E360                     184                      ASL.W   D1,D0            
00001132  123C 000C                185                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001136  E268                     186                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001138                           187                                      ; and the rest are zeroed out)           
00001138  123C 0002                188                      MOVE.B  #2,D1           ; Shift 2 bits right
0000113C  E260                     189                      ASR.W   D1,D0 
0000113E                           190                      
0000113E  C0FC 0006                191                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001142  4EB0 0000                192                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001146                           193  
00001146  4EF9 0000115E            194  tableBCCorBGTorBLE   JMP    BCCorBGTorBLEcode00   ; BCC
0000114C  4EF9 0000116A            195                       JMP    BCCorBGTorBLEcode01   ;                                     
00001152  4EF9 0000116E            196                       JMP    BCCorBGTorBLEcode10   ; BGT
00001158  4EF9 0000117A            197                       JMP    BCCorBGTorBLEcode11   ; BLE
0000115E                           198    
0000115E                           199  
0000115E                           200  
0000115E  4EB9 00001D1E            201  BCCorBGTorBLEcode00    JSR     ISBCC
00001164  4EB9 0000229E            202                         JSR     DONE
0000116A  4E72 2700                203  BCCorBGTorBLEcode01    STOP  #$2700  
0000116E  4EB9 00001D34            204  BCCorBGTorBLEcode10    JSR     ISBGT
00001174  4EB9 0000229E            205                         JSR     DONE  
0000117A  4EB9 00001D4A            206  BCCorBGTorBLEcode11    JSR     ISBLE
00001180  4EB9 0000229E            207                         JSR     DONE
00001186                           208     
00001186                           209  ***************************** END  BCCorBGTorBLE ************************************
00001186                           210  
00001186                           211  *****************************  MULSLorDIVUL ************************************
00001186  4FF8 7000                212  MULSLorDIVUL        LEA     STACK,SP            ; Load the SP
0000118A  41F9 000011AA            213                      LEA     tableMULSLorDIVUL, A0            ; Index into the table
00001190  4280                     214                      CLR.L   D0                  ; Zero it
00001192  303C 6F00                215                      MOVE.W  #example,D0         ; We'll play with it here
00001196  123C 0006                216                      MOVE.B  #6,D1           ; Shift 6 bits left 
0000119A  E360                     217                      ASL.W   D1,D0            
0000119C  123C 000C                218                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011A0  E268                     219                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011A2                           220                      
000011A2  C0FC 0006                221                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011A6  4EB0 0000                222                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011AA                           223  
000011AA  4EF9 000011B6            224  tableMULSLorDIVUL             JMP    MULSLorDIVULcode0   ;  MULS.L
000011B0  4EF9 000011C2            225                                JMP    MULSLorDIVULcode1   ;  DIVU.L                                   
000011B6                           226  
000011B6  4EB9 00001F5A            227  MULSLorDIVULcode0   JSR     ISMULSL
000011BC  4EB9 0000229E            228                      JSR     DONE
000011C2  4EB9 00001D60            229  MULSLorDIVULcode1   JSR     ISDIVUL 
000011C8  4EB9 0000229E            230                      JSR     DONE                                 
000011CE                           231  ***************************** END  MULSLorDIVUL ************************************
000011CE                           232  
000011CE                           233  *****************************  OR_BorOR_WorOR_LorDIVU ************************************
000011CE  4FF8 7000                234  OR_BorOR_WorOR_LorDIVU     LEA     STACK,SP            ; Load the SP
000011D2  41F9 000011F8            235                      LEA     tableOR_BorOR_WorOR_LorDIVU, A0            ; Index into the table
000011D8  4280                     236                      CLR.L   D0                  ; Zero it
000011DA  303C 6F00                237                      MOVE.W  #example,D0         ; We'll play with it here
000011DE  123C 0007                238                      MOVE.B  #7,D1           ; Shift 7 bits left 
000011E2  E360                     239                      ASL.W   D1,D0            
000011E4  123C 000C                240                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011E8  E268                     241                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011EA                           242                                      ; and the rest are zeroed out)           
000011EA  123C 0001                243                      MOVE.B  #1,D1           ; Shift 1 bits right
000011EE  E260                     244                      ASR.W   D1,D0 
000011F0                           245                      
000011F0  C0FC 0006                246                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011F4  4EB0 0000                247                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011F8                           248  
000011F8  4EF9 00001222            249  tableOR_BorOR_WorOR_LorDIVU             JMP    OR_DIVUcode000   ; OR.B
000011FE  4EF9 0000122E            250                                          JMP    OR_DIVUcode001   ; OR.W                                    
00001204  4EF9 0000123A            251                                          JMP    OR_DIVUcode010   ; OR.L
0000120A                           252                                   
0000120A  4EF9 00001246            253                                          JMP    OR_DIVUcode011   ; DIVU.W
00001210  4EF9 00001252            254                                          JMP    OR_DIVUcode100   ; OR.B
00001216  4EF9 0000125E            255                                          JMP    OR_DIVUcode101   ; OR.W
0000121C  4EF9 0000126A            256                                          JMP    OR_DIVUcode110   ; OR.L
00001222                           257                                          ;JMP    OR_DIVUcode111   
00001222                           258  
00001222                           259  
00001222  4EB9 00001D8C            260  OR_DIVUcode000      JSR     ISORB
00001228  4EB9 0000229E            261                      JSR     DONE
0000122E  4EB9 00001DA2            262  OR_DIVUcode001      JSR     ISORW  
00001234  4EB9 0000229E            263                      JSR     DONE                                 
0000123A  4EB9 00001DB8            264  OR_DIVUcode010      JSR     ISORL 
00001240  4EB9 0000229E            265                      JSR     DONE  
00001246  4EB9 00001D76            266  OR_DIVUcode011      JSR     ISDIVUW
0000124C  4EB9 0000229E            267                      JSR     DONE
00001252  4EB9 00001D8C            268  OR_DIVUcode100      JSR     ISORB
00001258  4EB9 0000229E            269                      JSR     DONE
0000125E  4EB9 00001DA2            270  OR_DIVUcode101      JSR     ISORW  
00001264  4EB9 0000229E            271                      JSR     DONE                                 
0000126A  4EB9 00001DB8            272  OR_DIVUcode110      JSR     ISORL 
00001270  4EB9 0000229E            273                      JSR     DONE 
00001276                           274  
00001276                           275     
00001276                           276  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001276                           277  
00001276                           278  *****************************someASR ************************************
00001276  4FF8 7000                279  someASR    LEA     STACK,SP            ; Load the SP
0000127A  41F9 000012A0            280                      LEA     tableSomeASR, A0            ; Index into the table
00001280  4280                     281                      CLR.L   D0                  ; Zero it
00001282  303C 6F00                282                      MOVE.W  #example,D0         ; We'll play with it here
00001286  123C 0008                283                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000128A  E360                     284                      ASL.W   D1,D0            
0000128C  123C 000C                285                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001290  E268                     286                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001292                           287                                      ; and the rest are zeroed out)           
00001292  123C 0002                288                      MOVE.B  #2,D1           ; Shift 2 bits right
00001296  E260                     289                      ASR.W   D1,D0 
00001298                           290                      
00001298  C0FC 0006                291                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000129C  4EB0 0000                292                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012A0                           293  
000012A0  4EF9 000012B2            294  tableSomeASR        JMP     ASRcode00   *ASR.B
000012A6  4EF9 000012BE            295                      JMP     ASRcode01   *ASR.W                                      
000012AC  4EF9 000012CA            296                      JMP     ASRcode10   *ASR.L
000012B2                           297  
000012B2  4EB9 00001DCE            298  ASRcode00   JSR     ISASRB
000012B8  4EB9 0000229E            299              JSR     DONE
000012BE  4EB9 00001DE4            300  ASRcode01   JSR     ISASRW  
000012C4  4EB9 0000229E            301              JSR     DONE                                 
000012CA  4EB9 00001DFA            302  ASRcode10   JSR     ISASRL  
000012D0  4EB9 0000229E            303              JSR     DONE                    
000012D6                           304  
000012D6                           305  *****************************END someLSL ************************************
000012D6                           306  
000012D6                           307  
000012D6                           308  *****************************someASL ************************************
000012D6  4FF8 7000                309  someASL    LEA     STACK,SP            ; Load the SP
000012DA  41F9 00001300            310                      LEA     tableSomeASL, A0            ; Index into the table
000012E0  4280                     311                      CLR.L   D0                  ; Zero it
000012E2  303C 6F00                312                      MOVE.W  #example,D0         ; We'll play with it here
000012E6  123C 0008                313                      MOVE.B  #8,D1           ; Shift 8 bits left 
000012EA  E360                     314                      ASL.W   D1,D0            
000012EC  123C 000C                315                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000012F0  E268                     316                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012F2                           317                                      ; and the rest are zeroed out)           
000012F2  123C 0002                318                      MOVE.B  #2,D1           ; Shift 2 bits right
000012F6  E260                     319                      ASR.W   D1,D0 
000012F8                           320                      
000012F8  C0FC 0006                321                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012FC  4EB0 0000                322                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001300                           323  
00001300  4EF9 00001312            324  tableSomeASL        JMP     ASLcode00   *ASL.B
00001306  4EF9 0000131E            325                      JMP     ASLcode01   *ASL.W                                      
0000130C  4EF9 0000132A            326                      JMP     ASLcode10   *ASL.L
00001312                           327  
00001312  4EB9 00001E10            328  ASLcode00   JSR     ISASLB
00001318  4EB9 0000229E            329              JSR     DONE
0000131E  4EB9 00001E26            330  ASLcode01   JSR     ISASLW  
00001324  4EB9 0000229E            331              JSR     DONE                                 
0000132A  4EB9 00001E3C            332  ASLcode10   JSR     ISASLL  
00001330  4EB9 0000229E            333              JSR     DONE                    
00001336                           334  
00001336                           335  *****************************END someLSL ************************************
00001336                           336  
00001336                           337  
00001336                           338  *****************************someLSR ************************************
00001336  4FF8 7000                339  someLSR    LEA     STACK,SP            ; Load the SP
0000133A  41F9 00001360            340                      LEA     tableSomeLSR, A0            ; Index into the table
00001340  4280                     341                      CLR.L   D0                  ; Zero it
00001342  303C 6F00                342                      MOVE.W  #example,D0         ; We'll play with it here
00001346  123C 0008                343                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000134A  E360                     344                      ASL.W   D1,D0            
0000134C  123C 000C                345                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001350  E268                     346                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001352                           347                                      ; and the rest are zeroed out)           
00001352  123C 0002                348                      MOVE.B  #2,D1           ; Shift 2 bits right
00001356  E260                     349                      ASR.W   D1,D0 
00001358                           350                      
00001358  C0FC 0006                351                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000135C  4EB0 0000                352                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001360                           353  
00001360  4EF9 00001372            354  tableSomeLSR        JMP     LSRcode00   *LSR.B
00001366  4EF9 0000137E            355                      JMP     LSRcode01   *LSR.W                                      
0000136C  4EF9 0000138A            356                      JMP     LSRcode10   *LSR.L
00001372                           357  
00001372  4EB9 00001E52            358  LSRcode00   JSR     ISLSRB
00001378  4EB9 0000229E            359              JSR     DONE
0000137E  4EB9 00001E68            360  LSRcode01   JSR     ISLSRW  
00001384  4EB9 0000229E            361              JSR     DONE                                 
0000138A  4EB9 00001E7E            362  LSRcode10   JSR     ISLSRL  
00001390  4EB9 0000229E            363              JSR     DONE                    
00001396                           364  
00001396                           365  *****************************END someLSR ************************************
00001396                           366  
00001396                           367  
00001396                           368  *****************************someLSL ************************************
00001396  4FF8 7000                369  someLSL    LEA     STACK,SP            ; Load the SP
0000139A  41F9 000013C0            370                      LEA     tableSomeLSL, A0            ; Index into the table
000013A0  4280                     371                      CLR.L   D0                  ; Zero it
000013A2  303C 6F00                372                      MOVE.W  #example,D0         ; We'll play with it here
000013A6  123C 0008                373                      MOVE.B  #8,D1           ; Shift 8 bits left 
000013AA  E360                     374                      ASL.W   D1,D0            
000013AC  123C 000C                375                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013B0  E268                     376                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013B2                           377                                      ; and the rest are zeroed out)           
000013B2  123C 0002                378                      MOVE.B  #2,D1           ; Shift 2 bits right
000013B6  E260                     379                      ASR.W   D1,D0 
000013B8                           380                      
000013B8  C0FC 0006                381                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013BC  4EB0 0000                382                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013C0                           383  
000013C0  4EF9 000013D2            384  tableSomeLSL        JMP     LSLcode00   *LSL.B
000013C6  4EF9 000013DE            385                      JMP     LSLcode01   *LSL.W                                      
000013CC  4EF9 000013EA            386                      JMP     LSLcode10   *LSL.L
000013D2                           387  
000013D2  4EB9 00001E94            388  LSLcode00   JSR     ISLSLB
000013D8  4EB9 0000229E            389              JSR     DONE
000013DE  4EB9 00001EAA            390  LSLcode01   JSR     ISLSLW  
000013E4  4EB9 0000229E            391              JSR     DONE                                 
000013EA  4EB9 00001EC0            392  LSLcode10   JSR     ISLSLL  
000013F0  4EB9 0000229E            393              JSR     DONE                    
000013F6                           394  
000013F6                           395  *****************************END someLSL ************************************
000013F6                           396  
000013F6                           397  
000013F6                           398  *****************************someROL ************************************
000013F6  4FF8 7000                399  someROL    LEA     STACK,SP            ; Load the SP
000013FA  41F9 00001420            400                      LEA     tableSomeROL, A0            ; Index into the table
00001400  4280                     401                      CLR.L   D0                  ; Zero it
00001402  303C 6F00                402                      MOVE.W  #example,D0         ; We'll play with it here
00001406  123C 0008                403                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000140A  E360                     404                      ASL.W   D1,D0            
0000140C  123C 000C                405                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001410  E268                     406                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001412                           407                                      ; and the rest are zeroed out)           
00001412  123C 0002                408                      MOVE.B  #2,D1           ; Shift 2 bits right
00001416  E260                     409                      ASR.W   D1,D0 
00001418                           410                      
00001418  C0FC 0006                411                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000141C  4EB0 0000                412                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001420                           413  
00001420  4EF9 00001432            414  tableSomeROL        JMP     ROLcode00   *ROL.B
00001426  4EF9 0000143E            415                      JMP     ROLcode01   *ROL.W                                      
0000142C  4EF9 0000144A            416                      JMP     ROLcode10   *ROL.L
00001432                           417  
00001432  4EB9 00001F18            418  ROLcode00   JSR     ISROLB
00001438  4EB9 0000229E            419              JSR     DONE
0000143E  4EB9 00001F2E            420  ROLcode01   JSR     ISROLW  
00001444  4EB9 0000229E            421              JSR     DONE                                 
0000144A  4EB9 00001F44            422  ROLcode10   JSR     ISROLL  
00001450  4EB9 0000229E            423              JSR     DONE                    
00001456                           424  
00001456                           425  *****************************END someROR ************************************
00001456                           426  
00001456                           427  
00001456                           428  *****************************someROR ************************************
00001456  4FF8 7000                429  someROR     LEA     STACK,SP            ; Load the SP
0000145A  41F9 00001480            430                      LEA     tableSomeROR, A0            ; Index into the table
00001460  4280                     431                      CLR.L   D0                  ; Zero it
00001462  303C 6F00                432                      MOVE.W  #example,D0         ; We'll play with it here
00001466  123C 0008                433                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000146A  E360                     434                      ASL.W   D1,D0            
0000146C  123C 000C                435                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001470  E268                     436                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001472                           437                                      ; and the rest are zeroed out)           
00001472  123C 0002                438                      MOVE.B  #2,D1           ; Shift 2 bits right
00001476  E260                     439                      ASR.W   D1,D0 
00001478                           440                      
00001478  C0FC 0006                441                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000147C  4EB0 0000                442                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001480                           443  
00001480  4EF9 00001492            444  tableSomeROR        JMP     RORcode00   *ROR.B
00001486  4EF9 0000149E            445                      JMP     RORcode01   *ROR.W                                      
0000148C  4EF9 000014AA            446                      JMP     RORcode10   *ROR.L
00001492                           447  
00001492  4EB9 00001ED6            448  RORcode00   JSR     ISRORB
00001498  4EB9 0000229E            449              JSR     DONE
0000149E  4EB9 00001EEC            450  RORcode01   JSR     ISRORW  
000014A4  4EB9 0000229E            451              JSR     DONE                                 
000014AA  4EB9 00001F02            452  RORcode10   JSR     ISRORL  
000014B0  4EB9 0000229E            453              JSR     DONE                    
000014B6                           454  
000014B6                           455  *****************************END someROR ************************************
000014B6                           456  
000014B6                           457  
000014B6                           458  *****************************  ROL_ROR ************************************
000014B6  4FF8 7000                459  ROL_ROR     LEA     STACK,SP            ; Load the SP
000014BA  41F9 000014E0            460                      LEA     tableROL_ROR, A0            ; Index into the table
000014C0  4280                     461                      CLR.L   D0                  ; Zero it
000014C2  303C 6F00                462                      MOVE.W  #example,D0         ; We'll play with it here
000014C6  123C 0007                463                      MOVE.B  #7,D1           ; Shift 7 bits left 
000014CA  E360                     464                      ASL.W   D1,D0            
000014CC  123C 000C                465                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014D0  E268                     466                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014D2                           467                                      ; and the rest are zeroed out)           
000014D2  123C 0003                468                      MOVE.B  #3,D1           ; Shift 3 bits right
000014D6  E260                     469                      ASR.W   D1,D0 
000014D8                           470                      
000014D8  C0FC 0006                471                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014DC  4EB0 0000                472                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000014E0                           473  
000014E0  4EF9 000014EC            474  tableROL_ROR            JMP    ROL_RORcode0   ; ROR
000014E6  4EF9 000014F6            475                          JMP    ROL_RORcode1   ; ROL                                 
000014EC                           476  
000014EC                           477    
000014EC                           478  
000014EC                           479  
000014EC  4EB8 1456                480  ROL_RORcode0   JSR     someROR
000014F0  4EB9 0000229E            481                 JSR     DONE
000014F6  4EB8 13F6                482  ROL_RORcode1   JSR     someROL  
000014FA  4EB9 0000229E            483                 JSR     DONE                                 
00001500                           484  
00001500                           485     
00001500                           486  ***************************** END ROL_ROR ************************************
00001500                           487  
00001500                           488  
00001500                           489  *****************************  LSL_LSR ************************************
00001500  4FF8 7000                490  LSL_LSR     LEA     STACK,SP            ; Load the SP
00001504  41F9 0000152A            491                      LEA     tableLSL_LSR, A0            ; Index into the table
0000150A  4280                     492                      CLR.L   D0                  ; Zero it
0000150C  303C 6F00                493                      MOVE.W  #example,D0         ; We'll play with it here
00001510  123C 0007                494                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001514  E360                     495                      ASL.W   D1,D0            
00001516  123C 000C                496                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000151A  E268                     497                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000151C                           498                                      ; and the rest are zeroed out)           
0000151C  123C 0003                499                      MOVE.B  #3,D1           ; Shift 3 bits right
00001520  E260                     500                      ASR.W   D1,D0 
00001522                           501                      
00001522  C0FC 0006                502                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001526  4EB0 0000                503                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000152A                           504  
0000152A  4EF9 00001536            505  tableLSL_LSR            JMP    LSL_LSRcode0   ; LSR
00001530  4EF9 00001540            506                          JMP    LSL_LSRcode1   ; LSL                                 
00001536                           507  
00001536                           508    
00001536                           509  
00001536                           510  
00001536  4EB8 1336                511  LSL_LSRcode0   JSR     someLSR
0000153A  4EB9 0000229E            512                 JSR     DONE
00001540  4EB8 1396                513  LSL_LSRcode1   JSR     someLSL  
00001544  4EB9 0000229E            514                 JSR     DONE                                 
0000154A                           515  
0000154A                           516     
0000154A                           517  ***************************** END LSL_LSR ************************************
0000154A                           518  
0000154A                           519  
0000154A                           520  *****************************  ASL_ASR ************************************
0000154A  4FF8 7000                521  ASL_ASR     LEA     STACK,SP            ; Load the SP
0000154E  41F9 00001574            522                      LEA     tableASL_ASR, A0            ; Index into the table
00001554  4280                     523                      CLR.L   D0                  ; Zero it
00001556  303C 6F00                524                      MOVE.W  #example,D0         ; We'll play with it here
0000155A  123C 0007                525                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000155E  E360                     526                      ASL.W   D1,D0            
00001560  123C 000C                527                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001564  E268                     528                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001566                           529                                      ; and the rest are zeroed out)           
00001566  123C 0003                530                      MOVE.B  #3,D1           ; Shift 3 bits right
0000156A  E260                     531                      ASR.W   D1,D0 
0000156C                           532                      
0000156C  C0FC 0006                533                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001570  4EB0 0000                534                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001574                           535  
00001574  4EF9 00001580            536  tableASL_ASR            JMP    ASL_ASRcode0   ; ASR
0000157A  4EF9 0000158A            537                          JMP    ASL_ASRcode1   ; ASL                                  
00001580                           538  
00001580                           539    
00001580                           540  
00001580                           541  
00001580  4EB8 1276                542  ASL_ASRcode0   JSR     someASR
00001584  4EB9 0000229E            543                 JSR     DONE
0000158A  4EB8 12D6                544  ASL_ASRcode1   JSR     someASL 
0000158E  4EB9 0000229E            545                 JSR     DONE                                 
00001594                           546  
00001594                           547     
00001594                           548  ***************************** END ASL_ASR ************************************
00001594                           549  
00001594                           550  
00001594                           551  *****************************  ROd_LSd_ASd ************************************
00001594  4FF8 7000                552  ROd_LSd_ASd     LEA     STACK,SP            ; Load the SP
00001598  41F9 000015BE            553                      LEA     tableROd_LSd_ASd, A0            ; Index into the table
0000159E  4280                     554                      CLR.L   D0                  ; Zero it
000015A0  303C 6F00                555                      MOVE.W  #example,D0         ; We'll play with it here
000015A4  123C 000B                556                      MOVE.B  #11,D1           ; Shift 11 bits left 
000015A8  E360                     557                      ASL.W   D1,D0            
000015AA  123C 000C                558                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000015AE  E268                     559                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000015B0                           560                                      ; and the rest are zeroed out)           
000015B0  123C 0002                561                      MOVE.B  #2,D1           ; Shift 2 bits right
000015B4  E260                     562                      ASR.W   D1,D0 
000015B6                           563                      
000015B6  C0FC 0006                564                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000015BA  4EB0 0000                565                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000015BE                           566  
000015BE  4EF9 000015D6            567  tableROd_LSd_ASd        JMP    ROd_LSd_ASdcode00   ; ASL_ASR
000015C4  4EF9 000015E0            568                          JMP    ROd_LSd_ASdcode01   ; LSL_LSR                                     
000015CA  4EF9 000015EA            569                          JMP    ROd_LSd_ASdcode10   
000015D0  4EF9 000015EE            570                          JMP    ROd_LSd_ASdcode11   ; ROL_ROR
000015D6                           571    
000015D6                           572  
000015D6                           573  
000015D6  4EB8 154A                574  ROd_LSd_ASdcode00   JSR     ASL_ASR
000015DA  4EB9 0000229E            575                      JSR     DONE
000015E0  4EB8 1500                576  ROd_LSd_ASdcode01   JSR     LSL_LSR   
000015E4  4EB9 0000229E            577                      JSR     DONE                                 
000015EA  4E72 2700                578  ROd_LSd_ASdcode10   STOP    #$2700     
000015EE  4EB8 14B6                579  ROd_LSd_ASdcode11   JSR     ROL_ROR
000015F2  4EB9 0000229E            580                      JSR     DONE 
000015F8                           581     
000015F8                           582  ***************************** END  ROd_LSd_ASd ************************************
000015F8                           583  
000015F8                           584  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
000015F8  4FF8 7000                585  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
000015FC  41F9 00001622            586                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
00001602  4280                     587                      CLR.L   D0                  ; Zero it
00001604  303C 6F00                588                      MOVE.W  #example,D0         ; We'll play with it here
00001608  123C 0007                589                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000160C  E360                     590                      ASL.W   D1,D0            
0000160E  123C 000C                591                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001612  E268                     592                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001614                           593                                      ; and the rest are zeroed out)           
00001614  123C 0001                594                      MOVE.B  #1,D1           ; Shift 1 bits right
00001618  E260                     595                      ASR.W   D1,D0 
0000161A                           596                      
0000161A  C0FC 0006                597                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000161E  4EB0 0000                598                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001622                           599  
00001622  4EF9 00001652            600  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
00001628  4EF9 0000165E            601                                          JMP    ANDcode001   ; AND.W                                     
0000162E  4EF9 0000166A            602                                          JMP    ANDcode010   ; AND.L
00001634                           603                                   
00001634  4EF9 00001676            604                                          JMP    ANDcode011   
0000163A  4EF9 0000167A            605                                          JMP    ANDcode100   ; AND.B
00001640  4EF9 00001686            606                                          JMP    ANDcode101   ; AND.W 
00001646  4EF9 00001692            607                                          JMP    ANDcode110   ; AND.L
0000164C  4EF9 0000169E            608                                          JMP    ANDcode111   ; MULS.W
00001652                           609  
00001652                           610  
00001652  4EB9 00001F86            611  ANDcode000   JSR     ISANDB
00001658  4EB9 0000229E            612               JSR     DONE
0000165E  4EB9 00001F9C            613  ANDcode001   JSR     ISANDW  
00001664  4EB9 0000229E            614               JSR     DONE                                 
0000166A  4EB9 00001FB2            615  ANDcode010   JSR     ISANDL 
00001670  4EB9 0000229E            616               JSR     DONE  
00001676  4E72 2700                617  ANDcode011   STOP  #$2700
0000167A  4EB9 00001F86            618  ANDcode100   JSR     ISANDB
00001680  4EB9 0000229E            619               JSR     DONE
00001686  4EB9 00001F9C            620  ANDcode101   JSR     ISANDW  
0000168C  4EB9 0000229E            621               JSR     DONE                                 
00001692  4EB9 00001FB2            622  ANDcode110   JSR     ISANDL 
00001698  4EB9 0000229E            623               JSR     DONE 
0000169E  4EB9 00001F70            624  ANDcode111   JSR     ISMULSW
000016A4  4EB9 0000229E            625               JSR     DONE
000016AA                           626     
000016AA                           627  ***************************** END  ADD_BorADD_WorADD_L ************************************
000016AA                           628  
000016AA                           629  *****************************  ADD_BorADD_WorADD_L ************************************
000016AA  4FF8 7000                630  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
000016AE  41F9 000016D4            631                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
000016B4  4280                     632                      CLR.L   D0                  ; Zero it
000016B6  303C 6F00                633                      MOVE.W  #example,D0         ; We'll play with it here
000016BA  123C 0007                634                      MOVE.B  #7,D1           ; Shift 7 bits left 
000016BE  E360                     635                      ASL.W   D1,D0            
000016C0  123C 000C                636                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000016C4  E268                     637                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000016C6                           638                                      ; and the rest are zeroed out)           
000016C6  123C 0001                639                      MOVE.B  #1,D1           ; Shift 1 bits right
000016CA  E260                     640                      ASR.W   D1,D0 
000016CC                           641                      
000016CC  C0FC 0006                642                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016D0  4EB0 0000                643                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000016D4                           644  
000016D4  4EF9 00001704            645  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
000016DA  4EF9 00001710            646                                   JMP    ADDcode001   *ADD.W                                      
000016E0  4EF9 0000171C            647                                   JMP    ADDcode010   *ADD.L
000016E6                           648                                   
000016E6  4EF9 00001728            649                                   JMP    ADDcode011   *ADDA.W
000016EC  4EF9 00001734            650                                   JMP    ADDcode100   *ADD.B
000016F2  4EF9 00001740            651                                   JMP    ADDcode101   *ADD.W 
000016F8  4EF9 0000174C            652                                   JMP    ADDcode110   *ADD.L
000016FE  4EF9 00001758            653                                   JMP    ADDcode111   *ADDA.L
00001704                           654  
00001704                           655  
00001704  4EB9 00001FF4            656  ADDcode000   JSR     ISADDB
0000170A  4EB9 0000229E            657               JSR     DONE
00001710  4EB9 0000200A            658  ADDcode001   JSR     ISADDW  
00001716  4EB9 0000229E            659               JSR     DONE                                 
0000171C  4EB9 00002020            660  ADDcode010   JSR     ISADDL 
00001722  4EB9 0000229E            661               JSR     DONE  
00001728  4EB9 00001FC8            662  ADDcode011   JSR     ISADDAW
0000172E  4EB9 0000229E            663               JSR     DONE
00001734  4EB9 00001FF4            664  ADDcode100   JSR     ISADDB
0000173A  4EB9 0000229E            665               JSR     DONE
00001740  4EB9 0000200A            666  ADDcode101   JSR     ISADDW  
00001746  4EB9 0000229E            667               JSR     DONE                                 
0000174C  4EB9 00002020            668  ADDcode110   JSR     ISADDL 
00001752  4EB9 0000229E            669               JSR     DONE 
00001758  4EB9 00001FDE            670  ADDcode111   JSR     ISADDAL
0000175E  4EB9 0000229E            671               JSR     DONE
00001764                           672     
00001764                           673  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001764                           674  
00001764                           675  *****************************  SUB_BorSUB_WorSUB_L ************************************
00001764  4FF8 7000                676  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
00001768  41F9 0000178E            677                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
0000176E  4280                     678                      CLR.L   D0                  ; Zero it
00001770  303C 6F00                679                      MOVE.W  #example,D0         ; We'll play with it here
00001774  123C 0007                680                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001778  E360                     681                      ASL.W   D1,D0            
0000177A  123C 000C                682                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000177E  E268                     683                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001780                           684                                      ; and the rest are zeroed out)           
00001780  123C 0001                685                      MOVE.B  #1,D1           ; Shift 1 bits right
00001784  E260                     686                      ASR.W   D1,D0 
00001786                           687                      
00001786  C0FC 0006                688                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000178A  4EB0 0000                689                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000178E                           690  
0000178E  4EF9 000017B8            691  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
00001794  4EF9 000017C4            692                                   JMP    SUBcode001   *SUB.W                                      
0000179A  4EF9 000017D0            693                                   JMP    SUBcode010   *SUB.L
000017A0                           694                                   
000017A0  4EF9 000017DC            695                                   JMP    SUBcode011   
000017A6  4EF9 000017E0            696                                   JMP    SUBcode100   *SUB.B
000017AC  4EF9 000017EC            697                                   JMP    SUBcode101   *SUB.W 
000017B2  4EF9 000017F8            698                                   JMP    SUBcode110   *SUB.L
000017B8                           699     
000017B8                           700  
000017B8                           701  
000017B8  4EB9 00002036            702  SUBcode000   JSR     ISSUBB
000017BE  4EB9 0000229E            703               JSR     DONE
000017C4  4EB9 0000204C            704  SUBcode001   JSR     ISSUBW  
000017CA  4EB9 0000229E            705               JSR     DONE                                 
000017D0  4EB9 00002062            706  SUBcode010   JSR     ISSUBL 
000017D6  4EB9 0000229E            707               JSR     DONE  
000017DC  4E72 2700                708  SUBcode011   STOP  #$2700 
000017E0  4EB9 00002036            709  SUBcode100   JSR     ISSUBB
000017E6  4EB9 0000229E            710               JSR     DONE
000017EC  4EB9 0000204C            711  SUBcode101   JSR     ISSUBW  
000017F2  4EB9 0000229E            712               JSR     DONE                                 
000017F8  4EB9 00002062            713  SUBcode110   JSR     ISSUBL 
000017FE  4EB9 0000229E            714               JSR     DONE 
00001804                           715     
00001804                           716  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
00001804                           717  
00001804                           718  
00001804                           719  ***************************** CMP_BorCMP_WorCMP_L ************************************
00001804  4FF8 7000                720  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
00001808  41F9 0000182E            721                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
0000180E  4280                     722                      CLR.L   D0                  ; Zero it
00001810  303C 6F00                723                      MOVE.W  #example,D0         ; We'll play with it here
00001814  123C 0007                724                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001818  E360                     725                      ASL.W   D1,D0            
0000181A  123C 000C                726                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000181E  E268                     727                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001820                           728                                      ; and the rest are zeroed out)           
00001820  123C 0001                729                      MOVE.B  #1,D1           ; Shift 1 bits right
00001824  E260                     730                      ASR.W   D1,D0 
00001826                           731                      
00001826  C0FC 0006                732                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000182A  4EB0 0000                733                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000182E                           734  
0000182E  4EF9 00001840            735  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
00001834  4EF9 0000184C            736                                   JMP    CMPcode001   *CMP.W                                      
0000183A  4EF9 00001858            737                                   JMP    CMPcode010   *CMP.L
00001840                           738  
00001840  4EB9 00002078            739  CMPcode000   JSR     ISCMPB
00001846  4EB9 0000229E            740              JSR     DONE
0000184C  4EB9 0000208E            741  CMPcode001   JSR     ISCMPW  
00001852  4EB9 0000229E            742              JSR     DONE                                 
00001858  4EB9 000020A4            743  CMPcode010   JSR     ISCMPL 
0000185E  4EB9 0000229E            744              JSR     DONE                    
00001864                           745  
00001864                           746  ***************************** END CMP_BorCMP_WorCMP_L ************************************
00001864                           747  
00001864                           748  
00001864                           749  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
00001864  4FF8 7000                750  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
00001868  41F9 0000188E            751                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
0000186E  4280                     752                      CLR.L   D0                  ; Zero it
00001870  303C 6F00                753                      MOVE.W  #example,D0         ; We'll play with it here
00001874  123C 0008                754                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001878  E360                     755                      ASL.W   D1,D0            
0000187A  123C 000C                756                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000187E  E268                     757                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001880                           758                                      ; and the rest are zeroed out)           
00001880  123C 0002                759                      MOVE.B  #2,D1           ; Shift 2 bits right
00001884  E260                     760                      ASR.W   D1,D0 
00001886                           761                      
00001886  C0FC 0006                762                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000188A  4EB0 0000                763                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000188E                           764  
0000188E  4EF9 000018A0            765  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
00001894  4EF9 000018AC            766                                      JMP     ADDQcode01   *ADDQ.W                                      
0000189A  4EF9 000018B8            767                                      JMP     ADDQcode10   *ADDQ.L
000018A0                           768  
000018A0  4EB9 000020BA            769  ADDQcode00   JSR     ISADDQB
000018A6  4EB9 0000229E            770              JSR     DONE
000018AC  4EB9 000020D0            771  ADDQcode01   JSR     ISADDQW  
000018B2  4EB9 0000229E            772              JSR     DONE                                 
000018B8  4EB9 000020E6            773  ADDQcode10   JSR     ISADDQL 
000018BE  4EB9 0000229E            774              JSR     DONE                    
000018C4                           775  
000018C4                           776  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
000018C4                           777  
000018C4                           778  
000018C4                           779  *****************************someCLR ************************************
000018C4  4FF8 7000                780  someCLR     LEA     STACK,SP            ; Load the SP
000018C8  41F9 000018EE            781                      LEA     tableSomeCLR, A0            ; Index into the table
000018CE  4280                     782                      CLR.L   D0                  ; Zero it
000018D0  303C 6F00                783                      MOVE.W  #example,D0         ; We'll play with it here
000018D4  123C 0008                784                      MOVE.B  #8,D1           ; Shift 8 bits left 
000018D8  E360                     785                      ASL.W   D1,D0            
000018DA  123C 000C                786                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000018DE  E268                     787                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000018E0                           788                                      ; and the rest are zeroed out)           
000018E0  123C 0002                789                      MOVE.B  #2,D1           ; Shift 2 bits right
000018E4  E260                     790                      ASR.W   D1,D0 
000018E6                           791                      
000018E6  C0FC 0006                792                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000018EA  4EB0 0000                793                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000018EE                           794  
000018EE  4EF9 00001900            795  tableSomeCLR        JMP     CLRcode00   *CLR.B
000018F4  4EF9 0000190C            796                      JMP     CLRcode01   *CLR.W                                      
000018FA  4EF9 00001918            797                      JMP     CLRcode10   *CLR.L
00001900                           798  
00001900  4EB9 00002112            799  CLRcode00   JSR     ISCLRB
00001906  4EB9 0000229E            800              JSR     DONE
0000190C  4EB9 00002128            801  CLRcode01   JSR     ISCLRW  
00001912  4EB9 0000229E            802              JSR     DONE                                 
00001918  4EB9 0000213E            803  CLRcode10   JSR     ISCLRL  
0000191E  4EB9 0000229E            804              JSR     DONE                    
00001924                           805  
00001924                           806  *****************************END someCLR ************************************
00001924                           807  
00001924                           808  *****************************NOPorCLRorRTSorJSR ************************************
00001924  4FF8 7000                809  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
00001928  41F9 0000195C            810                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
0000192E  4280                     811                      CLR.L   D0                  ; Zero it
00001930  303C 6F00                812                      MOVE.W  #example,D0         ; We'll play with it here
00001934                           813                      
00001934  323C 4E71                814                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
00001938  B240                     815                      CMP.W   D0, D1
0000193A  6700 008C                816                      BEQ     NOPcommand
0000193E                           817   
0000193E  323C 4E75                818                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
00001942  B240                     819                      CMP.W   D0, D1
00001944  6700 0076                820                      BEQ     RTScommand
00001948                           821    
00001948  123C 0004                822                      MOVE.B  #4,D1           ; Shift 4 bits left 
0000194C  E360                     823                      ASL.W   D1,D0            
0000194E  123C 000C                824                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001952  E268                     825                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001954                           826                                      ; and the rest are zeroed out)           
00001954                           827    
00001954                           828                      
00001954  C0FC 0006                829                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001958  4EB0 0000                830                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000195C                           831  
0000195C  4EF9 000019D4            832  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
00001962  4EF9 000019D8            833                             JMP     JSRorCLRcode0001
00001968  4EF9 000019DC            834                             JMP     JSRorCLRcode0010   
0000196E  4EF9 000019E6            835                             JMP     JSRorCLRcode0011
00001974  4EF9 000019EA            836                             JMP     JSRorCLRcode0100
0000197A  4EF9 000019EE            837                             JMP     JSRorCLRcode0101
00001980  4EF9 000019F2            838                             JMP     JSRorCLRcode0110
00001986  4EF9 000019F6            839                             JMP     JSRorCLRcode0111
0000198C  4EF9 000019FA            840                             JMP     JSRorCLRcode1000
00001992  4EF9 000019FE            841                             JMP     JSRorCLRcode1001
00001998  4EF9 00001A02            842                             JMP     JSRorCLRcode1010
0000199E  4EF9 00001A06            843                             JMP     JSRorCLRcode1011
000019A4  4EF9 00001A0A            844                             JMP     JSRorCLRcode1100
000019AA  4EF9 00001A0E            845                             JMP     JSRorCLRcode1101
000019B0  4EF9 00001A12            846                             JMP     JSRorCLRcode1110
000019B6  4EF9 00001A1E            847                             JMP     JSRorCLRcode1111
000019BC                           848  
000019BC  4EB9 000021AC            849  RTScommand          JSR     ISRTS
000019C2  4EB9 0000229E            850                      JSR     DONE
000019C8  4EB9 000021D8            851  NOPcommand          JSR     ISNOP 
000019CE  4EB9 0000229E            852                      JSR     DONE                                                                  
000019D4  4E72 2700                853  JSRorCLRcode0000     STOP  #$2700
000019D8  4E72 2700                854  JSRorCLRcode0001     STOP  #$2700
000019DC  4EB8 18C4                855  JSRorCLRcode0010    JSR      someCLR
000019E0  4EB9 0000229E            856                      JSR     DONE
000019E6  4E72 2700                857  JSRorCLRcode0011     STOP  #$2700
000019EA  4E72 2700                858  JSRorCLRcode0100     STOP  #$2700
000019EE  4E72 2700                859  JSRorCLRcode0101     STOP  #$2700
000019F2  4E72 2700                860  JSRorCLRcode0110     STOP  #$2700
000019F6  4E72 2700                861  JSRorCLRcode0111     STOP  #$2700
000019FA  4E72 2700                862  JSRorCLRcode1000     STOP  #$2700
000019FE  4E72 2700                863  JSRorCLRcode1001     STOP  #$2700
00001A02  4E72 2700                864  JSRorCLRcode1010     STOP  #$2700
00001A06  4E72 2700                865  JSRorCLRcode1011     STOP  #$2700
00001A0A  4E72 2700                866  JSRorCLRcode1100     STOP  #$2700
00001A0E  4E72 2700                867  JSRorCLRcode1101     STOP  #$2700
00001A12  4EB9 00002196            868  JSRorCLRcode1110    JSR     ISJSR
00001A18  4EB9 0000229E            869                      JSR     DONE
00001A1E  4E72 2700                870  JSRorCLRcode1111     STOP  #$2700
00001A22                           871  
00001A22                           872  *****************************END NOPorCLRorRTSorJSR ************************************
00001A22                           873  
00001A22                           874  
00001A22                           875  *****************************someMOVEM ************************************
00001A22  4FF8 7000                876  someMOVEM     LEA     STACK,SP            ; Load the SP
00001A26  41F9 00001A4C            877                      LEA     tableSomeMOVEM, A0            ; Index into the table
00001A2C  4280                     878                      CLR.L   D0                  ; Zero it
00001A2E  303C 6F00                879                      MOVE.W  #example,D0         ; We'll play with it here
00001A32  123C 0009                880                      MOVE.B  #9,D1           ; Shift 9 bits left 
00001A36  E360                     881                      ASL.W   D1,D0            
00001A38  123C 000C                882                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001A3C  E268                     883                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001A3E                           884                                      ; and the rest are zeroed out)           
00001A3E  123C 0003                885                      MOVE.B  #3,D1           ; Shift 3 bits right
00001A42  E260                     886                      ASR.W   D1,D0  
00001A44                           887                      
00001A44  C0FC 0006                888                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A48  4EB0 0000                889                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001A4C                           890  
00001A4C  4EF9 00001A58            891  tableSomeMOVEM    JMP     MOVEMcode0   ;MOVEM.W
00001A52  4EF9 00001A64            892                    JMP     MOVEMcode1   ;MOVEM.L                                      
00001A58                           893                        
00001A58                           894  
00001A58                           895                            
00001A58  4EB9 0000216A            896  MOVEMcode0         JSR     ISMOVEMW
00001A5E  4EB9 0000229E            897                      JSR     DONE
00001A64  4EB9 00002154            898  MOVEMcode1         JSR     ISMOVEML
00001A6A  4EB9 0000229E            899                      JSR     DONE
00001A70                           900  
00001A70                           901  *****************************END someMOVEM ************************************
00001A70                           902  
00001A70                           903  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001A70  4FF8 7000                904  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
00001A74  41F9 00001A9A            905                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001A7A  4280                     906                      CLR.L   D0                  ; Zero it
00001A7C  303C 6F00                907                      MOVE.W  #example,D0         ; We'll play with it here
00001A80  123C 0007                908                      MOVE.B  #7,D1           ; Shift 7 bits right 
00001A84  E260                     909                      ASR.W   D1,D0 
00001A86                           910  
00001A86  123C 000D                911                      MOVE.B  #13,D1           ; Shift 13 bits left 
00001A8A  E360                     912                      ASL.W   D1,D0            
00001A8C  123C 000C                913                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001A90  E268                     914                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001A92                           915                                      ; and the rest are zeroed out)         
00001A92                           916    
00001A92                           917                      
00001A92  C0FC 0006                918                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A96  4EB0 0000                919                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001A9A                           920  
00001A9A  4EF9 00001AF4            921  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
00001AA0  4EF9 00001AFE            922                                    JMP     LOTScode0001
00001AA6  4EF9 00001B02            923                                    JMP     LOTScode0010
00001AAC  4EF9 00001B0C            924                                    JMP     LOTScode0011
00001AB2  4EF9 00001B10            925                                    JMP     LOTScode0100
00001AB8  4EF9 00001B14            926                                    JMP     LOTScode0101
00001ABE  4EF9 00001B18            927                                    JMP     LOTScode0110
00001AC4  4EF9 00001B24            928                                    JMP     LOTScode0111
00001ACA  4EF9 00001B28            929                                    JMP     LOTScode1000
00001AD0  4EF9 00001B32            930                                    JMP     LOTScode1001
00001AD6  4EF9 00001B36            931                                    JMP     LOTScode1010
00001ADC  4EF9 00001B40            932                                    JMP     LOTScode1011
00001AE2  4EF9 00001B44            933                                    JMP     LOTScode1100
00001AE8  4EF9 00001B48            934                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001AEE  4EF9 00001B58            935                                    JMP     LOTScode1111                           
00001AF4                           936                        
00001AF4                           937  
00001AF4                           938                            
00001AF4  4EB8 1186                939  LOTScode0000        JSR   MULSLorDIVUL
00001AF8  4EB9 0000229E            940                      JSR    DONE 
00001AFE  4E72 2700                941  LOTScode0001        STOP  #$2700
00001B02  4EB8 1A22                942  LOTScode0010        JSR    someMOVEM
00001B06  4EB9 0000229E            943                      JSR    DONE
00001B0C  4E72 2700                944  LOTScode0011        STOP  #$2700                   
00001B10  4E72 2700                945  LOTScode0100        STOP  #$2700
00001B14  4E72 2700                946  LOTScode0101        STOP  #$2700
00001B18  4EB9 00002180            947  LOTScode0110        JSR    ISLEA  
00001B1E  4EB9 0000229E            948                      JSR    DONE 
00001B24  4E72 2700                949  LOTScode0111        STOP  #$2700 
00001B28  4EB8 1924                950  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001B2C  4EB9 0000229E            951                      JSR    DONE
00001B32  4E72 2700                952  LOTScode1001        STOP  #$2700               
00001B36  4EB8 1924                953  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001B3A  4EB9 0000229E            954                      JSR    DONE
00001B40  4E72 2700                955  LOTScode1011        STOP  #$2700                   
00001B44  4E72 2700                956  LOTScode1100        STOP  #$2700
00001B48  4E72 2700                957  LOTScode1101        STOP  #$2700
00001B4C  4EB9 00002180            958  LOTScode1110        JSR    ISLEA 
00001B52  4EB9 0000229E            959                      JSR    DONE
00001B58  4E72 2700                960  LOTScode1111        STOP  #$2700                
00001B5C                           961                     
00001B5C                           962  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001B5C                           963  
00001B5C                           964  
00001B5C                           965  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001B5C  4FF8 7000                966  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001B60  41F9 00001B80            967                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001B66  4280                     968                      CLR.L   D0                  ; Zero it
00001B68  303C 6F00                969                      MOVE.W  #example,D0         ; We'll play with it here
00001B6C  123C 0007                970                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001B70  E360                     971                      ASL.W   D1,D0            
00001B72  123C 000D                972                      MOVE.B  #13,D1           
00001B76  E260                     973                      ASR.W   D1,D0             
00001B78                           974    
00001B78                           975                      
00001B78  C0FC 0006                976                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B7C  4EB0 0000                977                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001B80                           978  
00001B80  4EF9 00001B92            979  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001B86  4EF9 00001B9E            980                                 JMP     ADDIWcode01
00001B8C  4EF9 00001BAA            981                                 JMP     ADDILcode10
00001B92                           982  
00001B92                           983                            
00001B92  4EB9 00002288            984  ADDIBcode00        JSR     ISADDIB
00001B98  4EB9 0000229E            985                      JSR    DONE
00001B9E  4EB9 0000225C            986  ADDIWcode01        JSR     ISADDIW
00001BA4  4EB9 0000229E            987                      JSR    DONE
00001BAA  4EB9 00002272            988  ADDILcode10        JSR     ISADDIL
00001BB0  4EB9 0000229E            989                      JSR    DONE
00001BB6                           990  
00001BB6                           991  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001BB6                           992  
00001BB6                           993  
00001BB6                           994  
00001BB6                           995  
00001BB6                           996  *****************************MOVEA_LorMOVE_L ************************************
00001BB6  4FF8 7000                997  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001BBA  41F9 00001BDA            998                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001BC0  4280                     999                      CLR.L   D0                  ; Zero it
00001BC2  303C 6F00               1000                      MOVE.W  #example,D0         ; We'll play with it here
00001BC6  123C 0007               1001                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001BCA  E360                    1002                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001BCC  123C 000D               1003                      MOVE.B  #13,D1           ; Shift 13 bits right
00001BD0  E260                    1004                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001BD2                          1005    
00001BD2                          1006                      
00001BD2  C0FC 0006               1007                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001BD6  4EB0 0000               1008                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001BDA                          1009  
00001BDA  4EF9 00001C0A           1010  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001BE0  4EF9 00001C16           1011                          JMP     MOVEAcode001
00001BE6  4EF9 00001C22           1012                          JMP     MOVEcode010
00001BEC  4EF9 00001C2E           1013                          JMP     MOVEcode011
00001BF2  4EF9 00001C3A           1014                          JMP     MOVEcode100
00001BF8  4EF9 00001C46           1015                          JMP     MOVEcode101
00001BFE  4EF9 00001C52           1016                          JMP     MOVEcode110
00001C04  4EF9 00001C5E           1017                          JMP     MOVEcode111
00001C0A                          1018                            
00001C0A  4EB9 0000221A           1019  MOVEcode000     JSR     ISMOVEL
00001C10  4EB9 0000229E           1020                  JSR    DONE
00001C16  4EB9 00002230           1021  MOVEAcode001    JSR     ISMOVEAL
00001C1C  4EB9 0000229E           1022                  JSR    DONE
00001C22  4EB9 0000221A           1023  MOVEcode010     JSR     ISMOVEL
00001C28  4EB9 0000229E           1024                  JSR    DONE
00001C2E  4EB9 0000221A           1025  MOVEcode011     JSR     ISMOVEL
00001C34  4EB9 0000229E           1026                  JSR    DONE
00001C3A  4EB9 0000221A           1027  MOVEcode100     JSR     ISMOVEL
00001C40  4EB9 0000229E           1028                  JSR    DONE
00001C46  4EB9 0000221A           1029  MOVEcode101     JSR     ISMOVEL
00001C4C  4EB9 0000229E           1030                  JSR    DONE
00001C52  4EB9 0000221A           1031  MOVEcode110     JSR     ISMOVEL
00001C58  4EB9 0000229E           1032                  JSR    DONE
00001C5E  4EB9 0000221A           1033  MOVEcode111     JSR     ISMOVEL 
00001C64  4EB9 0000229E           1034                  JSR    DONE
00001C6A                          1035  *****************************END MOVEA_LorMOVE_L ************************************
00001C6A                          1036  
00001C6A                          1037  *****************************MOVEA_WorMOVE_W ************************************
00001C6A  4FF8 7000               1038  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001C6E  41F9 00001C8E           1039                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001C74  4280                    1040                      CLR.L   D0                  ; Zero it
00001C76  303C 6F00               1041                      MOVE.W  #example,D0         ; We'll play with it here
00001C7A  123C 0007               1042                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001C7E  E360                    1043                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001C80  123C 000D               1044                      MOVE.B  #13,D1           ; Shift 13 bits right
00001C84  E260                    1045                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001C86                          1046    
00001C86                          1047                      
00001C86  C0FC 0006               1048                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001C8A  4EB0 0000               1049                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001C8E                          1050  
00001C8E  4EF9 00001CBE           1051  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001C94  4EF9 00001CCA           1052                          JMP     MOVEAWcode001
00001C9A  4EF9 00001CD6           1053                          JMP     MOVEWcode010
00001CA0  4EF9 00001CE2           1054                          JMP     MOVEWcode011
00001CA6  4EF9 00001CEE           1055                          JMP     MOVEWcode100
00001CAC  4EF9 00001CFA           1056                          JMP     MOVEWcode101
00001CB2  4EF9 00001D06           1057                          JMP     MOVEWcode110
00001CB8  4EF9 00001D12           1058                          JMP     MOVEWcode111
00001CBE                          1059                            
00001CBE  4EB9 000021EE           1060  MOVEWcode000     JSR     ISMOVEW
00001CC4  4EB9 0000229E           1061                  JSR    DONE
00001CCA  4EB9 00002204           1062  MOVEAWcode001    JSR     ISMOVEAW
00001CD0  4EB9 0000229E           1063                  JSR    DONE
00001CD6  4EB9 000021EE           1064  MOVEWcode010     JSR     ISMOVEW
00001CDC  4EB9 0000229E           1065                  JSR    DONE
00001CE2  4EB9 000021EE           1066  MOVEWcode011     JSR     ISMOVEW
00001CE8  4EB9 0000229E           1067                  JSR    DONE
00001CEE  4EB9 000021EE           1068  MOVEWcode100     JSR     ISMOVEW
00001CF4  4EB9 0000229E           1069                  JSR    DONE
00001CFA  4EB9 000021EE           1070  MOVEWcode101     JSR     ISMOVEW
00001D00  4EB9 0000229E           1071                  JSR    DONE
00001D06  4EB9 000021EE           1072  MOVEWcode110     JSR     ISMOVEW
00001D0C  4EB9 0000229E           1073                  JSR    DONE
00001D12  4EB9 000021EE           1074  MOVEWcode111     JSR     ISMOVEW 
00001D18  4EB9 0000229E           1075                  JSR    DONE
00001D1E                          1076  *****************************END MOVEA_WorMOVE_W ************************************
00001D1E  48A7 FFFF               1077  ISBCC  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D22  43F9 00002498           1078              LEA MESSAGEBCC, A1         
00001D28  103C 000E               1079              MOVE.B  #14, D0
00001D2C  4E4F                    1080              TRAP    #15
00001D2E                          1081     
00001D2E  4C9F FFFF               1082              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D32  4E75                    1083              RTS
00001D34  48A7 FFFF               1084  ISBGT  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D38  43F9 0000249E           1085              LEA MESSAGEBGT, A1         
00001D3E  103C 000E               1086              MOVE.B  #14, D0
00001D42  4E4F                    1087              TRAP    #15
00001D44                          1088     
00001D44  4C9F FFFF               1089              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D48  4E75                    1090              RTS
00001D4A                          1091              
00001D4A  48A7 FFFF               1092  ISBLE  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D4E  43F9 000024A4           1093              LEA MESSAGEBLE, A1         
00001D54  103C 000E               1094              MOVE.B  #14, D0
00001D58  4E4F                    1095              TRAP    #15
00001D5A                          1096     
00001D5A  4C9F FFFF               1097              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D5E  4E75                    1098              RTS
00001D60                          1099              
00001D60  48A7 FFFF               1100  ISDIVUL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D64  43F9 0000248F           1101              LEA MESSAGEDIVUL, A1         
00001D6A  103C 000E               1102              MOVE.B  #14, D0
00001D6E  4E4F                    1103              TRAP    #15
00001D70                          1104     
00001D70  4C9F FFFF               1105              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D74  4E75                    1106              RTS
00001D76                          1107  
00001D76  48A7 FFFF               1108  ISDIVUW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D7A  43F9 00002486           1109              LEA MESSAGEDIVUW, A1         
00001D80  103C 000E               1110              MOVE.B  #14, D0
00001D84  4E4F                    1111              TRAP    #15
00001D86                          1112     
00001D86  4C9F FFFF               1113              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D8A  4E75                    1114              RTS
00001D8C                          1115  
00001D8C  48A7 FFFF               1116  ISORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D90  43F9 00002471           1117              LEA MESSAGEORB, A1         
00001D96  103C 000E               1118              MOVE.B  #14, D0
00001D9A  4E4F                    1119              TRAP    #15
00001D9C                          1120     
00001D9C  4C9F FFFF               1121              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DA0  4E75                    1122              RTS
00001DA2                          1123  
00001DA2  48A7 FFFF               1124  ISORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DA6  43F9 00002478           1125              LEA MESSAGEORW, A1         
00001DAC  103C 000E               1126              MOVE.B  #14, D0
00001DB0  4E4F                    1127              TRAP    #15
00001DB2                          1128     
00001DB2  4C9F FFFF               1129              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DB6  4E75                    1130              RTS
00001DB8                          1131              
00001DB8  48A7 FFFF               1132  ISORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DBC  43F9 0000247F           1133              LEA MESSAGEORL, A1         
00001DC2  103C 000E               1134              MOVE.B  #14, D0
00001DC6  4E4F                    1135              TRAP    #15
00001DC8                          1136     
00001DC8  4C9F FFFF               1137              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DCC  4E75                    1138              RTS 
00001DCE                          1139  
00001DCE  48A7 FFFF               1140  ISASRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DD2  43F9 000023E1           1141              LEA MESSAGEASRB, A1         
00001DD8  103C 000E               1142              MOVE.B  #14, D0
00001DDC  4E4F                    1143              TRAP    #15
00001DDE                          1144     
00001DDE  4C9F FFFF               1145              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DE2  4E75                    1146              RTS
00001DE4                          1147  
00001DE4  48A7 FFFF               1148  ISASRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DE8  43F9 000023E9           1149              LEA MESSAGEASRW, A1         
00001DEE  103C 000E               1150              MOVE.B  #14, D0
00001DF2  4E4F                    1151              TRAP    #15
00001DF4                          1152     
00001DF4  4C9F FFFF               1153              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DF8  4E75                    1154              RTS
00001DFA                          1155              
00001DFA  48A7 FFFF               1156  ISASRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DFE  43F9 000023F1           1157              LEA MESSAGEASRL, A1         
00001E04  103C 000E               1158              MOVE.B  #14, D0
00001E08  4E4F                    1159              TRAP    #15
00001E0A                          1160     
00001E0A  4C9F FFFF               1161              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E0E  4E75                    1162              RTS 
00001E10                          1163  
00001E10  48A7 FFFF               1164  ISASLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E14  43F9 000023F9           1165              LEA MESSAGEASLB, A1         
00001E1A  103C 000E               1166              MOVE.B  #14, D0
00001E1E  4E4F                    1167              TRAP    #15
00001E20                          1168     
00001E20  4C9F FFFF               1169              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E24  4E75                    1170              RTS
00001E26                          1171  
00001E26  48A7 FFFF               1172  ISASLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E2A  43F9 00002401           1173              LEA MESSAGEASLW, A1         
00001E30  103C 000E               1174              MOVE.B  #14, D0
00001E34  4E4F                    1175              TRAP    #15
00001E36                          1176     
00001E36  4C9F FFFF               1177              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E3A  4E75                    1178              RTS
00001E3C                          1179              
00001E3C  48A7 FFFF               1180  ISASLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E40  43F9 00002409           1181              LEA MESSAGEASLL, A1         
00001E46  103C 000E               1182              MOVE.B  #14, D0
00001E4A  4E4F                    1183              TRAP    #15
00001E4C                          1184     
00001E4C  4C9F FFFF               1185              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E50  4E75                    1186              RTS 
00001E52                          1187              
00001E52  48A7 FFFF               1188  ISLSRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E56  43F9 00002441           1189              LEA MESSAGELSRB, A1         
00001E5C  103C 000E               1190              MOVE.B  #14, D0
00001E60  4E4F                    1191              TRAP    #15
00001E62                          1192     
00001E62  4C9F FFFF               1193              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E66  4E75                    1194              RTS
00001E68                          1195  
00001E68  48A7 FFFF               1196  ISLSRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E6C  43F9 00002449           1197              LEA MESSAGELSRW, A1         
00001E72  103C 000E               1198              MOVE.B  #14, D0
00001E76  4E4F                    1199              TRAP    #15
00001E78                          1200     
00001E78  4C9F FFFF               1201              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E7C  4E75                    1202              RTS
00001E7E                          1203              
00001E7E  48A7 FFFF               1204  ISLSRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E82  43F9 00002451           1205              LEA MESSAGELSRL, A1         
00001E88  103C 000E               1206              MOVE.B  #14, D0
00001E8C  4E4F                    1207              TRAP    #15
00001E8E                          1208     
00001E8E  4C9F FFFF               1209              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E92  4E75                    1210              RTS 
00001E94                          1211  
00001E94  48A7 FFFF               1212  ISLSLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E98  43F9 00002459           1213              LEA MESSAGELSLB, A1         
00001E9E  103C 000E               1214              MOVE.B  #14, D0
00001EA2  4E4F                    1215              TRAP    #15
00001EA4                          1216     
00001EA4  4C9F FFFF               1217              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EA8  4E75                    1218              RTS
00001EAA                          1219  
00001EAA  48A7 FFFF               1220  ISLSLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EAE  43F9 00002461           1221              LEA MESSAGELSLW, A1        
00001EB4  103C 000E               1222              MOVE.B  #14, D0
00001EB8  4E4F                    1223              TRAP    #15
00001EBA                          1224     
00001EBA  4C9F FFFF               1225              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EBE  4E75                    1226              RTS
00001EC0                          1227              
00001EC0  48A7 FFFF               1228  ISLSLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EC4  43F9 00002469           1229              LEA MESSAGELSLL, A1         
00001ECA  103C 000E               1230              MOVE.B  #14, D0
00001ECE  4E4F                    1231              TRAP    #15
00001ED0                          1232     
00001ED0  4C9F FFFF               1233              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001ED4  4E75                    1234              RTS 
00001ED6                          1235  
00001ED6  48A7 FFFF               1236  ISRORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EDA  43F9 00002411           1237              LEA MESSAGERORB, A1         
00001EE0  103C 000E               1238              MOVE.B  #14, D0
00001EE4  4E4F                    1239              TRAP    #15
00001EE6                          1240     
00001EE6  4C9F FFFF               1241              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EEA  4E75                    1242              RTS
00001EEC                          1243  
00001EEC  48A7 FFFF               1244  ISRORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EF0  43F9 00002419           1245              LEA MESSAGERORW, A1         
00001EF6  103C 000E               1246              MOVE.B  #14, D0
00001EFA  4E4F                    1247              TRAP    #15
00001EFC                          1248     
00001EFC  4C9F FFFF               1249              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F00  4E75                    1250              RTS
00001F02                          1251              
00001F02  48A7 FFFF               1252  ISRORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F06  43F9 00002421           1253              LEA MESSAGERORL, A1         
00001F0C  103C 000E               1254              MOVE.B  #14, D0
00001F10  4E4F                    1255              TRAP    #15
00001F12                          1256     
00001F12  4C9F FFFF               1257              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F16  4E75                    1258              RTS 
00001F18                          1259  
00001F18  48A7 FFFF               1260  ISROLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F1C  43F9 00002429           1261              LEA MESSAGEROLB, A1         
00001F22  103C 000E               1262              MOVE.B  #14, D0
00001F26  4E4F                    1263              TRAP    #15
00001F28                          1264     
00001F28  4C9F FFFF               1265              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F2C  4E75                    1266              RTS
00001F2E                          1267  
00001F2E  48A7 FFFF               1268  ISROLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F32  43F9 00002431           1269              LEA MESSAGEROLW, A1         
00001F38  103C 000E               1270              MOVE.B  #14, D0
00001F3C  4E4F                    1271              TRAP    #15
00001F3E                          1272     
00001F3E  4C9F FFFF               1273              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F42  4E75                    1274              RTS
00001F44                          1275              
00001F44  48A7 FFFF               1276  ISROLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F48  43F9 00002439           1277              LEA MESSAGEROLL, A1         
00001F4E  103C 000E               1278              MOVE.B  #14, D0
00001F52  4E4F                    1279              TRAP    #15
00001F54                          1280     
00001F54  4C9F FFFF               1281              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F58  4E75                    1282              RTS 
00001F5A                          1283  
00001F5A  48A7 FFFF               1284  ISMULSL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F5E  43F9 000023D8           1285              LEA MESSAGEMULSL, A1         *OPCODE is MULS.L
00001F64  103C 000E               1286              MOVE.B  #14, D0
00001F68  4E4F                    1287              TRAP    #15
00001F6A                          1288     
00001F6A  4C9F FFFF               1289              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F6E  4E75                    1290              RTS
00001F70                          1291  
00001F70  48A7 FFFF               1292  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F74  43F9 000023CF           1293              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001F7A  103C 000E               1294              MOVE.B  #14, D0
00001F7E  4E4F                    1295              TRAP    #15
00001F80                          1296     
00001F80  4C9F FFFF               1297              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F84  4E75                    1298              RTS
00001F86                          1299  
00001F86  48A7 FFFF               1300  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F8A  43F9 000023B7           1301              LEA MESSAGEANDB, A1         *OPCODE is AND.B
00001F90  103C 000E               1302              MOVE.B  #14, D0
00001F94  4E4F                    1303              TRAP    #15
00001F96                          1304     
00001F96  4C9F FFFF               1305              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F9A  4E75                    1306              RTS
00001F9C                          1307  
00001F9C  48A7 FFFF               1308  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FA0  43F9 000023BF           1309              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001FA6  103C 000E               1310              MOVE.B  #14, D0
00001FAA  4E4F                    1311              TRAP    #15
00001FAC                          1312     
00001FAC  4C9F FFFF               1313              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FB0  4E75                    1314              RTS
00001FB2                          1315              
00001FB2  48A7 FFFF               1316  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FB6  43F9 000023C7           1317              LEA MESSAGEANDL, A1         *OPCODE is AND.L
00001FBC  103C 000E               1318              MOVE.B  #14, D0
00001FC0  4E4F                    1319              TRAP    #15
00001FC2                          1320     
00001FC2  4C9F FFFF               1321              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FC6  4E75                    1322              RTS  
00001FC8                          1323  
00001FC8  48A7 FFFF               1324  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FCC  43F9 0000239B           1325              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001FD2  103C 000E               1326              MOVE.B  #14, D0
00001FD6  4E4F                    1327              TRAP    #15
00001FD8                          1328     
00001FD8  4C9F FFFF               1329              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FDC  4E75                    1330              RTS
00001FDE                          1331              
00001FDE  48A7 FFFF               1332  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FE2  43F9 000023A4           1333              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001FE8  103C 000E               1334              MOVE.B  #14, D0
00001FEC  4E4F                    1335              TRAP    #15
00001FEE                          1336     
00001FEE  4C9F FFFF               1337              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FF2  4E75                    1338              RTS 
00001FF4                          1339  
00001FF4  48A7 FFFF               1340  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FF8  43F9 00002383           1341              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
00001FFE  103C 000E               1342              MOVE.B  #14, D0
00002002  4E4F                    1343              TRAP    #15
00002004                          1344     
00002004  4C9F FFFF               1345              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002008  4E75                    1346              RTS
0000200A                          1347  
0000200A  48A7 FFFF               1348  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000200E  43F9 0000238B           1349              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
00002014  103C 000E               1350              MOVE.B  #14, D0
00002018  4E4F                    1351              TRAP    #15
0000201A                          1352     
0000201A  4C9F FFFF               1353              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000201E  4E75                    1354              RTS
00002020                          1355              
00002020  48A7 FFFF               1356  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002024  43F9 00002393           1357              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
0000202A  103C 000E               1358              MOVE.B  #14, D0
0000202E  4E4F                    1359              TRAP    #15
00002030                          1360     
00002030  4C9F FFFF               1361              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002034  4E75                    1362              RTS  
00002036                          1363  
00002036  48A7 FFFF               1364  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000203A  43F9 0000236B           1365              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
00002040  103C 000E               1366              MOVE.B  #14, D0
00002044  4E4F                    1367              TRAP    #15
00002046                          1368     
00002046  4C9F FFFF               1369              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000204A  4E75                    1370              RTS
0000204C                          1371  
0000204C  48A7 FFFF               1372  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002050  43F9 00002373           1373              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00002056  103C 000E               1374              MOVE.B  #14, D0
0000205A  4E4F                    1375              TRAP    #15
0000205C                          1376     
0000205C  4C9F FFFF               1377              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002060  4E75                    1378              RTS
00002062                          1379              
00002062  48A7 FFFF               1380  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002066  43F9 0000237B           1381              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
0000206C  103C 000E               1382              MOVE.B  #14, D0
00002070  4E4F                    1383              TRAP    #15
00002072                          1384     
00002072  4C9F FFFF               1385              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002076  4E75                    1386              RTS  
00002078                          1387  
00002078  48A7 FFFF               1388  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000207C  43F9 00002353           1389              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00002082  103C 000E               1390              MOVE.B  #14, D0
00002086  4E4F                    1391              TRAP    #15
00002088                          1392     
00002088  4C9F FFFF               1393              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000208C  4E75                    1394              RTS
0000208E                          1395  
0000208E  48A7 FFFF               1396  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002092  43F9 0000235B           1397              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00002098  103C 000E               1398              MOVE.B  #14, D0
0000209C  4E4F                    1399              TRAP    #15
0000209E                          1400     
0000209E  4C9F FFFF               1401              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020A2  4E75                    1402              RTS
000020A4                          1403              
000020A4  48A7 FFFF               1404  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020A8  43F9 00002363           1405              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
000020AE  103C 000E               1406              MOVE.B  #14, D0
000020B2  4E4F                    1407              TRAP    #15
000020B4                          1408     
000020B4  4C9F FFFF               1409              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020B8  4E75                    1410              RTS    
000020BA                          1411  
000020BA  48A7 FFFF               1412  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020BE  43F9 00002338           1413              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
000020C4  103C 000E               1414              MOVE.B  #14, D0
000020C8  4E4F                    1415              TRAP    #15
000020CA                          1416     
000020CA  4C9F FFFF               1417              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020CE  4E75                    1418              RTS
000020D0                          1419  
000020D0  48A7 FFFF               1420  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020D4  43F9 00002341           1421              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
000020DA  103C 000E               1422              MOVE.B  #14, D0
000020DE  4E4F                    1423              TRAP    #15
000020E0                          1424     
000020E0  4C9F FFFF               1425              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020E4  4E75                    1426              RTS
000020E6                          1427              
000020E6  48A7 FFFF               1428  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020EA  43F9 0000234A           1429              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
000020F0  103C 000E               1430              MOVE.B  #14, D0
000020F4  4E4F                    1431              TRAP    #15
000020F6                          1432     
000020F6  4C9F FFFF               1433              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020FA  4E75                    1434              RTS            
000020FC                          1435              
000020FC  48A7 FFFF               1436  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002100  43F9 000023AD           1437              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00002106  103C 000E               1438              MOVE.B  #14, D0
0000210A  4E4F                    1439              TRAP    #15
0000210C                          1440     
0000210C  4C9F FFFF               1441              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002110  4E75                    1442              RTS
00002112                          1443  
00002112  48A7 FFFF               1444  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002116  43F9 00002320           1445              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
0000211C  103C 000E               1446              MOVE.B  #14, D0
00002120  4E4F                    1447              TRAP    #15
00002122                          1448     
00002122  4C9F FFFF               1449              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002126  4E75                    1450              RTS
00002128                          1451  
00002128  48A7 FFFF               1452  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000212C  43F9 00002328           1453              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
00002132  103C 000E               1454              MOVE.B  #14, D0
00002136  4E4F                    1455              TRAP    #15
00002138                          1456     
00002138  4C9F FFFF               1457              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000213C  4E75                    1458              RTS
0000213E                          1459  
0000213E  48A7 FFFF               1460  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002142  43F9 00002330           1461              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
00002148  103C 000E               1462              MOVE.B  #14, D0
0000214C  4E4F                    1463              TRAP    #15
0000214E                          1464     
0000214E  4C9F FFFF               1465              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002152  4E75                    1466              RTS
00002154                          1467              
00002154  48A7 FFFF               1468  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002158  43F9 000022F4           1469              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
0000215E  103C 000E               1470              MOVE.B  #14, D0
00002162  4E4F                    1471              TRAP    #15
00002164                          1472     
00002164  4C9F FFFF               1473              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002168  4E75                    1474              RTS
0000216A                          1475  
0000216A  48A7 FFFF               1476  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000216E  43F9 000022FE           1477              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
00002174  103C 000E               1478              MOVE.B  #14, D0
00002178  4E4F                    1479              TRAP    #15
0000217A                          1480     
0000217A  4C9F FFFF               1481              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000217E  4E75                    1482              RTS  
00002180                          1483  
00002180  48A7 FFFF               1484  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002184  43F9 0000231A           1485              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
0000218A  103C 000E               1486              MOVE.B  #14, D0
0000218E  4E4F                    1487              TRAP    #15
00002190                          1488     
00002190  4C9F FFFF               1489              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002194  4E75                    1490              RTS                          ; Exit subroutine
00002196                          1491  
00002196  48A7 FFFF               1492  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000219A  43F9 00002308           1493              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
000021A0  103C 000E               1494              MOVE.B  #14, D0
000021A4  4E4F                    1495              TRAP    #15
000021A6  4C9F FFFF               1496              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021AA  4E75                    1497              RTS                          ; Exit subroutine
000021AC                          1498              
000021AC  48A7 FFFF               1499  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021B0  43F9 00002314           1500              LEA MESSAGERTS, A1         *OPCODE is RTS
000021B6  103C 000E               1501              MOVE.B  #14, D0
000021BA  4E4F                    1502              TRAP    #15
000021BC  4C9F FFFF               1503              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021C0  4E75                    1504              RTS  
000021C2                          1505  
000021C2  48A7 FFFF               1506  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021C6  43F9 0000230E           1507              LEA MESSAGECLR, A1         *OPCODE is CLR
000021CC  103C 000E               1508              MOVE.B  #14, D0
000021D0  4E4F                    1509              TRAP    #15
000021D2  4C9F FFFF               1510              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021D6  4E75                    1511              RTS  
000021D8                          1512              
000021D8  48A7 FFFF               1513  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021DC  43F9 000022A4           1514              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
000021E2  103C 000E               1515              MOVE.B  #14, D0
000021E6  4E4F                    1516              TRAP    #15
000021E8  4C9F FFFF               1517              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021EC  4E75                    1518              RTS                          ; Exit subroutine
000021EE                          1519           
000021EE  48A7 FFFF               1520  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021F2  43F9 000022AA           1521              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
000021F8  103C 000E               1522              MOVE.B  #14, D0
000021FC  4E4F                    1523              TRAP    #15
000021FE                          1524     
000021FE  4C9F FFFF               1525              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002202  4E75                    1526              RTS                          ; Exit subroutine
00002204                          1527              
00002204  48A7 FFFF               1528  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002208  43F9 000022EA           1529              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
0000220E  103C 000E               1530              MOVE.B  #14, D0
00002212  4E4F                    1531              TRAP    #15
00002214                          1532     
00002214  4C9F FFFF               1533              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002218  4E75                    1534              RTS                          ; Exit subroutine
0000221A                          1535              
0000221A  48A7 FFFF               1536  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000221E  43F9 000022B3           1537              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
00002224  103C 000E               1538              MOVE.B  #14, D0
00002228  4E4F                    1539              TRAP    #15
0000222A                          1540              
0000222A  4C9F FFFF               1541              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000222E  4E75                    1542              RTS                          ; Exit subroutine
00002230                          1543              
00002230  48A7 FFFF               1544  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002234  43F9 000022E0           1545              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
0000223A  103C 000E               1546              MOVE.B  #14, D0
0000223E  4E4F                    1547              TRAP    #15
00002240                          1548              
00002240  4C9F FFFF               1549              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002244  4E75                    1550              RTS                          ; Exit subroutine
00002246                          1551         
00002246  48A7 FFFF               1552  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000224A  43F9 000022BC           1553              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
00002250  103C 000E               1554              MOVE.B  #14, D0
00002254  4E4F                    1555              TRAP    #15
00002256                          1556              
00002256  4C9F FFFF               1557              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000225A  4E75                    1558              RTS                          ; Exit subroutine
0000225C                          1559           
0000225C  48A7 FFFF               1560  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002260  43F9 000022C5           1561              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
00002266  103C 000E               1562              MOVE.B  #14, D0
0000226A  4E4F                    1563              TRAP    #15
0000226C                          1564              
0000226C  4C9F FFFF               1565              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002270  4E75                    1566              RTS                          ; Exit subroutine
00002272                          1567              
00002272  48A7 FFFF               1568  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002276  43F9 000022CE           1569              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
0000227C  103C 000E               1570              MOVE.B  #14, D0
00002280  4E4F                    1571              TRAP    #15
00002282                          1572              
00002282  4C9F FFFF               1573              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002286  4E75                    1574              RTS                          ; Exit subroutine
00002288                          1575                  
00002288  48A7 FFFF               1576  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000228C  43F9 000022D7           1577              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
00002292  103C 000E               1578              MOVE.B  #14, D0
00002296  4E4F                    1579              TRAP    #15
00002298                          1580              
00002298  4C9F FFFF               1581              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000229C  4E75                    1582              RTS                          ; Exit subroutine
0000229E                          1583                        
0000229E  103C 0009               1584  DONE        MOVE.B      #9, D0
000022A2  4E4F                    1585              TRAP        #15
000022A4                          1586  
000022A4  =0000000D               1587  CR  EQU     $0D 
000022A4  =0000000A               1588  LF  EQU     $0A
000022A4= 4E 4F 50 0D 0A 00       1589  MESSAGENOP DC.B    'NOP',CR,LF, 0    
000022AA                          1590      
000022AA= 4D 4F 56 45 2E 57 ...   1591  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
000022B3= 4D 4F 56 45 2E 4C ...   1592  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
000022BC= 4D 4F 56 45 2E 42 ...   1593  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
000022C5                          1594  
000022C5= 41 44 44 49 2E 57 ...   1595  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
000022CE= 41 44 44 49 2E 4C ...   1596  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
000022D7= 41 44 44 49 2E 42 ...   1597  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
000022E0                          1598  
000022E0= 4D 4F 56 45 41 2E ...   1599  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
000022EA= 4D 4F 56 45 41 2E ...   1600  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
000022F4                          1601  
000022F4= 4D 4F 56 45 4D 2E ...   1602  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
000022FE= 4D 4F 56 45 4D 2E ...   1603  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00002308                          1604  
00002308= 4A 53 52 0D 0A 00       1605  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
0000230E                          1606  
0000230E= 43 4C 52 0D 0A 00       1607  MESSAGECLR DC.B    'CLR',CR,LF, 0
00002314                          1608  
00002314= 52 54 53 0D 0A 00       1609  MESSAGERTS DC.B    'RTS',CR,LF, 0
0000231A                          1610  
0000231A= 4C 45 41 0D 0A 00       1611  MESSAGELEA DC.B    'LEA',CR,LF, 0
00002320                          1612  
00002320= 43 4C 52 2E 42 0D ...   1613  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00002328= 43 4C 52 2E 57 0D ...   1614  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00002330= 43 4C 52 2E 4C 0D ...   1615  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00002338                          1616  
00002338= 41 44 44 51 2E 42 ...   1617  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
00002341= 41 44 44 51 2E 57 ...   1618  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
0000234A= 41 44 44 51 2E 4C ...   1619  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
00002353                          1620  
00002353= 43 4D 50 2E 42 0D ...   1621  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
0000235B= 43 4D 50 2E 57 0D ...   1622  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
00002363= 43 4D 50 2E 4C 0D ...   1623  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
0000236B                          1624  
0000236B= 53 55 42 2E 42 0D ...   1625  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
00002373= 53 55 42 2E 57 0D ...   1626  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
0000237B= 53 55 42 2E 4C 0D ...   1627  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
00002383                          1628  
00002383= 41 44 44 2E 42 0D ...   1629  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0 
0000238B= 41 44 44 2E 57 0D ...   1630  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
00002393= 41 44 44 2E 4C 0D ...   1631  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
0000239B                          1632  
0000239B= 41 44 44 41 2E 57 ...   1633  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
000023A4= 41 44 44 41 2E 4C ...   1634  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
000023AD                          1635  
000023AD= 4D 4F 56 45 51 2E ...   1636  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
000023B7                          1637  
000023B7= 41 4E 44 2E 42 0D ...   1638  MESSAGEANDB DC.B    'AND.B',CR,LF, 0 
000023BF= 41 4E 44 2E 57 0D ...   1639  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
000023C7= 41 4E 44 2E 4C 0D ...   1640  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
000023CF                          1641  
000023CF= 4D 55 4C 53 2E 57 ...   1642  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
000023D8= 4D 55 4C 53 2E 4C ...   1643  MESSAGEMULSL DC.B    'MULS.L',CR,LF, 0
000023E1                          1644  
000023E1= 41 53 52 2E 42 0D ...   1645  MESSAGEASRB DC.B    'ASR.B',CR,LF, 0 
000023E9= 41 53 52 2E 57 0D ...   1646  MESSAGEASRW DC.B    'ASR.W',CR,LF, 0
000023F1= 41 53 52 2E 4C 0D ...   1647  MESSAGEASRL DC.B    'ASR.L',CR,LF, 0
000023F9                          1648  
000023F9= 41 53 4C 2E 42 0D ...   1649  MESSAGEASLB DC.B    'ASL.B',CR,LF, 0 
00002401= 41 53 4C 2E 57 0D ...   1650  MESSAGEASLW DC.B    'ASL.W',CR,LF, 0
00002409= 41 53 4C 2E 4C 0D ...   1651  MESSAGEASLL DC.B    'ASL.L',CR,LF, 0
00002411                          1652  
00002411= 52 4F 52 2E 42 0D ...   1653  MESSAGERORB DC.B    'ROR.B',CR,LF, 0 
00002419= 52 4F 52 2E 57 0D ...   1654  MESSAGERORW DC.B    'ROR.W',CR,LF, 0
00002421= 52 4F 52 2E 4C 0D ...   1655  MESSAGERORL DC.B    'ROR.L',CR,LF, 0
00002429                          1656  
00002429= 52 4F 4C 2E 42 0D ...   1657  MESSAGEROLB DC.B    'ROL.B',CR,LF, 0 
00002431= 52 4F 4C 2E 57 0D ...   1658  MESSAGEROLW DC.B    'ROL.W',CR,LF, 0
00002439= 52 4F 4C 2E 4C 0D ...   1659  MESSAGEROLL DC.B    'ROL.L',CR,LF, 0
00002441                          1660  
00002441= 4C 53 52 2E 42 0D ...   1661  MESSAGELSRB DC.B    'LSR.B',CR,LF, 0 
00002449= 4C 53 52 2E 57 0D ...   1662  MESSAGELSRW DC.B    'LSR.W',CR,LF, 0
00002451= 4C 53 52 2E 4C 0D ...   1663  MESSAGELSRL DC.B    'LSR.L',CR,LF, 0
00002459                          1664  
00002459= 4C 53 4C 2E 42 0D ...   1665  MESSAGELSLB DC.B    'LSL.B',CR,LF, 0 
00002461= 4C 53 4C 2E 57 0D ...   1666  MESSAGELSLW DC.B    'LSL.W',CR,LF, 0
00002469= 4C 53 4C 2E 4C 0D ...   1667  MESSAGELSLL DC.B    'LSL.L',CR,LF, 0
00002471                          1668  
00002471= 4F 52 2E 42 0D 0A 00    1669  MESSAGEORB DC.B    'OR.B',CR,LF, 0 
00002478= 4F 52 2E 57 0D 0A 00    1670  MESSAGEORW DC.B    'OR.W',CR,LF, 0
0000247F= 4F 52 2E 4C 0D 0A 00    1671  MESSAGEORL DC.B    'OR.L',CR,LF, 0
00002486                          1672  
00002486= 44 49 56 55 2E 57 ...   1673  MESSAGEDIVUW DC.B    'DIVU.W',CR,LF, 0
0000248F= 44 49 56 55 2E 4C ...   1674  MESSAGEDIVUL DC.B    'DIVU.L',CR,LF, 0
00002498                          1675  
00002498= 42 43 43 0D 0A 00       1676  MESSAGEBCC DC.B    'BCC',CR,LF, 0 
0000249E= 42 47 54 0D 0A 00       1677  MESSAGEBGT DC.B    'BGT',CR,LF, 0
000024A4= 42 4C 45 0D 0A 00       1678  MESSAGEBLE DC.B    'BLE',CR,LF, 0
000024AA                          1679  
000024AA  FFFF FFFF               1680      SIMHALT             ; halt simulator
000024AE                          1681  
000024AE                          1682  * Put variables and constants here
000024AE                          1683  
000024AE                          1684      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          1704
ADDCODE001          1710
ADDCODE010          171C
ADDCODE011          1728
ADDCODE100          1734
ADDCODE101          1740
ADDCODE110          174C
ADDCODE111          1758
ADDIBCODE00         1B92
ADDILCODE10         1BAA
ADDIWCODE01         1B9E
ADDI_BORADDI_WORADDI_L  1B5C
ADDQCODE00          18A0
ADDQCODE01          18AC
ADDQCODE10          18B8
ADDQ_BORADDQ_WORADDQ_L  1864
ADD_BORADD_WORADD_L  16AA
ANDCODE000          1652
ANDCODE001          165E
ANDCODE010          166A
ANDCODE011          1676
ANDCODE100          167A
ANDCODE101          1686
ANDCODE110          1692
ANDCODE111          169E
AND_BORAND_WORAND_LORMULS_W  15F8
ASLCODE00           1312
ASLCODE01           131E
ASLCODE10           132A
ASL_ASR             154A
ASL_ASRCODE0        1580
ASL_ASRCODE1        158A
ASRCODE00           12B2
ASRCODE01           12BE
ASRCODE10           12CA
BCCORBGTORBLE       111C
BCCORBGTORBLECODE00  115E
BCCORBGTORBLECODE01  116A
BCCORBGTORBLECODE10  116E
BCCORBGTORBLECODE11  117A
CLRCODE00           1900
CLRCODE01           190C
CLRCODE10           1918
CMPCODE000          1840
CMPCODE001          184C
CMPCODE010          1858
CMP_BORCMP_WORCMP_L  1804
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10C0
CODE1000            10CC
CODE1001            10D8
CODE1010            10E4
CODE1011            10E8
CODE1100            10F4
CODE1101            1100
CODE1110            110C
CODE1111            1118
CR                  D
DONE                229E
EXAMPLE             6F00
ISADDAL             1FDE
ISADDAW             1FC8
ISADDB              1FF4
ISADDIB             2288
ISADDIL             2272
ISADDIW             225C
ISADDL              2020
ISADDQB             20BA
ISADDQL             20E6
ISADDQW             20D0
ISADDW              200A
ISANDB              1F86
ISANDL              1FB2
ISANDW              1F9C
ISASLB              1E10
ISASLL              1E3C
ISASLW              1E26
ISASRB              1DCE
ISASRL              1DFA
ISASRW              1DE4
ISBCC               1D1E
ISBGT               1D34
ISBLE               1D4A
ISCLR               21C2
ISCLRB              2112
ISCLRL              213E
ISCLRW              2128
ISCMPB              2078
ISCMPL              20A4
ISCMPW              208E
ISDIVUL             1D60
ISDIVUW             1D76
ISJSR               2196
ISLEA               2180
ISLSLB              1E94
ISLSLL              1EC0
ISLSLW              1EAA
ISLSRB              1E52
ISLSRL              1E7E
ISLSRW              1E68
ISMOVEAL            2230
ISMOVEAW            2204
ISMOVEB             2246
ISMOVEL             221A
ISMOVEML            2154
ISMOVEMW            216A
ISMOVEQL            20FC
ISMOVEW             21EE
ISMULSL             1F5A
ISMULSW             1F70
ISNOP               21D8
ISORB               1D8C
ISORL               1DB8
ISORW               1DA2
ISROLB              1F18
ISROLL              1F44
ISROLW              1F2E
ISRORB              1ED6
ISRORL              1F02
ISRORW              1EEC
ISRTS               21AC
ISSUBB              2036
ISSUBL              2062
ISSUBW              204C
JSRORCLRCODE0000    19D4
JSRORCLRCODE0001    19D8
JSRORCLRCODE0010    19DC
JSRORCLRCODE0011    19E6
JSRORCLRCODE0100    19EA
JSRORCLRCODE0101    19EE
JSRORCLRCODE0110    19F2
JSRORCLRCODE0111    19F6
JSRORCLRCODE1000    19FA
JSRORCLRCODE1001    19FE
JSRORCLRCODE1010    1A02
JSRORCLRCODE1011    1A06
JSRORCLRCODE1100    1A0A
JSRORCLRCODE1101    1A0E
JSRORCLRCODE1110    1A12
JSRORCLRCODE1111    1A1E
LF                  A
LOTSCODE0000        1AF4
LOTSCODE0001        1AFE
LOTSCODE0010        1B02
LOTSCODE0011        1B0C
LOTSCODE0100        1B10
LOTSCODE0101        1B14
LOTSCODE0110        1B18
LOTSCODE0111        1B24
LOTSCODE1000        1B28
LOTSCODE1001        1B32
LOTSCODE1010        1B36
LOTSCODE1011        1B40
LOTSCODE1100        1B44
LOTSCODE1101        1B48
LOTSCODE1110        1B4C
LOTSCODE1111        1B58
LSLCODE00           13D2
LSLCODE01           13DE
LSLCODE10           13EA
LSL_LSR             1500
LSL_LSRCODE0        1536
LSL_LSRCODE1        1540
LSRCODE00           1372
LSRCODE01           137E
LSRCODE10           138A
MESSAGEADDAL        23A4
MESSAGEADDAW        239B
MESSAGEADDB         2383
MESSAGEADDIB        22D7
MESSAGEADDIL        22CE
MESSAGEADDIW        22C5
MESSAGEADDL         2393
MESSAGEADDQB        2338
MESSAGEADDQL        234A
MESSAGEADDQW        2341
MESSAGEADDW         238B
MESSAGEANDB         23B7
MESSAGEANDL         23C7
MESSAGEANDW         23BF
MESSAGEASLB         23F9
MESSAGEASLL         2409
MESSAGEASLW         2401
MESSAGEASRB         23E1
MESSAGEASRL         23F1
MESSAGEASRW         23E9
MESSAGEBCC          2498
MESSAGEBGT          249E
MESSAGEBLE          24A4
MESSAGECLR          230E
MESSAGECLRB         2320
MESSAGECLRL         2330
MESSAGECLRW         2328
MESSAGECMPB         2353
MESSAGECMPL         2363
MESSAGECMPW         235B
MESSAGEDIVUL        248F
MESSAGEDIVUW        2486
MESSAGEJSR          2308
MESSAGELEA          231A
MESSAGELSLB         2459
MESSAGELSLL         2469
MESSAGELSLW         2461
MESSAGELSRB         2441
MESSAGELSRL         2451
MESSAGELSRW         2449
MESSAGEMOVEAL       22E0
MESSAGEMOVEAW       22EA
MESSAGEMOVEB        22BC
MESSAGEMOVEL        22B3
MESSAGEMOVEML       22F4
MESSAGEMOVEMW       22FE
MESSAGEMOVEQL       23AD
MESSAGEMOVEW        22AA
MESSAGEMULSL        23D8
MESSAGEMULSW        23CF
MESSAGENOP          22A4
MESSAGEORB          2471
MESSAGEORL          247F
MESSAGEORW          2478
MESSAGEROLB         2429
MESSAGEROLL         2439
MESSAGEROLW         2431
MESSAGERORB         2411
MESSAGERORL         2421
MESSAGERORW         2419
MESSAGERTS          2314
MESSAGESUBB         236B
MESSAGESUBL         237B
MESSAGESUBW         2373
MOVEACODE001        1C16
MOVEAWCODE001       1CCA
MOVEA_LORMOVE_L     1BB6
MOVEA_WORMOVE_W     1C6A
MOVECODE000         1C0A
MOVECODE010         1C22
MOVECODE011         1C2E
MOVECODE100         1C3A
MOVECODE101         1C46
MOVECODE110         1C52
MOVECODE111         1C5E
MOVEMCODE0          1A58
MOVEMCODE1          1A64
MOVEWCODE000        1CBE
MOVEWCODE010        1CD6
MOVEWCODE011        1CE2
MOVEWCODE100        1CEE
MOVEWCODE101        1CFA
MOVEWCODE110        1D06
MOVEWCODE111        1D12
MULSLORDIVUL        1186
MULSLORDIVULCODE0   11B6
MULSLORDIVULCODE1   11C2
NOPCOMMAND          19C8
NOPORCLRORRTSORJSR  1924
NOP_MOVEM_LEA_JSR_CLR_RTS  1A70
OR_BOROR_WOROR_LORDIVU  11CE
OR_DIVUCODE000      1222
OR_DIVUCODE001      122E
OR_DIVUCODE010      123A
OR_DIVUCODE011      1246
OR_DIVUCODE100      1252
OR_DIVUCODE101      125E
OR_DIVUCODE110      126A
ROD_LSD_ASD         1594
ROD_LSD_ASDCODE00   15D6
ROD_LSD_ASDCODE01   15E0
ROD_LSD_ASDCODE10   15EA
ROD_LSD_ASDCODE11   15EE
ROLCODE00           1432
ROLCODE01           143E
ROLCODE10           144A
ROL_ROR             14B6
ROL_RORCODE0        14EC
ROL_RORCODE1        14F6
RORCODE00           1492
RORCODE01           149E
RORCODE10           14AA
RTSCOMMAND          19BC
SHIFT               C
SOMEASL             12D6
SOMEASR             1276
SOMECLR             18C4
SOMELSL             1396
SOMELSR             1336
SOMEMOVEM           1A22
SOMEROL             13F6
SOMEROR             1456
STACK               7000
START               1000
SUBCODE000          17B8
SUBCODE001          17C4
SUBCODE010          17D0
SUBCODE011          17DC
SUBCODE100          17E0
SUBCODE101          17EC
SUBCODE110          17F8
SUB_BORSUB_WORSUB_L  1764
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1B80
TABLEADDQ_BORADDQ_WORADDQ_L  188E
TABLEADD_BORADD_WORADD_L  16D4
TABLEAND_BORAND_WORAND_LORMULS_W  1622
TABLEASL_ASR        1574
TABLEBCCORBGTORBLE  1146
TABLECMP_BORCMP_WORCMP_L  182E
TABLELSL_LSR        152A
TABLEMOVEA_LORMOVE_L  1BDA
TABLEMOVEA_WORMOVE_W  1C8E
TABLEMULSLORDIVUL   11AA
TABLENOPORCLRORRTSORJSR  195C
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  1A9A
TABLEOR_BOROR_WOROR_LORDIVU  11F8
TABLEROD_LSD_ASD    15BE
TABLEROL_ROR        14E0
TABLESOMEASL        1300
TABLESOMEASR        12A0
TABLESOMECLR        18EE
TABLESOMELSL        13C0
TABLESOMELSR        1360
TABLESOMEMOVEM      1A4C
TABLESOMEROL        1420
TABLESOMEROR        1480
TABLESUB_BORSUB_WORSUB_L  178E
