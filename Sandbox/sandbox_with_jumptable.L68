00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/13/2016 1:23:09 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000  =0000B883                 37  example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000  =0000000C                 38  shift   EQU     12                 ; Shift 12 bits 
00001000                            39  
00001000                            40  * Program starts here
00001000                            41  
00001000  4FF8 7000                 42          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E             43          LEA     table,A0            ; Index into the table
0000100A  4280                      44          CLR.L   D0                  ; Zero it
0000100C  303C B883                 45          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                 46          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                      47          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                            48                                      ; and the rest are zeroed out)
00001016  C0FC 0006                 49          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                 50          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                            51  
0000101E  4EF9 0000107E             52  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084             53          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090             54          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096             55          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C             56          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS
0000103C  4EF9 000010A8             57          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4             58          JMP     code0110
00001048  4EF9 000010B8             59          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4             60          JMP     code1000
00001054  4EF9 000010C8             61          JMP     code1001
0000105A  4EF9 000010CC             62          JMP     code1010
00001060  4EF9 000010D0             63          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010DC             64          JMP     code1100
0000106C  4EF9 000010E0             65          JMP     code1101
00001072  4EF9 000010E4             66          JMP     code1110
00001078  4EF9 000010E8             67          JMP     code1111
0000107E                            68         
0000107E                            69  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                            70  
0000107E  4EB9 00001438             71  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 000017C8             72  code0001 JSR   ISMOVEB
0000108A  4EB9 00001820             73           JSR   DONE
00001090  4EB9 00001492             74  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 00001546             75  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 00001352             76  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 00001820             77           JSR    DONE
000010A8  4EB9 0000114C             78  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 00001820             79           JSR    DONE
000010B4  4E72 2700                 80  code0110 STOP  #$2700
000010B8  4EB9 0000167E             81  code0111 JSR    ISMOVEQL
000010BE  4EB9 00001820             82           JSR    DONE
000010C4  4E72 2700                 83  code1000 STOP  #$2700
000010C8  4E72 2700                 84  code1001 STOP  #$2700
000010CC  4E72 2700                 85  code1010 STOP  #$2700
000010D0  4EB9 000010EC             86  code1011 JSR    CMP_BorCMP_WorCMP_L
000010D6  4EB9 00001820             87           JSR DONE
000010DC  4E72 2700                 88  code1100 STOP  #$2700
000010E0  4E72 2700                 89  code1101 STOP  #$2700
000010E4  4E72 2700                 90  code1110 STOP  #$2700
000010E8  4E72 2700                 91  code1111 STOP  #$2700
000010EC                            92  
000010EC                            93  ***************************** CMP_BorCMP_WorCMP_L ************************************
000010EC  4FF8 7000                 94  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
000010F0  41F9 00001116             95                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
000010F6  4280                      96                      CLR.L   D0                  ; Zero it
000010F8  303C B883                 97                      MOVE.W  #example,D0         ; We'll play with it here
000010FC  123C 0007                 98                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001100  E360                      99                      ASL.W   D1,D0            
00001102  123C 000C                100                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001106  E268                     101                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001108                           102                                      ; and the rest are zeroed out)           
00001108  123C 0001                103                      MOVE.B  #1,D1           ; Shift 1 bits right
0000110C  E260                     104                      ASR.W   D1,D0 
0000110E                           105                      
0000110E  C0FC 0006                106                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001112  4EB0 0000                107                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001116                           108  
00001116  4EF9 00001128            109  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
0000111C  4EF9 00001134            110                                   JMP    CMPcode001   *CMP.W                                      
00001122  4EF9 00001140            111                                   JMP    CMPcode010   *CMP.L
00001128                           112  
00001128  4EB9 000015FA            113  CMPcode000   JSR     ISCMPB
0000112E  4EB9 00001820            114              JSR     DONE
00001134  4EB9 00001610            115  CMPcode001   JSR     ISCMPW  
0000113A  4EB9 00001820            116              JSR     DONE                                 
00001140  4EB9 00001626            117  CMPcode010   JSR     ISCMPL 
00001146  4EB9 00001820            118              JSR     DONE                    
0000114C                           119  
0000114C                           120  ***************************** END CMP_BorCMP_WorCMP_L ************************************
0000114C                           121  
0000114C                           122  
0000114C                           123  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
0000114C  4FF8 7000                124  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
00001150  41F9 00001176            125                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
00001156  4280                     126                      CLR.L   D0                  ; Zero it
00001158  303C B883                127                      MOVE.W  #example,D0         ; We'll play with it here
0000115C  123C 0008                128                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001160  E360                     129                      ASL.W   D1,D0            
00001162  123C 000C                130                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001166  E268                     131                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001168                           132                                      ; and the rest are zeroed out)           
00001168  123C 0002                133                      MOVE.B  #2,D1           ; Shift 2 bits right
0000116C  E260                     134                      ASR.W   D1,D0 
0000116E                           135                      
0000116E  C0FC 0006                136                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001172  4EB0 0000                137                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001176                           138  
00001176  4EF9 00001188            139  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
0000117C  4EF9 00001194            140                                      JMP     ADDQcode01   *ADDQ.W                                      
00001182  4EF9 000011A0            141                                      JMP     ADDQcode10   *ADDQ.L
00001188                           142  
00001188  4EB9 0000163C            143  ADDQcode00   JSR     ISADDQB
0000118E  4EB9 00001820            144              JSR     DONE
00001194  4EB9 00001652            145  ADDQcode01   JSR     ISADDQW  
0000119A  4EB9 00001820            146              JSR     DONE                                 
000011A0  4EB9 00001668            147  ADDQcode10   JSR     ISADDQL 
000011A6  4EB9 00001820            148              JSR     DONE                    
000011AC                           149  
000011AC                           150  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
000011AC                           151  
000011AC                           152  
000011AC                           153  *****************************someCLR ************************************
000011AC  4FF8 7000                154  someCLR     LEA     STACK,SP            ; Load the SP
000011B0  41F9 000011D6            155                      LEA     tableSomeCLR, A0            ; Index into the table
000011B6  4280                     156                      CLR.L   D0                  ; Zero it
000011B8  303C B883                157                      MOVE.W  #example,D0         ; We'll play with it here
000011BC  123C 0008                158                      MOVE.B  #8,D1           ; Shift 8 bits left 
000011C0  E360                     159                      ASL.W   D1,D0            
000011C2  123C 000C                160                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011C6  E268                     161                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011C8                           162                                      ; and the rest are zeroed out)           
000011C8  123C 0002                163                      MOVE.B  #2,D1           ; Shift 2 bits right
000011CC  E260                     164                      ASR.W   D1,D0 
000011CE                           165                      
000011CE  C0FC 0006                166                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011D2  4EB0 0000                167                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011D6                           168  
000011D6  4EF9 000011E8            169  tableSomeCLR        JMP     CLRcode00   *CLR.B
000011DC  4EF9 000011F4            170                      JMP     CLRcode01   *CLR.W                                      
000011E2  4EF9 00001200            171                      JMP     CLRcode10   *CLR.L
000011E8                           172  
000011E8  4EB9 00001694            173  CLRcode00   JSR     ISCLRB
000011EE  4EB9 00001820            174              JSR     DONE
000011F4  4EB9 000016AA            175  CLRcode01   JSR     ISCLRW  
000011FA  4EB9 00001820            176              JSR     DONE                                 
00001200  4EB9 000016C0            177  CLRcode10   JSR     ISCLRL  
00001206  4EB9 00001820            178              JSR     DONE                    
0000120C                           179  
0000120C                           180  *****************************END someCLR ************************************
0000120C                           181  
0000120C                           182  *****************************NOPorCLRorRTSorJSR ************************************
0000120C  4FF8 7000                183  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
00001210  41F9 00001244            184                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
00001216  4280                     185                      CLR.L   D0                  ; Zero it
00001218  303C B883                186                      MOVE.W  #example,D0         ; We'll play with it here
0000121C                           187                      
0000121C  323C 4E71                188                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
00001220  B240                     189                      CMP.W   D0, D1
00001222  6700 008C                190                      BEQ     NOPcommand
00001226                           191   
00001226  323C 4E75                192                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
0000122A  B240                     193                      CMP.W   D0, D1
0000122C  6700 0076                194                      BEQ     RTScommand
00001230                           195    
00001230  123C 0004                196                      MOVE.B  #4,D1           ; Shift 4 bits left 
00001234  E360                     197                      ASL.W   D1,D0            
00001236  123C 000C                198                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000123A  E268                     199                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000123C                           200                                      ; and the rest are zeroed out)           
0000123C                           201    
0000123C                           202                      
0000123C  C0FC 0006                203                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001240  4EB0 0000                204                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001244                           205  
00001244  4EF9 000012BC            206  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
0000124A  4EF9 000012C0            207                             JMP     JSRorCLRcode0001
00001250  4EF9 000012C4            208                             JMP     JSRorCLRcode0010   
00001256  4EF9 000012CE            209                             JMP     JSRorCLRcode0011
0000125C  4EF9 000012D2            210                             JMP     JSRorCLRcode0100
00001262  4EF9 000012D6            211                             JMP     JSRorCLRcode0101
00001268  4EF9 000012DA            212                             JMP     JSRorCLRcode0110
0000126E  4EF9 000012DE            213                             JMP     JSRorCLRcode0111
00001274  4EF9 000012E2            214                             JMP     JSRorCLRcode1000
0000127A  4EF9 000012E6            215                             JMP     JSRorCLRcode1001
00001280  4EF9 000012EA            216                             JMP     JSRorCLRcode1010
00001286  4EF9 000012EE            217                             JMP     JSRorCLRcode1011
0000128C  4EF9 000012F2            218                             JMP     JSRorCLRcode1100
00001292  4EF9 000012F6            219                             JMP     JSRorCLRcode1101
00001298  4EF9 000012FA            220                             JMP     JSRorCLRcode1110
0000129E  4EF9 00001306            221                             JMP     JSRorCLRcode1111
000012A4                           222  
000012A4  4EB9 0000172E            223  RTScommand          JSR     ISRTS
000012AA  4EB9 00001820            224                      JSR     DONE
000012B0  4EB9 0000175A            225  NOPcommand          JSR     ISNOP 
000012B6  4EB9 00001820            226                      JSR     DONE                                                                  
000012BC  4E72 2700                227  JSRorCLRcode0000     STOP  #$2700
000012C0  4E72 2700                228  JSRorCLRcode0001     STOP  #$2700
000012C4  4EB8 11AC                229  JSRorCLRcode0010    JSR      someCLR
000012C8  4EB9 00001820            230                      JSR     DONE
000012CE  4E72 2700                231  JSRorCLRcode0011     STOP  #$2700
000012D2  4E72 2700                232  JSRorCLRcode0100     STOP  #$2700
000012D6  4E72 2700                233  JSRorCLRcode0101     STOP  #$2700
000012DA  4E72 2700                234  JSRorCLRcode0110     STOP  #$2700
000012DE  4E72 2700                235  JSRorCLRcode0111     STOP  #$2700
000012E2  4E72 2700                236  JSRorCLRcode1000     STOP  #$2700
000012E6  4E72 2700                237  JSRorCLRcode1001     STOP  #$2700
000012EA  4E72 2700                238  JSRorCLRcode1010     STOP  #$2700
000012EE  4E72 2700                239  JSRorCLRcode1011     STOP  #$2700
000012F2  4E72 2700                240  JSRorCLRcode1100     STOP  #$2700
000012F6  4E72 2700                241  JSRorCLRcode1101     STOP  #$2700
000012FA  4EB9 00001718            242  JSRorCLRcode1110    JSR     ISJSR
00001300  4EB9 00001820            243                      JSR     DONE
00001306  4E72 2700                244  JSRorCLRcode1111     STOP  #$2700
0000130A                           245  
0000130A                           246  *****************************END NOPorCLRorRTSorJSR ************************************
0000130A                           247  
0000130A                           248  
0000130A                           249  *****************************someMOVEM ************************************
0000130A  4FF8 7000                250  someMOVEM     LEA     STACK,SP            ; Load the SP
0000130E  41F9 0000132E            251                      LEA     tableSomeMOVEM, A0            ; Index into the table
00001314  4280                     252                      CLR.L   D0                  ; Zero it
00001316  303C B883                253                      MOVE.W  #example,D0         ; We'll play with it here
0000131A  123C 0009                254                      MOVE.B  #9,D1           ; Shift 9 bits left 
0000131E  E360                     255                      ASL.W   D1,D0            
00001320  123C 000C                256                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001324  E268                     257                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001326                           258                                      ; and the rest are zeroed out)           
00001326                           259    
00001326                           260                      
00001326  C0FC 0006                261                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000132A  4EB0 0000                262                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000132E                           263  
0000132E  4EF9 0000133A            264  tableSomeMOVEM    JMP     MOVEMcode00   ;MOVEM.W
00001334  4EF9 00001346            265                    JMP     MOVEMcode01   ;MOVEM.L                                      
0000133A                           266                        
0000133A                           267  
0000133A                           268                            
0000133A  4EB9 000016EC            269  MOVEMcode00         JSR     ISMOVEMW
00001340  4EB9 00001820            270                      JSR     DONE
00001346  4EB9 000016D6            271  MOVEMcode01         JSR     ISMOVEML
0000134C  4EB9 00001820            272                      JSR     DONE
00001352                           273  
00001352                           274  *****************************END someMOVEM ************************************
00001352                           275  
00001352                           276  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001352  4FF8 7000                277  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
00001356  41F9 0000137C            278                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
0000135C  4280                     279                      CLR.L   D0                  ; Zero it
0000135E  303C B883                280                      MOVE.W  #example,D0         ; We'll play with it here
00001362  123C 0007                281                      MOVE.B  #7,D1           ; Shift 7 bits right 
00001366  E260                     282                      ASR.W   D1,D0 
00001368                           283  
00001368  123C 000D                284                      MOVE.B  #13,D1           ; Shift 6 bits left 
0000136C  E360                     285                      ASL.W   D1,D0            
0000136E  123C 000C                286                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001372  E268                     287                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001374                           288                                      ; and the rest are zeroed out)         
00001374                           289    
00001374                           290                      
00001374  C0FC 0006                291                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001378  4EB0 0000                292                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000137C                           293  
0000137C  4EF9 000013D6            294  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
00001382  4EF9 000013DA            295                                    JMP     LOTScode0001
00001388  4EF9 000013DE            296                                    JMP     LOTScode0010
0000138E  4EF9 000013E8            297                                    JMP     LOTScode0011
00001394  4EF9 000013EC            298                                    JMP     LOTScode0100
0000139A  4EF9 000013F0            299                                    JMP     LOTScode0101
000013A0  4EF9 000013F4            300                                    JMP     LOTScode0110
000013A6  4EF9 00001400            301                                    JMP     LOTScode0111
000013AC  4EF9 00001404            302                                    JMP     LOTScode1000
000013B2  4EF9 0000140E            303                                    JMP     LOTScode1001
000013B8  4EF9 00001412            304                                    JMP     LOTScode1010
000013BE  4EF9 0000141C            305                                    JMP     LOTScode1011
000013C4  4EF9 00001420            306                                    JMP     LOTScode1100
000013CA  4EF9 00001424            307                                    JMP     LOTScode1101                               JMP     LOTScode1110
000013D0  4EF9 00001434            308                                    JMP     LOTScode1111                           
000013D6                           309                        
000013D6                           310  
000013D6                           311                            
000013D6  4E72 2700                312  LOTScode0000       STOP  #$2700
000013DA  4E72 2700                313  LOTScode0001       STOP  #$2700
000013DE  4EB8 130A                314  LOTScode0010        JSR    someMOVEM
000013E2  4EB9 00001820            315                     JSR    DONE
000013E8  4E72 2700                316  LOTScode0011       STOP  #$2700                   
000013EC  4E72 2700                317  LOTScode0100        STOP  #$2700
000013F0  4E72 2700                318  LOTScode0101        STOP  #$2700
000013F4  4EB9 00001702            319  LOTScode0110        JSR    ISLEA  
000013FA  4EB9 00001820            320                     JSR    DONE 
00001400  4E72 2700                321  LOTScode0111        STOP  #$2700 
00001404  4EB8 120C                322  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001408  4EB9 00001820            323                     JSR    DONE
0000140E  4E72 2700                324  LOTScode1001        STOP  #$2700               
00001412  4EB8 120C                325  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001416  4EB9 00001820            326                     JSR    DONE
0000141C  4E72 2700                327  LOTScode1011        STOP  #$2700                   
00001420  4E72 2700                328  LOTScode1100        STOP  #$2700
00001424  4E72 2700                329  LOTScode1101     STOP  #$2700
00001428  4EB9 00001702            330  LOTScode1110        JSR    ISLEA 
0000142E  4EB9 00001820            331                     JSR    DONE
00001434  4E72 2700                332  LOTScode1111       STOP  #$2700                
00001438                           333                     
00001438                           334  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001438                           335  
00001438                           336  
00001438                           337  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001438  4FF8 7000                338  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
0000143C  41F9 0000145C            339                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001442  4280                     340                      CLR.L   D0                  ; Zero it
00001444  303C B883                341                      MOVE.W  #example,D0         ; We'll play with it here
00001448  123C 0007                342                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000144C  E360                     343                      ASL.W   D1,D0            
0000144E  123C 000D                344                      MOVE.B  #13,D1           
00001452  E260                     345                      ASR.W   D1,D0             
00001454                           346    
00001454                           347                      
00001454  C0FC 0006                348                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001458  4EB0 0000                349                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000145C                           350  
0000145C  4EF9 0000146E            351  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001462  4EF9 0000147A            352                                 JMP     ADDIWcode01
00001468  4EF9 00001486            353                                 JMP     ADDILcode10
0000146E                           354  
0000146E                           355                            
0000146E  4EB9 0000180A            356  ADDIBcode00        JSR     ISADDIB
00001474  4EB9 00001820            357                      JSR    DONE
0000147A  4EB9 000017DE            358  ADDIWcode01        JSR     ISADDIW
00001480  4EB9 00001820            359                      JSR    DONE
00001486  4EB9 000017F4            360  ADDILcode10        JSR     ISADDIL
0000148C  4EB9 00001820            361                      JSR    DONE
00001492                           362  
00001492                           363  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001492                           364  
00001492                           365  
00001492                           366  
00001492                           367  
00001492                           368  *****************************MOVEA_LorMOVE_L ************************************
00001492  4FF8 7000                369  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001496  41F9 000014B6            370                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
0000149C  4280                     371                      CLR.L   D0                  ; Zero it
0000149E  303C B883                372                      MOVE.W  #example,D0         ; We'll play with it here
000014A2  123C 0007                373                      MOVE.B  #7,D1           ; Shift 7 bits left 
000014A6  E360                     374                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
000014A8  123C 000D                375                      MOVE.B  #13,D1           ; Shift 13 bits right
000014AC  E260                     376                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
000014AE                           377    
000014AE                           378                      
000014AE  C0FC 0006                379                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014B2  4EB0 0000                380                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000014B6                           381  
000014B6  4EF9 000014E6            382  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
000014BC  4EF9 000014F2            383                          JMP     MOVEAcode001
000014C2  4EF9 000014FE            384                          JMP     MOVEcode010
000014C8  4EF9 0000150A            385                          JMP     MOVEcode011
000014CE  4EF9 00001516            386                          JMP     MOVEcode100
000014D4  4EF9 00001522            387                          JMP     MOVEcode101
000014DA  4EF9 0000152E            388                          JMP     MOVEcode110
000014E0  4EF9 0000153A            389                          JMP     MOVEcode111
000014E6                           390                            
000014E6  4EB9 0000179C            391  MOVEcode000     JSR     ISMOVEL
000014EC  4EB9 00001820            392                  JSR    DONE
000014F2  4EB9 000017B2            393  MOVEAcode001    JSR     ISMOVEAL
000014F8  4EB9 00001820            394                  JSR    DONE
000014FE  4EB9 0000179C            395  MOVEcode010     JSR     ISMOVEL
00001504  4EB9 00001820            396                  JSR    DONE
0000150A  4EB9 0000179C            397  MOVEcode011     JSR     ISMOVEL
00001510  4EB9 00001820            398                  JSR    DONE
00001516  4EB9 0000179C            399  MOVEcode100     JSR     ISMOVEL
0000151C  4EB9 00001820            400                  JSR    DONE
00001522  4EB9 0000179C            401  MOVEcode101     JSR     ISMOVEL
00001528  4EB9 00001820            402                  JSR    DONE
0000152E  4EB9 0000179C            403  MOVEcode110     JSR     ISMOVEL
00001534  4EB9 00001820            404                  JSR    DONE
0000153A  4EB9 0000179C            405  MOVEcode111     JSR     ISMOVEL 
00001540  4EB9 00001820            406                  JSR    DONE
00001546                           407  *****************************END MOVEA_LorMOVE_L ************************************
00001546                           408  
00001546                           409  *****************************MOVEA_WorMOVE_W ************************************
00001546  4FF8 7000                410  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
0000154A  41F9 0000156A            411                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001550  4280                     412                      CLR.L   D0                  ; Zero it
00001552  303C B883                413                      MOVE.W  #example,D0         ; We'll play with it here
00001556  123C 0007                414                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000155A  E360                     415                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
0000155C  123C 000D                416                      MOVE.B  #13,D1           ; Shift 13 bits right
00001560  E260                     417                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001562                           418    
00001562                           419                      
00001562  C0FC 0006                420                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001566  4EB0 0000                421                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000156A                           422  
0000156A  4EF9 0000159A            423  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001570  4EF9 000015A6            424                          JMP     MOVEAWcode001
00001576  4EF9 000015B2            425                          JMP     MOVEWcode010
0000157C  4EF9 000015BE            426                          JMP     MOVEWcode011
00001582  4EF9 000015CA            427                          JMP     MOVEWcode100
00001588  4EF9 000015D6            428                          JMP     MOVEWcode101
0000158E  4EF9 000015E2            429                          JMP     MOVEWcode110
00001594  4EF9 000015EE            430                          JMP     MOVEWcode111
0000159A                           431                            
0000159A  4EB9 00001770            432  MOVEWcode000     JSR     ISMOVEW
000015A0  4EB9 00001820            433                  JSR    DONE
000015A6  4EB9 00001786            434  MOVEAWcode001    JSR     ISMOVEAW
000015AC  4EB9 00001820            435                  JSR    DONE
000015B2  4EB9 00001770            436  MOVEWcode010     JSR     ISMOVEW
000015B8  4EB9 00001820            437                  JSR    DONE
000015BE  4EB9 00001770            438  MOVEWcode011     JSR     ISMOVEW
000015C4  4EB9 00001820            439                  JSR    DONE
000015CA  4EB9 00001770            440  MOVEWcode100     JSR     ISMOVEW
000015D0  4EB9 00001820            441                  JSR    DONE
000015D6  4EB9 00001770            442  MOVEWcode101     JSR     ISMOVEW
000015DC  4EB9 00001820            443                  JSR    DONE
000015E2  4EB9 00001770            444  MOVEWcode110     JSR     ISMOVEW
000015E8  4EB9 00001820            445                  JSR    DONE
000015EE  4EB9 00001770            446  MOVEWcode111     JSR     ISMOVEW 
000015F4  4EB9 00001820            447                  JSR    DONE
000015FA                           448  *****************************END MOVEA_WorMOVE_W ************************************
000015FA                           449  
000015FA  48A7 FFFF                450  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000015FE  43F9 000018D5            451              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00001604  103C 000E                452              MOVE.B  #14, D0
00001608  4E4F                     453              TRAP    #15
0000160A                           454     
0000160A  4C9F FFFF                455              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000160E  4E75                     456              RTS
00001610                           457  
00001610  48A7 FFFF                458  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001614  43F9 000018DD            459              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
0000161A  103C 000E                460              MOVE.B  #14, D0
0000161E  4E4F                     461              TRAP    #15
00001620                           462     
00001620  4C9F FFFF                463              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001624  4E75                     464              RTS
00001626                           465              
00001626  48A7 FFFF                466  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000162A  43F9 000018E5            467              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
00001630  103C 000E                468              MOVE.B  #14, D0
00001634  4E4F                     469              TRAP    #15
00001636                           470     
00001636  4C9F FFFF                471              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000163A  4E75                     472              RTS    
0000163C                           473  
0000163C  48A7 FFFF                474  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001640  43F9 000018BA            475              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00001646  103C 000E                476              MOVE.B  #14, D0
0000164A  4E4F                     477              TRAP    #15
0000164C                           478     
0000164C  4C9F FFFF                479              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001650  4E75                     480              RTS
00001652                           481  
00001652  48A7 FFFF                482  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001656  43F9 000018C3            483              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
0000165C  103C 000E                484              MOVE.B  #14, D0
00001660  4E4F                     485              TRAP    #15
00001662                           486     
00001662  4C9F FFFF                487              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001666  4E75                     488              RTS
00001668                           489              
00001668  48A7 FFFF                490  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000166C  43F9 000018CC            491              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
00001672  103C 000E                492              MOVE.B  #14, D0
00001676  4E4F                     493              TRAP    #15
00001678                           494     
00001678  4C9F FFFF                495              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000167C  4E75                     496              RTS            
0000167E                           497              
0000167E  48A7 FFFF                498  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001682  43F9 000018ED            499              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00001688  103C 000E                500              MOVE.B  #14, D0
0000168C  4E4F                     501              TRAP    #15
0000168E                           502     
0000168E  4C9F FFFF                503              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001692  4E75                     504              RTS
00001694                           505  
00001694  48A7 FFFF                506  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001698  43F9 000018A2            507              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
0000169E  103C 000E                508              MOVE.B  #14, D0
000016A2  4E4F                     509              TRAP    #15
000016A4                           510     
000016A4  4C9F FFFF                511              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016A8  4E75                     512              RTS
000016AA                           513  
000016AA  48A7 FFFF                514  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016AE  43F9 000018AA            515              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
000016B4  103C 000E                516              MOVE.B  #14, D0
000016B8  4E4F                     517              TRAP    #15
000016BA                           518     
000016BA  4C9F FFFF                519              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016BE  4E75                     520              RTS
000016C0                           521  
000016C0  48A7 FFFF                522  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016C4  43F9 000018B2            523              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
000016CA  103C 000E                524              MOVE.B  #14, D0
000016CE  4E4F                     525              TRAP    #15
000016D0                           526     
000016D0  4C9F FFFF                527              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016D4  4E75                     528              RTS
000016D6                           529              
000016D6  48A7 FFFF                530  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016DA  43F9 00001876            531              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
000016E0  103C 000E                532              MOVE.B  #14, D0
000016E4  4E4F                     533              TRAP    #15
000016E6                           534     
000016E6  4C9F FFFF                535              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016EA  4E75                     536              RTS
000016EC                           537  
000016EC  48A7 FFFF                538  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016F0  43F9 00001880            539              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
000016F6  103C 000E                540              MOVE.B  #14, D0
000016FA  4E4F                     541              TRAP    #15
000016FC                           542     
000016FC  4C9F FFFF                543              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001700  4E75                     544              RTS  
00001702                           545  
00001702  48A7 FFFF                546  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001706  43F9 0000189C            547              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
0000170C  103C 000E                548              MOVE.B  #14, D0
00001710  4E4F                     549              TRAP    #15
00001712                           550     
00001712  4C9F FFFF                551              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001716  4E75                     552              RTS                          ; Exit subroutine
00001718                           553  
00001718  48A7 FFFF                554  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000171C  43F9 0000188A            555              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
00001722  103C 000E                556              MOVE.B  #14, D0
00001726  4E4F                     557              TRAP    #15
00001728  4C9F FFFF                558              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000172C  4E75                     559              RTS                          ; Exit subroutine
0000172E                           560              
0000172E  48A7 FFFF                561  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001732  43F9 00001896            562              LEA MESSAGERTS, A1         *OPCODE is RTS
00001738  103C 000E                563              MOVE.B  #14, D0
0000173C  4E4F                     564              TRAP    #15
0000173E  4C9F FFFF                565              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001742  4E75                     566              RTS  
00001744                           567  
00001744  48A7 FFFF                568  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001748  43F9 00001890            569              LEA MESSAGECLR, A1         *OPCODE is CLR
0000174E  103C 000E                570              MOVE.B  #14, D0
00001752  4E4F                     571              TRAP    #15
00001754  4C9F FFFF                572              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001758  4E75                     573              RTS  
0000175A                           574              
0000175A  48A7 FFFF                575  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000175E  43F9 00001826            576              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
00001764  103C 000E                577              MOVE.B  #14, D0
00001768  4E4F                     578              TRAP    #15
0000176A  4C9F FFFF                579              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000176E  4E75                     580              RTS                          ; Exit subroutine
00001770                           581           
00001770  48A7 FFFF                582  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001774  43F9 0000182C            583              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
0000177A  103C 000E                584              MOVE.B  #14, D0
0000177E  4E4F                     585              TRAP    #15
00001780                           586     
00001780  4C9F FFFF                587              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001784  4E75                     588              RTS                          ; Exit subroutine
00001786                           589              
00001786  48A7 FFFF                590  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000178A  43F9 0000186C            591              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
00001790  103C 000E                592              MOVE.B  #14, D0
00001794  4E4F                     593              TRAP    #15
00001796                           594     
00001796  4C9F FFFF                595              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000179A  4E75                     596              RTS                          ; Exit subroutine
0000179C                           597              
0000179C  48A7 FFFF                598  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017A0  43F9 00001835            599              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
000017A6  103C 000E                600              MOVE.B  #14, D0
000017AA  4E4F                     601              TRAP    #15
000017AC                           602              
000017AC  4C9F FFFF                603              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017B0  4E75                     604              RTS                          ; Exit subroutine
000017B2                           605              
000017B2  48A7 FFFF                606  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017B6  43F9 00001862            607              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
000017BC  103C 000E                608              MOVE.B  #14, D0
000017C0  4E4F                     609              TRAP    #15
000017C2                           610              
000017C2  4C9F FFFF                611              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017C6  4E75                     612              RTS                          ; Exit subroutine
000017C8                           613         
000017C8  48A7 FFFF                614  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017CC  43F9 0000183E            615              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
000017D2  103C 000E                616              MOVE.B  #14, D0
000017D6  4E4F                     617              TRAP    #15
000017D8                           618              
000017D8  4C9F FFFF                619              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017DC  4E75                     620              RTS                          ; Exit subroutine
000017DE                           621           
000017DE  48A7 FFFF                622  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017E2  43F9 00001847            623              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
000017E8  103C 000E                624              MOVE.B  #14, D0
000017EC  4E4F                     625              TRAP    #15
000017EE                           626              
000017EE  4C9F FFFF                627              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017F2  4E75                     628              RTS                          ; Exit subroutine
000017F4                           629              
000017F4  48A7 FFFF                630  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017F8  43F9 00001850            631              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
000017FE  103C 000E                632              MOVE.B  #14, D0
00001802  4E4F                     633              TRAP    #15
00001804                           634              
00001804  4C9F FFFF                635              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001808  4E75                     636              RTS                          ; Exit subroutine
0000180A                           637                  
0000180A  48A7 FFFF                638  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000180E  43F9 00001859            639              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
00001814  103C 000E                640              MOVE.B  #14, D0
00001818  4E4F                     641              TRAP    #15
0000181A                           642              
0000181A  4C9F FFFF                643              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000181E  4E75                     644              RTS                          ; Exit subroutine
00001820                           645                        
00001820  103C 0009                646  DONE        MOVE.B      #9, D0
00001824  4E4F                     647              TRAP        #15
00001826                           648  
00001826  =0000000D                649  CR  EQU     $0D 
00001826  =0000000A                650  LF  EQU     $0A
00001826= 4E 4F 50 0D 0A 00        651  MESSAGENOP DC.B    'NOP',CR,LF, 0    
0000182C                           652      
0000182C= 4D 4F 56 45 2E 57 ...    653  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
00001835= 4D 4F 56 45 2E 4C ...    654  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
0000183E= 4D 4F 56 45 2E 42 ...    655  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
00001847                           656  
00001847= 41 44 44 49 2E 57 ...    657  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
00001850= 41 44 44 49 2E 4C ...    658  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
00001859= 41 44 44 49 2E 42 ...    659  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
00001862                           660  
00001862= 4D 4F 56 45 41 2E ...    661  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
0000186C= 4D 4F 56 45 41 2E ...    662  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
00001876                           663  
00001876= 4D 4F 56 45 4D 2E ...    664  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
00001880= 4D 4F 56 45 4D 2E ...    665  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
0000188A                           666  
0000188A= 4A 53 52 0D 0A 00        667  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
00001890                           668  
00001890= 43 4C 52 0D 0A 00        669  MESSAGECLR DC.B    'CLR',CR,LF, 0
00001896                           670  
00001896= 52 54 53 0D 0A 00        671  MESSAGERTS DC.B    'RTS',CR,LF, 0
0000189C                           672  
0000189C= 4C 45 41 0D 0A 00        673  MESSAGELEA DC.B    'LEA',CR,LF, 0
000018A2                           674  
000018A2= 43 4C 52 2E 42 0D ...    675  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
000018AA= 43 4C 52 2E 57 0D ...    676  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
000018B2= 43 4C 52 2E 4C 0D ...    677  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
000018BA                           678  
000018BA= 41 44 44 51 2E 42 ...    679  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
000018C3= 41 44 44 51 2E 57 ...    680  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
000018CC= 41 44 44 51 2E 4C ...    681  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
000018D5                           682  
000018D5= 43 4D 50 2E 42 0D ...    683  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
000018DD= 43 4D 50 2E 57 0D ...    684  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
000018E5= 43 4D 50 2E 4C 0D ...    685  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
000018ED                           686  
000018ED= 4D 4F 56 45 51 2E ...    687  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
000018F7                           688  
000018F8  FFFF FFFF                689      SIMHALT             ; halt simulator
000018FC                           690  
000018FC                           691  * Put variables and constants here
000018FC                           692  
000018FC                           693      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIBCODE00         146E
ADDILCODE10         1486
ADDIWCODE01         147A
ADDI_BORADDI_WORADDI_L  1438
ADDQCODE00          1188
ADDQCODE01          1194
ADDQCODE10          11A0
ADDQ_BORADDQ_WORADDQ_L  114C
CLRCODE00           11E8
CLRCODE01           11F4
CLRCODE10           1200
CMPCODE000          1128
CMPCODE001          1134
CMPCODE010          1140
CMP_BORCMP_WORCMP_L  10EC
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10C8
CODE1010            10CC
CODE1011            10D0
CODE1100            10DC
CODE1101            10E0
CODE1110            10E4
CODE1111            10E8
CR                  D
DONE                1820
EXAMPLE             B883
ISADDIB             180A
ISADDIL             17F4
ISADDIW             17DE
ISADDQB             163C
ISADDQL             1668
ISADDQW             1652
ISCLR               1744
ISCLRB              1694
ISCLRL              16C0
ISCLRW              16AA
ISCMPB              15FA
ISCMPL              1626
ISCMPW              1610
ISJSR               1718
ISLEA               1702
ISMOVEAL            17B2
ISMOVEAW            1786
ISMOVEB             17C8
ISMOVEL             179C
ISMOVEML            16D6
ISMOVEMW            16EC
ISMOVEQL            167E
ISMOVEW             1770
ISNOP               175A
ISRTS               172E
JSRORCLRCODE0000    12BC
JSRORCLRCODE0001    12C0
JSRORCLRCODE0010    12C4
JSRORCLRCODE0011    12CE
JSRORCLRCODE0100    12D2
JSRORCLRCODE0101    12D6
JSRORCLRCODE0110    12DA
JSRORCLRCODE0111    12DE
JSRORCLRCODE1000    12E2
JSRORCLRCODE1001    12E6
JSRORCLRCODE1010    12EA
JSRORCLRCODE1011    12EE
JSRORCLRCODE1100    12F2
JSRORCLRCODE1101    12F6
JSRORCLRCODE1110    12FA
JSRORCLRCODE1111    1306
LF                  A
LOTSCODE0000        13D6
LOTSCODE0001        13DA
LOTSCODE0010        13DE
LOTSCODE0011        13E8
LOTSCODE0100        13EC
LOTSCODE0101        13F0
LOTSCODE0110        13F4
LOTSCODE0111        1400
LOTSCODE1000        1404
LOTSCODE1001        140E
LOTSCODE1010        1412
LOTSCODE1011        141C
LOTSCODE1100        1420
LOTSCODE1101        1424
LOTSCODE1110        1428
LOTSCODE1111        1434
MESSAGEADDIB        1859
MESSAGEADDIL        1850
MESSAGEADDIW        1847
MESSAGEADDQB        18BA
MESSAGEADDQL        18CC
MESSAGEADDQW        18C3
MESSAGECLR          1890
MESSAGECLRB         18A2
MESSAGECLRL         18B2
MESSAGECLRW         18AA
MESSAGECMPB         18D5
MESSAGECMPL         18E5
MESSAGECMPW         18DD
MESSAGEJSR          188A
MESSAGELEA          189C
MESSAGEMOVEAL       1862
MESSAGEMOVEAW       186C
MESSAGEMOVEB        183E
MESSAGEMOVEL        1835
MESSAGEMOVEML       1876
MESSAGEMOVEMW       1880
MESSAGEMOVEQL       18ED
MESSAGEMOVEW        182C
MESSAGENOP          1826
MESSAGERTS          1896
MOVEACODE001        14F2
MOVEAWCODE001       15A6
MOVEA_LORMOVE_L     1492
MOVEA_WORMOVE_W     1546
MOVECODE000         14E6
MOVECODE010         14FE
MOVECODE011         150A
MOVECODE100         1516
MOVECODE101         1522
MOVECODE110         152E
MOVECODE111         153A
MOVEMCODE00         133A
MOVEMCODE01         1346
MOVEWCODE000        159A
MOVEWCODE010        15B2
MOVEWCODE011        15BE
MOVEWCODE100        15CA
MOVEWCODE101        15D6
MOVEWCODE110        15E2
MOVEWCODE111        15EE
NOPCOMMAND          12B0
NOPORCLRORRTSORJSR  120C
NOP_MOVEM_LEA_JSR_CLR_RTS  1352
RTSCOMMAND          12A4
SHIFT               C
SOMECLR             11AC
SOMEMOVEM           130A
STACK               7000
START               1000
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  145C
TABLEADDQ_BORADDQ_WORADDQ_L  1176
TABLECMP_BORCMP_WORCMP_L  1116
TABLEMOVEA_LORMOVE_L  14B6
TABLEMOVEA_WORMOVE_W  156A
TABLENOPORCLRORRTSORJSR  1244
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  137C
TABLESOMECLR        11D6
TABLESOMEMOVEM      132E
