00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/13/2016 2:01:54 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001100000000011 ; SUB.B D4, D3 = 1001 100 000 000 011
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001100001000011 ; SUB.W D4, D3 = 1001 100 001 000 011
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000  =00009883                 46  example EQU     %1001100010000011 ; SUB.L D4, D3 = 1001 100 010 000 011
00001000                            47  
00001000  =0000000C                 48  shift   EQU     12                 ; Shift 12 bits 
00001000                            49  
00001000                            50  * Program starts here
00001000                            51  
00001000  4FF8 7000                 52          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E             53          LEA     table,A0            ; Index into the table
0000100A  4280                      54          CLR.L   D0                  ; Zero it
0000100C  303C 9883                 55          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                 56          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                      57          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                            58                                      ; and the rest are zeroed out)
00001016  C0FC 0006                 59          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                 60          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                            61  
0000101E  4EF9 0000107E             62  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084             63          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090             64          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096             65          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C             66          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS
0000103C  4EF9 000010A8             67          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4             68          JMP     code0110
00001048  4EF9 000010B8             69          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4             70          JMP     code1000
00001054  4EF9 000010C8             71          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010D4             72          JMP     code1010
00001060  4EF9 000010D8             73          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010E4             74          JMP     code1100
0000106C  4EF9 000010E8             75          JMP     code1101
00001072  4EF9 000010EC             76          JMP     code1110
00001078  4EF9 000010F0             77          JMP     code1111
0000107E                            78         
0000107E                            79  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                            80  
0000107E  4EB9 000014E0             81  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 000018B2             82  code0001 JSR   ISMOVEB
0000108A  4EB9 0000190A             83           JSR   DONE
00001090  4EB9 0000153A             84  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 000015EE             85  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 000013FA             86  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 0000190A             87           JSR    DONE
000010A8  4EB9 000011F4             88  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 0000190A             89           JSR    DONE
000010B4  4E72 2700                 90  code0110 STOP  #$2700
000010B8  4EB9 00001768             91  code0111 JSR    ISMOVEQL
000010BE  4EB9 0000190A             92           JSR    DONE
000010C4  4E72 2700                 93  code1000 STOP  #$2700
000010C8  4EB9 000010F4             94  code1001 JSR    SUB_BorSUB_WorSUB_L
000010CE  4EB9 0000190A             95           JSR    DONE
000010D4  4E72 2700                 96  code1010 STOP  #$2700
000010D8  4EB9 00001194             97  code1011 JSR    CMP_BorCMP_WorCMP_L
000010DE  4EB9 0000190A             98           JSR DONE
000010E4  4E72 2700                 99  code1100 STOP  #$2700
000010E8  4E72 2700                100  code1101 STOP  #$2700
000010EC  4E72 2700                101  code1110 STOP  #$2700
000010F0  4E72 2700                102  code1111 STOP  #$2700
000010F4                           103  
000010F4                           104  *****************************  SUB_BorSUB_WorSUB_L ************************************
000010F4  4FF8 7000                105  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
000010F8  41F9 0000111E            106                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
000010FE  4280                     107                      CLR.L   D0                  ; Zero it
00001100  303C 9883                108                      MOVE.W  #example,D0         ; We'll play with it here
00001104  123C 0007                109                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001108  E360                     110                      ASL.W   D1,D0            
0000110A  123C 000C                111                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000110E  E268                     112                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001110                           113                                      ; and the rest are zeroed out)           
00001110  123C 0001                114                      MOVE.B  #1,D1           ; Shift 1 bits right
00001114  E260                     115                      ASR.W   D1,D0 
00001116                           116                      
00001116  C0FC 0006                117                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000111A  4EB0 0000                118                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000111E                           119  
0000111E  4EF9 00001148            120  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
00001124  4EF9 00001154            121                                   JMP    SUBcode001   *SUB.W                                      
0000112A  4EF9 00001160            122                                   JMP    SUBcode010   *SUB.L
00001130                           123                                   
00001130  4EF9 0000116C            124                                   JMP    SUBcode011   
00001136  4EF9 00001170            125                                   JMP    SUBcode100   *SUB.B
0000113C  4EF9 0000117C            126                                   JMP    SUBcode101   *SUB.W 
00001142  4EF9 00001188            127                                   JMP    SUBcode110   *SUB.L
00001148                           128     
00001148                           129  
00001148                           130  
00001148  4EB9 000016A2            131  SUBcode000   JSR     ISSUBB
0000114E  4EB9 0000190A            132               JSR     DONE
00001154  4EB9 000016B8            133  SUBcode001   JSR     ISSUBW  
0000115A  4EB9 0000190A            134               JSR     DONE                                 
00001160  4EB9 000016CE            135  SUBcode010   JSR     ISSUBL 
00001166  4EB9 0000190A            136               JSR     DONE  
0000116C  4E72 2700                137  SUBcode011   STOP  #$2700 
00001170  4EB9 000016A2            138  SUBcode100   JSR     ISSUBB
00001176  4EB9 0000190A            139               JSR     DONE
0000117C  4EB9 000016B8            140  SUBcode101   JSR     ISSUBW  
00001182  4EB9 0000190A            141               JSR     DONE                                 
00001188  4EB9 000016CE            142  SUBcode110   JSR     ISSUBL 
0000118E  4EB9 0000190A            143               JSR     DONE 
00001194                           144     
00001194                           145  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
00001194                           146  
00001194                           147  
00001194                           148  ***************************** CMP_BorCMP_WorCMP_L ************************************
00001194  4FF8 7000                149  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
00001198  41F9 000011BE            150                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
0000119E  4280                     151                      CLR.L   D0                  ; Zero it
000011A0  303C 9883                152                      MOVE.W  #example,D0         ; We'll play with it here
000011A4  123C 0007                153                      MOVE.B  #7,D1           ; Shift 7 bits left 
000011A8  E360                     154                      ASL.W   D1,D0            
000011AA  123C 000C                155                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011AE  E268                     156                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011B0                           157                                      ; and the rest are zeroed out)           
000011B0  123C 0001                158                      MOVE.B  #1,D1           ; Shift 1 bits right
000011B4  E260                     159                      ASR.W   D1,D0 
000011B6                           160                      
000011B6  C0FC 0006                161                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011BA  4EB0 0000                162                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011BE                           163  
000011BE  4EF9 000011D0            164  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
000011C4  4EF9 000011DC            165                                   JMP    CMPcode001   *CMP.W                                      
000011CA  4EF9 000011E8            166                                   JMP    CMPcode010   *CMP.L
000011D0                           167  
000011D0  4EB9 000016E4            168  CMPcode000   JSR     ISCMPB
000011D6  4EB9 0000190A            169              JSR     DONE
000011DC  4EB9 000016FA            170  CMPcode001   JSR     ISCMPW  
000011E2  4EB9 0000190A            171              JSR     DONE                                 
000011E8  4EB9 00001710            172  CMPcode010   JSR     ISCMPL 
000011EE  4EB9 0000190A            173              JSR     DONE                    
000011F4                           174  
000011F4                           175  ***************************** END CMP_BorCMP_WorCMP_L ************************************
000011F4                           176  
000011F4                           177  
000011F4                           178  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
000011F4  4FF8 7000                179  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
000011F8  41F9 0000121E            180                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
000011FE  4280                     181                      CLR.L   D0                  ; Zero it
00001200  303C 9883                182                      MOVE.W  #example,D0         ; We'll play with it here
00001204  123C 0008                183                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001208  E360                     184                      ASL.W   D1,D0            
0000120A  123C 000C                185                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000120E  E268                     186                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001210                           187                                      ; and the rest are zeroed out)           
00001210  123C 0002                188                      MOVE.B  #2,D1           ; Shift 2 bits right
00001214  E260                     189                      ASR.W   D1,D0 
00001216                           190                      
00001216  C0FC 0006                191                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000121A  4EB0 0000                192                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000121E                           193  
0000121E  4EF9 00001230            194  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
00001224  4EF9 0000123C            195                                      JMP     ADDQcode01   *ADDQ.W                                      
0000122A  4EF9 00001248            196                                      JMP     ADDQcode10   *ADDQ.L
00001230                           197  
00001230  4EB9 00001726            198  ADDQcode00   JSR     ISADDQB
00001236  4EB9 0000190A            199              JSR     DONE
0000123C  4EB9 0000173C            200  ADDQcode01   JSR     ISADDQW  
00001242  4EB9 0000190A            201              JSR     DONE                                 
00001248  4EB9 00001752            202  ADDQcode10   JSR     ISADDQL 
0000124E  4EB9 0000190A            203              JSR     DONE                    
00001254                           204  
00001254                           205  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
00001254                           206  
00001254                           207  
00001254                           208  *****************************someCLR ************************************
00001254  4FF8 7000                209  someCLR     LEA     STACK,SP            ; Load the SP
00001258  41F9 0000127E            210                      LEA     tableSomeCLR, A0            ; Index into the table
0000125E  4280                     211                      CLR.L   D0                  ; Zero it
00001260  303C 9883                212                      MOVE.W  #example,D0         ; We'll play with it here
00001264  123C 0008                213                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001268  E360                     214                      ASL.W   D1,D0            
0000126A  123C 000C                215                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000126E  E268                     216                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001270                           217                                      ; and the rest are zeroed out)           
00001270  123C 0002                218                      MOVE.B  #2,D1           ; Shift 2 bits right
00001274  E260                     219                      ASR.W   D1,D0 
00001276                           220                      
00001276  C0FC 0006                221                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000127A  4EB0 0000                222                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000127E                           223  
0000127E  4EF9 00001290            224  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001284  4EF9 0000129C            225                      JMP     CLRcode01   *CLR.W                                      
0000128A  4EF9 000012A8            226                      JMP     CLRcode10   *CLR.L
00001290                           227  
00001290  4EB9 0000177E            228  CLRcode00   JSR     ISCLRB
00001296  4EB9 0000190A            229              JSR     DONE
0000129C  4EB9 00001794            230  CLRcode01   JSR     ISCLRW  
000012A2  4EB9 0000190A            231              JSR     DONE                                 
000012A8  4EB9 000017AA            232  CLRcode10   JSR     ISCLRL  
000012AE  4EB9 0000190A            233              JSR     DONE                    
000012B4                           234  
000012B4                           235  *****************************END someCLR ************************************
000012B4                           236  
000012B4                           237  *****************************NOPorCLRorRTSorJSR ************************************
000012B4  4FF8 7000                238  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
000012B8  41F9 000012EC            239                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
000012BE  4280                     240                      CLR.L   D0                  ; Zero it
000012C0  303C 9883                241                      MOVE.W  #example,D0         ; We'll play with it here
000012C4                           242                      
000012C4  323C 4E71                243                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
000012C8  B240                     244                      CMP.W   D0, D1
000012CA  6700 008C                245                      BEQ     NOPcommand
000012CE                           246   
000012CE  323C 4E75                247                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
000012D2  B240                     248                      CMP.W   D0, D1
000012D4  6700 0076                249                      BEQ     RTScommand
000012D8                           250    
000012D8  123C 0004                251                      MOVE.B  #4,D1           ; Shift 4 bits left 
000012DC  E360                     252                      ASL.W   D1,D0            
000012DE  123C 000C                253                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000012E2  E268                     254                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012E4                           255                                      ; and the rest are zeroed out)           
000012E4                           256    
000012E4                           257                      
000012E4  C0FC 0006                258                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012E8  4EB0 0000                259                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012EC                           260  
000012EC  4EF9 00001364            261  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
000012F2  4EF9 00001368            262                             JMP     JSRorCLRcode0001
000012F8  4EF9 0000136C            263                             JMP     JSRorCLRcode0010   
000012FE  4EF9 00001376            264                             JMP     JSRorCLRcode0011
00001304  4EF9 0000137A            265                             JMP     JSRorCLRcode0100
0000130A  4EF9 0000137E            266                             JMP     JSRorCLRcode0101
00001310  4EF9 00001382            267                             JMP     JSRorCLRcode0110
00001316  4EF9 00001386            268                             JMP     JSRorCLRcode0111
0000131C  4EF9 0000138A            269                             JMP     JSRorCLRcode1000
00001322  4EF9 0000138E            270                             JMP     JSRorCLRcode1001
00001328  4EF9 00001392            271                             JMP     JSRorCLRcode1010
0000132E  4EF9 00001396            272                             JMP     JSRorCLRcode1011
00001334  4EF9 0000139A            273                             JMP     JSRorCLRcode1100
0000133A  4EF9 0000139E            274                             JMP     JSRorCLRcode1101
00001340  4EF9 000013A2            275                             JMP     JSRorCLRcode1110
00001346  4EF9 000013AE            276                             JMP     JSRorCLRcode1111
0000134C                           277  
0000134C  4EB9 00001818            278  RTScommand          JSR     ISRTS
00001352  4EB9 0000190A            279                      JSR     DONE
00001358  4EB9 00001844            280  NOPcommand          JSR     ISNOP 
0000135E  4EB9 0000190A            281                      JSR     DONE                                                                  
00001364  4E72 2700                282  JSRorCLRcode0000     STOP  #$2700
00001368  4E72 2700                283  JSRorCLRcode0001     STOP  #$2700
0000136C  4EB8 1254                284  JSRorCLRcode0010    JSR      someCLR
00001370  4EB9 0000190A            285                      JSR     DONE
00001376  4E72 2700                286  JSRorCLRcode0011     STOP  #$2700
0000137A  4E72 2700                287  JSRorCLRcode0100     STOP  #$2700
0000137E  4E72 2700                288  JSRorCLRcode0101     STOP  #$2700
00001382  4E72 2700                289  JSRorCLRcode0110     STOP  #$2700
00001386  4E72 2700                290  JSRorCLRcode0111     STOP  #$2700
0000138A  4E72 2700                291  JSRorCLRcode1000     STOP  #$2700
0000138E  4E72 2700                292  JSRorCLRcode1001     STOP  #$2700
00001392  4E72 2700                293  JSRorCLRcode1010     STOP  #$2700
00001396  4E72 2700                294  JSRorCLRcode1011     STOP  #$2700
0000139A  4E72 2700                295  JSRorCLRcode1100     STOP  #$2700
0000139E  4E72 2700                296  JSRorCLRcode1101     STOP  #$2700
000013A2  4EB9 00001802            297  JSRorCLRcode1110    JSR     ISJSR
000013A8  4EB9 0000190A            298                      JSR     DONE
000013AE  4E72 2700                299  JSRorCLRcode1111     STOP  #$2700
000013B2                           300  
000013B2                           301  *****************************END NOPorCLRorRTSorJSR ************************************
000013B2                           302  
000013B2                           303  
000013B2                           304  *****************************someMOVEM ************************************
000013B2  4FF8 7000                305  someMOVEM     LEA     STACK,SP            ; Load the SP
000013B6  41F9 000013D6            306                      LEA     tableSomeMOVEM, A0            ; Index into the table
000013BC  4280                     307                      CLR.L   D0                  ; Zero it
000013BE  303C 9883                308                      MOVE.W  #example,D0         ; We'll play with it here
000013C2  123C 0009                309                      MOVE.B  #9,D1           ; Shift 9 bits left 
000013C6  E360                     310                      ASL.W   D1,D0            
000013C8  123C 000C                311                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013CC  E268                     312                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013CE                           313                                      ; and the rest are zeroed out)           
000013CE                           314    
000013CE                           315                      
000013CE  C0FC 0006                316                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013D2  4EB0 0000                317                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013D6                           318  
000013D6  4EF9 000013E2            319  tableSomeMOVEM    JMP     MOVEMcode00   ;MOVEM.W
000013DC  4EF9 000013EE            320                    JMP     MOVEMcode01   ;MOVEM.L                                      
000013E2                           321                        
000013E2                           322  
000013E2                           323                            
000013E2  4EB9 000017D6            324  MOVEMcode00         JSR     ISMOVEMW
000013E8  4EB9 0000190A            325                      JSR     DONE
000013EE  4EB9 000017C0            326  MOVEMcode01         JSR     ISMOVEML
000013F4  4EB9 0000190A            327                      JSR     DONE
000013FA                           328  
000013FA                           329  *****************************END someMOVEM ************************************
000013FA                           330  
000013FA                           331  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000013FA  4FF8 7000                332  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
000013FE  41F9 00001424            333                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001404  4280                     334                      CLR.L   D0                  ; Zero it
00001406  303C 9883                335                      MOVE.W  #example,D0         ; We'll play with it here
0000140A  123C 0007                336                      MOVE.B  #7,D1           ; Shift 7 bits right 
0000140E  E260                     337                      ASR.W   D1,D0 
00001410                           338  
00001410  123C 000D                339                      MOVE.B  #13,D1           ; Shift 6 bits left 
00001414  E360                     340                      ASL.W   D1,D0            
00001416  123C 000C                341                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000141A  E268                     342                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000141C                           343                                      ; and the rest are zeroed out)         
0000141C                           344    
0000141C                           345                      
0000141C  C0FC 0006                346                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001420  4EB0 0000                347                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001424                           348  
00001424  4EF9 0000147E            349  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
0000142A  4EF9 00001482            350                                    JMP     LOTScode0001
00001430  4EF9 00001486            351                                    JMP     LOTScode0010
00001436  4EF9 00001490            352                                    JMP     LOTScode0011
0000143C  4EF9 00001494            353                                    JMP     LOTScode0100
00001442  4EF9 00001498            354                                    JMP     LOTScode0101
00001448  4EF9 0000149C            355                                    JMP     LOTScode0110
0000144E  4EF9 000014A8            356                                    JMP     LOTScode0111
00001454  4EF9 000014AC            357                                    JMP     LOTScode1000
0000145A  4EF9 000014B6            358                                    JMP     LOTScode1001
00001460  4EF9 000014BA            359                                    JMP     LOTScode1010
00001466  4EF9 000014C4            360                                    JMP     LOTScode1011
0000146C  4EF9 000014C8            361                                    JMP     LOTScode1100
00001472  4EF9 000014CC            362                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001478  4EF9 000014DC            363                                    JMP     LOTScode1111                           
0000147E                           364                        
0000147E                           365  
0000147E                           366                            
0000147E  4E72 2700                367  LOTScode0000       STOP  #$2700
00001482  4E72 2700                368  LOTScode0001       STOP  #$2700
00001486  4EB8 13B2                369  LOTScode0010        JSR    someMOVEM
0000148A  4EB9 0000190A            370                     JSR    DONE
00001490  4E72 2700                371  LOTScode0011       STOP  #$2700                   
00001494  4E72 2700                372  LOTScode0100        STOP  #$2700
00001498  4E72 2700                373  LOTScode0101        STOP  #$2700
0000149C  4EB9 000017EC            374  LOTScode0110        JSR    ISLEA  
000014A2  4EB9 0000190A            375                     JSR    DONE 
000014A8  4E72 2700                376  LOTScode0111        STOP  #$2700 
000014AC  4EB8 12B4                377  LOTScode1000        JSR    NOPorCLRorRTSorJSR
000014B0  4EB9 0000190A            378                     JSR    DONE
000014B6  4E72 2700                379  LOTScode1001        STOP  #$2700               
000014BA  4EB8 12B4                380  LOTScode1010        JSR    NOPorCLRorRTSorJSR
000014BE  4EB9 0000190A            381                     JSR    DONE
000014C4  4E72 2700                382  LOTScode1011        STOP  #$2700                   
000014C8  4E72 2700                383  LOTScode1100        STOP  #$2700
000014CC  4E72 2700                384  LOTScode1101     STOP  #$2700
000014D0  4EB9 000017EC            385  LOTScode1110        JSR    ISLEA 
000014D6  4EB9 0000190A            386                     JSR    DONE
000014DC  4E72 2700                387  LOTScode1111       STOP  #$2700                
000014E0                           388                     
000014E0                           389  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000014E0                           390  
000014E0                           391  
000014E0                           392  *****************************ADDI_BorADDI_WorADDI_L ************************************
000014E0  4FF8 7000                393  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
000014E4  41F9 00001504            394                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
000014EA  4280                     395                      CLR.L   D0                  ; Zero it
000014EC  303C 9883                396                      MOVE.W  #example,D0         ; We'll play with it here
000014F0  123C 0007                397                      MOVE.B  #7,D1           ; Shift 7 bits left 
000014F4  E360                     398                      ASL.W   D1,D0            
000014F6  123C 000D                399                      MOVE.B  #13,D1           
000014FA  E260                     400                      ASR.W   D1,D0             
000014FC                           401    
000014FC                           402                      
000014FC  C0FC 0006                403                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001500  4EB0 0000                404                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001504                           405  
00001504  4EF9 00001516            406  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
0000150A  4EF9 00001522            407                                 JMP     ADDIWcode01
00001510  4EF9 0000152E            408                                 JMP     ADDILcode10
00001516                           409  
00001516                           410                            
00001516  4EB9 000018F4            411  ADDIBcode00        JSR     ISADDIB
0000151C  4EB9 0000190A            412                      JSR    DONE
00001522  4EB9 000018C8            413  ADDIWcode01        JSR     ISADDIW
00001528  4EB9 0000190A            414                      JSR    DONE
0000152E  4EB9 000018DE            415  ADDILcode10        JSR     ISADDIL
00001534  4EB9 0000190A            416                      JSR    DONE
0000153A                           417  
0000153A                           418  *****************************END ADDI_BorADDI_WorADDI_L ************************************
0000153A                           419  
0000153A                           420  
0000153A                           421  
0000153A                           422  
0000153A                           423  *****************************MOVEA_LorMOVE_L ************************************
0000153A  4FF8 7000                424  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
0000153E  41F9 0000155E            425                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001544  4280                     426                      CLR.L   D0                  ; Zero it
00001546  303C 9883                427                      MOVE.W  #example,D0         ; We'll play with it here
0000154A  123C 0007                428                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000154E  E360                     429                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001550  123C 000D                430                      MOVE.B  #13,D1           ; Shift 13 bits right
00001554  E260                     431                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001556                           432    
00001556                           433                      
00001556  C0FC 0006                434                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000155A  4EB0 0000                435                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000155E                           436  
0000155E  4EF9 0000158E            437  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001564  4EF9 0000159A            438                          JMP     MOVEAcode001
0000156A  4EF9 000015A6            439                          JMP     MOVEcode010
00001570  4EF9 000015B2            440                          JMP     MOVEcode011
00001576  4EF9 000015BE            441                          JMP     MOVEcode100
0000157C  4EF9 000015CA            442                          JMP     MOVEcode101
00001582  4EF9 000015D6            443                          JMP     MOVEcode110
00001588  4EF9 000015E2            444                          JMP     MOVEcode111
0000158E                           445                            
0000158E  4EB9 00001886            446  MOVEcode000     JSR     ISMOVEL
00001594  4EB9 0000190A            447                  JSR    DONE
0000159A  4EB9 0000189C            448  MOVEAcode001    JSR     ISMOVEAL
000015A0  4EB9 0000190A            449                  JSR    DONE
000015A6  4EB9 00001886            450  MOVEcode010     JSR     ISMOVEL
000015AC  4EB9 0000190A            451                  JSR    DONE
000015B2  4EB9 00001886            452  MOVEcode011     JSR     ISMOVEL
000015B8  4EB9 0000190A            453                  JSR    DONE
000015BE  4EB9 00001886            454  MOVEcode100     JSR     ISMOVEL
000015C4  4EB9 0000190A            455                  JSR    DONE
000015CA  4EB9 00001886            456  MOVEcode101     JSR     ISMOVEL
000015D0  4EB9 0000190A            457                  JSR    DONE
000015D6  4EB9 00001886            458  MOVEcode110     JSR     ISMOVEL
000015DC  4EB9 0000190A            459                  JSR    DONE
000015E2  4EB9 00001886            460  MOVEcode111     JSR     ISMOVEL 
000015E8  4EB9 0000190A            461                  JSR    DONE
000015EE                           462  *****************************END MOVEA_LorMOVE_L ************************************
000015EE                           463  
000015EE                           464  *****************************MOVEA_WorMOVE_W ************************************
000015EE  4FF8 7000                465  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
000015F2  41F9 00001612            466                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
000015F8  4280                     467                      CLR.L   D0                  ; Zero it
000015FA  303C 9883                468                      MOVE.W  #example,D0         ; We'll play with it here
000015FE  123C 0007                469                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001602  E360                     470                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001604  123C 000D                471                      MOVE.B  #13,D1           ; Shift 13 bits right
00001608  E260                     472                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
0000160A                           473    
0000160A                           474                      
0000160A  C0FC 0006                475                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000160E  4EB0 0000                476                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001612                           477  
00001612  4EF9 00001642            478  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001618  4EF9 0000164E            479                          JMP     MOVEAWcode001
0000161E  4EF9 0000165A            480                          JMP     MOVEWcode010
00001624  4EF9 00001666            481                          JMP     MOVEWcode011
0000162A  4EF9 00001672            482                          JMP     MOVEWcode100
00001630  4EF9 0000167E            483                          JMP     MOVEWcode101
00001636  4EF9 0000168A            484                          JMP     MOVEWcode110
0000163C  4EF9 00001696            485                          JMP     MOVEWcode111
00001642                           486                            
00001642  4EB9 0000185A            487  MOVEWcode000     JSR     ISMOVEW
00001648  4EB9 0000190A            488                  JSR    DONE
0000164E  4EB9 00001870            489  MOVEAWcode001    JSR     ISMOVEAW
00001654  4EB9 0000190A            490                  JSR    DONE
0000165A  4EB9 0000185A            491  MOVEWcode010     JSR     ISMOVEW
00001660  4EB9 0000190A            492                  JSR    DONE
00001666  4EB9 0000185A            493  MOVEWcode011     JSR     ISMOVEW
0000166C  4EB9 0000190A            494                  JSR    DONE
00001672  4EB9 0000185A            495  MOVEWcode100     JSR     ISMOVEW
00001678  4EB9 0000190A            496                  JSR    DONE
0000167E  4EB9 0000185A            497  MOVEWcode101     JSR     ISMOVEW
00001684  4EB9 0000190A            498                  JSR    DONE
0000168A  4EB9 0000185A            499  MOVEWcode110     JSR     ISMOVEW
00001690  4EB9 0000190A            500                  JSR    DONE
00001696  4EB9 0000185A            501  MOVEWcode111     JSR     ISMOVEW 
0000169C  4EB9 0000190A            502                  JSR    DONE
000016A2                           503  *****************************END MOVEA_WorMOVE_W ************************************
000016A2                           504  
000016A2  48A7 FFFF                505  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016A6  43F9 000019D7            506              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
000016AC  103C 000E                507              MOVE.B  #14, D0
000016B0  4E4F                     508              TRAP    #15
000016B2                           509     
000016B2  4C9F FFFF                510              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016B6  4E75                     511              RTS
000016B8                           512  
000016B8  48A7 FFFF                513  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016BC  43F9 000019DF            514              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
000016C2  103C 000E                515              MOVE.B  #14, D0
000016C6  4E4F                     516              TRAP    #15
000016C8                           517     
000016C8  4C9F FFFF                518              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016CC  4E75                     519              RTS
000016CE                           520              
000016CE  48A7 FFFF                521  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016D2  43F9 000019E7            522              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
000016D8  103C 000E                523              MOVE.B  #14, D0
000016DC  4E4F                     524              TRAP    #15
000016DE                           525     
000016DE  4C9F FFFF                526              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016E2  4E75                     527              RTS  
000016E4                           528  
000016E4  48A7 FFFF                529  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016E8  43F9 000019BF            530              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
000016EE  103C 000E                531              MOVE.B  #14, D0
000016F2  4E4F                     532              TRAP    #15
000016F4                           533     
000016F4  4C9F FFFF                534              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000016F8  4E75                     535              RTS
000016FA                           536  
000016FA  48A7 FFFF                537  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000016FE  43F9 000019C7            538              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001704  103C 000E                539              MOVE.B  #14, D0
00001708  4E4F                     540              TRAP    #15
0000170A                           541     
0000170A  4C9F FFFF                542              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000170E  4E75                     543              RTS
00001710                           544              
00001710  48A7 FFFF                545  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001714  43F9 000019CF            546              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
0000171A  103C 000E                547              MOVE.B  #14, D0
0000171E  4E4F                     548              TRAP    #15
00001720                           549     
00001720  4C9F FFFF                550              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001724  4E75                     551              RTS    
00001726                           552  
00001726  48A7 FFFF                553  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000172A  43F9 000019A4            554              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00001730  103C 000E                555              MOVE.B  #14, D0
00001734  4E4F                     556              TRAP    #15
00001736                           557     
00001736  4C9F FFFF                558              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000173A  4E75                     559              RTS
0000173C                           560  
0000173C  48A7 FFFF                561  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001740  43F9 000019AD            562              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00001746  103C 000E                563              MOVE.B  #14, D0
0000174A  4E4F                     564              TRAP    #15
0000174C                           565     
0000174C  4C9F FFFF                566              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001750  4E75                     567              RTS
00001752                           568              
00001752  48A7 FFFF                569  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001756  43F9 000019B6            570              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
0000175C  103C 000E                571              MOVE.B  #14, D0
00001760  4E4F                     572              TRAP    #15
00001762                           573     
00001762  4C9F FFFF                574              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001766  4E75                     575              RTS            
00001768                           576              
00001768  48A7 FFFF                577  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000176C  43F9 000019EF            578              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00001772  103C 000E                579              MOVE.B  #14, D0
00001776  4E4F                     580              TRAP    #15
00001778                           581     
00001778  4C9F FFFF                582              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000177C  4E75                     583              RTS
0000177E                           584  
0000177E  48A7 FFFF                585  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001782  43F9 0000198C            586              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00001788  103C 000E                587              MOVE.B  #14, D0
0000178C  4E4F                     588              TRAP    #15
0000178E                           589     
0000178E  4C9F FFFF                590              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001792  4E75                     591              RTS
00001794                           592  
00001794  48A7 FFFF                593  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001798  43F9 00001994            594              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
0000179E  103C 000E                595              MOVE.B  #14, D0
000017A2  4E4F                     596              TRAP    #15
000017A4                           597     
000017A4  4C9F FFFF                598              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017A8  4E75                     599              RTS
000017AA                           600  
000017AA  48A7 FFFF                601  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017AE  43F9 0000199C            602              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
000017B4  103C 000E                603              MOVE.B  #14, D0
000017B8  4E4F                     604              TRAP    #15
000017BA                           605     
000017BA  4C9F FFFF                606              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017BE  4E75                     607              RTS
000017C0                           608              
000017C0  48A7 FFFF                609  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017C4  43F9 00001960            610              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
000017CA  103C 000E                611              MOVE.B  #14, D0
000017CE  4E4F                     612              TRAP    #15
000017D0                           613     
000017D0  4C9F FFFF                614              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017D4  4E75                     615              RTS
000017D6                           616  
000017D6  48A7 FFFF                617  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017DA  43F9 0000196A            618              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
000017E0  103C 000E                619              MOVE.B  #14, D0
000017E4  4E4F                     620              TRAP    #15
000017E6                           621     
000017E6  4C9F FFFF                622              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017EA  4E75                     623              RTS  
000017EC                           624  
000017EC  48A7 FFFF                625  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017F0  43F9 00001986            626              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
000017F6  103C 000E                627              MOVE.B  #14, D0
000017FA  4E4F                     628              TRAP    #15
000017FC                           629     
000017FC  4C9F FFFF                630              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001800  4E75                     631              RTS                          ; Exit subroutine
00001802                           632  
00001802  48A7 FFFF                633  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001806  43F9 00001974            634              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
0000180C  103C 000E                635              MOVE.B  #14, D0
00001810  4E4F                     636              TRAP    #15
00001812  4C9F FFFF                637              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001816  4E75                     638              RTS                          ; Exit subroutine
00001818                           639              
00001818  48A7 FFFF                640  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000181C  43F9 00001980            641              LEA MESSAGERTS, A1         *OPCODE is RTS
00001822  103C 000E                642              MOVE.B  #14, D0
00001826  4E4F                     643              TRAP    #15
00001828  4C9F FFFF                644              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000182C  4E75                     645              RTS  
0000182E                           646  
0000182E  48A7 FFFF                647  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001832  43F9 0000197A            648              LEA MESSAGECLR, A1         *OPCODE is CLR
00001838  103C 000E                649              MOVE.B  #14, D0
0000183C  4E4F                     650              TRAP    #15
0000183E  4C9F FFFF                651              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001842  4E75                     652              RTS  
00001844                           653              
00001844  48A7 FFFF                654  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001848  43F9 00001910            655              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
0000184E  103C 000E                656              MOVE.B  #14, D0
00001852  4E4F                     657              TRAP    #15
00001854  4C9F FFFF                658              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001858  4E75                     659              RTS                          ; Exit subroutine
0000185A                           660           
0000185A  48A7 FFFF                661  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000185E  43F9 00001916            662              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00001864  103C 000E                663              MOVE.B  #14, D0
00001868  4E4F                     664              TRAP    #15
0000186A                           665     
0000186A  4C9F FFFF                666              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000186E  4E75                     667              RTS                          ; Exit subroutine
00001870                           668              
00001870  48A7 FFFF                669  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001874  43F9 00001956            670              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
0000187A  103C 000E                671              MOVE.B  #14, D0
0000187E  4E4F                     672              TRAP    #15
00001880                           673     
00001880  4C9F FFFF                674              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001884  4E75                     675              RTS                          ; Exit subroutine
00001886                           676              
00001886  48A7 FFFF                677  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000188A  43F9 0000191F            678              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
00001890  103C 000E                679              MOVE.B  #14, D0
00001894  4E4F                     680              TRAP    #15
00001896                           681              
00001896  4C9F FFFF                682              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000189A  4E75                     683              RTS                          ; Exit subroutine
0000189C                           684              
0000189C  48A7 FFFF                685  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018A0  43F9 0000194C            686              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
000018A6  103C 000E                687              MOVE.B  #14, D0
000018AA  4E4F                     688              TRAP    #15
000018AC                           689              
000018AC  4C9F FFFF                690              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018B0  4E75                     691              RTS                          ; Exit subroutine
000018B2                           692         
000018B2  48A7 FFFF                693  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018B6  43F9 00001928            694              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
000018BC  103C 000E                695              MOVE.B  #14, D0
000018C0  4E4F                     696              TRAP    #15
000018C2                           697              
000018C2  4C9F FFFF                698              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018C6  4E75                     699              RTS                          ; Exit subroutine
000018C8                           700           
000018C8  48A7 FFFF                701  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018CC  43F9 00001931            702              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
000018D2  103C 000E                703              MOVE.B  #14, D0
000018D6  4E4F                     704              TRAP    #15
000018D8                           705              
000018D8  4C9F FFFF                706              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018DC  4E75                     707              RTS                          ; Exit subroutine
000018DE                           708              
000018DE  48A7 FFFF                709  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018E2  43F9 0000193A            710              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
000018E8  103C 000E                711              MOVE.B  #14, D0
000018EC  4E4F                     712              TRAP    #15
000018EE                           713              
000018EE  4C9F FFFF                714              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018F2  4E75                     715              RTS                          ; Exit subroutine
000018F4                           716                  
000018F4  48A7 FFFF                717  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018F8  43F9 00001943            718              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
000018FE  103C 000E                719              MOVE.B  #14, D0
00001902  4E4F                     720              TRAP    #15
00001904                           721              
00001904  4C9F FFFF                722              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001908  4E75                     723              RTS                          ; Exit subroutine
0000190A                           724                        
0000190A  103C 0009                725  DONE        MOVE.B      #9, D0
0000190E  4E4F                     726              TRAP        #15
00001910                           727  
00001910  =0000000D                728  CR  EQU     $0D 
00001910  =0000000A                729  LF  EQU     $0A
00001910= 4E 4F 50 0D 0A 00        730  MESSAGENOP DC.B    'NOP',CR,LF, 0    
00001916                           731      
00001916= 4D 4F 56 45 2E 57 ...    732  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
0000191F= 4D 4F 56 45 2E 4C ...    733  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
00001928= 4D 4F 56 45 2E 42 ...    734  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
00001931                           735  
00001931= 41 44 44 49 2E 57 ...    736  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
0000193A= 41 44 44 49 2E 4C ...    737  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
00001943= 41 44 44 49 2E 42 ...    738  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
0000194C                           739  
0000194C= 4D 4F 56 45 41 2E ...    740  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
00001956= 4D 4F 56 45 41 2E ...    741  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
00001960                           742  
00001960= 4D 4F 56 45 4D 2E ...    743  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
0000196A= 4D 4F 56 45 4D 2E ...    744  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00001974                           745  
00001974= 4A 53 52 0D 0A 00        746  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
0000197A                           747  
0000197A= 43 4C 52 0D 0A 00        748  MESSAGECLR DC.B    'CLR',CR,LF, 0
00001980                           749  
00001980= 52 54 53 0D 0A 00        750  MESSAGERTS DC.B    'RTS',CR,LF, 0
00001986                           751  
00001986= 4C 45 41 0D 0A 00        752  MESSAGELEA DC.B    'LEA',CR,LF, 0
0000198C                           753  
0000198C= 43 4C 52 2E 42 0D ...    754  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00001994= 43 4C 52 2E 57 0D ...    755  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
0000199C= 43 4C 52 2E 4C 0D ...    756  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
000019A4                           757  
000019A4= 41 44 44 51 2E 42 ...    758  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
000019AD= 41 44 44 51 2E 57 ...    759  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
000019B6= 41 44 44 51 2E 4C ...    760  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
000019BF                           761  
000019BF= 43 4D 50 2E 42 0D ...    762  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
000019C7= 43 4D 50 2E 57 0D ...    763  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
000019CF= 43 4D 50 2E 4C 0D ...    764  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
000019D7                           765  
000019D7= 53 55 42 2E 42 0D ...    766  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
000019DF= 53 55 42 2E 57 0D ...    767  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
000019E7= 53 55 42 2E 4C 0D ...    768  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
000019EF                           769  
000019EF= 4D 4F 56 45 51 2E ...    770  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
000019F9                           771  
000019FA  FFFF FFFF                772      SIMHALT             ; halt simulator
000019FE                           773  
000019FE                           774  * Put variables and constants here
000019FE                           775  
000019FE                           776      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDIBCODE00         1516
ADDILCODE10         152E
ADDIWCODE01         1522
ADDI_BORADDI_WORADDI_L  14E0
ADDQCODE00          1230
ADDQCODE01          123C
ADDQCODE10          1248
ADDQ_BORADDQ_WORADDQ_L  11F4
CLRCODE00           1290
CLRCODE01           129C
CLRCODE10           12A8
CMPCODE000          11D0
CMPCODE001          11DC
CMPCODE010          11E8
CMP_BORCMP_WORCMP_L  1194
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10C8
CODE1010            10D4
CODE1011            10D8
CODE1100            10E4
CODE1101            10E8
CODE1110            10EC
CODE1111            10F0
CR                  D
DONE                190A
EXAMPLE             9883
ISADDIB             18F4
ISADDIL             18DE
ISADDIW             18C8
ISADDQB             1726
ISADDQL             1752
ISADDQW             173C
ISCLR               182E
ISCLRB              177E
ISCLRL              17AA
ISCLRW              1794
ISCMPB              16E4
ISCMPL              1710
ISCMPW              16FA
ISJSR               1802
ISLEA               17EC
ISMOVEAL            189C
ISMOVEAW            1870
ISMOVEB             18B2
ISMOVEL             1886
ISMOVEML            17C0
ISMOVEMW            17D6
ISMOVEQL            1768
ISMOVEW             185A
ISNOP               1844
ISRTS               1818
ISSUBB              16A2
ISSUBL              16CE
ISSUBW              16B8
JSRORCLRCODE0000    1364
JSRORCLRCODE0001    1368
JSRORCLRCODE0010    136C
JSRORCLRCODE0011    1376
JSRORCLRCODE0100    137A
JSRORCLRCODE0101    137E
JSRORCLRCODE0110    1382
JSRORCLRCODE0111    1386
JSRORCLRCODE1000    138A
JSRORCLRCODE1001    138E
JSRORCLRCODE1010    1392
JSRORCLRCODE1011    1396
JSRORCLRCODE1100    139A
JSRORCLRCODE1101    139E
JSRORCLRCODE1110    13A2
JSRORCLRCODE1111    13AE
LF                  A
LOTSCODE0000        147E
LOTSCODE0001        1482
LOTSCODE0010        1486
LOTSCODE0011        1490
LOTSCODE0100        1494
LOTSCODE0101        1498
LOTSCODE0110        149C
LOTSCODE0111        14A8
LOTSCODE1000        14AC
LOTSCODE1001        14B6
LOTSCODE1010        14BA
LOTSCODE1011        14C4
LOTSCODE1100        14C8
LOTSCODE1101        14CC
LOTSCODE1110        14D0
LOTSCODE1111        14DC
MESSAGEADDIB        1943
MESSAGEADDIL        193A
MESSAGEADDIW        1931
MESSAGEADDQB        19A4
MESSAGEADDQL        19B6
MESSAGEADDQW        19AD
MESSAGECLR          197A
MESSAGECLRB         198C
MESSAGECLRL         199C
MESSAGECLRW         1994
MESSAGECMPB         19BF
MESSAGECMPL         19CF
MESSAGECMPW         19C7
MESSAGEJSR          1974
MESSAGELEA          1986
MESSAGEMOVEAL       194C
MESSAGEMOVEAW       1956
MESSAGEMOVEB        1928
MESSAGEMOVEL        191F
MESSAGEMOVEML       1960
MESSAGEMOVEMW       196A
MESSAGEMOVEQL       19EF
MESSAGEMOVEW        1916
MESSAGENOP          1910
MESSAGERTS          1980
MESSAGESUBB         19D7
MESSAGESUBL         19E7
MESSAGESUBW         19DF
MOVEACODE001        159A
MOVEAWCODE001       164E
MOVEA_LORMOVE_L     153A
MOVEA_WORMOVE_W     15EE
MOVECODE000         158E
MOVECODE010         15A6
MOVECODE011         15B2
MOVECODE100         15BE
MOVECODE101         15CA
MOVECODE110         15D6
MOVECODE111         15E2
MOVEMCODE00         13E2
MOVEMCODE01         13EE
MOVEWCODE000        1642
MOVEWCODE010        165A
MOVEWCODE011        1666
MOVEWCODE100        1672
MOVEWCODE101        167E
MOVEWCODE110        168A
MOVEWCODE111        1696
NOPCOMMAND          1358
NOPORCLRORRTSORJSR  12B4
NOP_MOVEM_LEA_JSR_CLR_RTS  13FA
RTSCOMMAND          134C
SHIFT               C
SOMECLR             1254
SOMEMOVEM           13B2
STACK               7000
START               1000
SUBCODE000          1148
SUBCODE001          1154
SUBCODE010          1160
SUBCODE011          116C
SUBCODE100          1170
SUBCODE101          117C
SUBCODE110          1188
SUB_BORSUB_WORSUB_L  10F4
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1504
TABLEADDQ_BORADDQ_WORADDQ_L  121E
TABLECMP_BORCMP_WORCMP_L  11BE
TABLEMOVEA_LORMOVE_L  155E
TABLEMOVEA_WORMOVE_W  1612
TABLENOPORCLRORRTSORJSR  12EC
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  1424
TABLESOMECLR        127E
TABLESOMEMOVEM      13D6
TABLESUB_BORSUB_WORSUB_L  111E
