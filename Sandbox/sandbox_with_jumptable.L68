00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2016 2:22:33 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000                            57  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000                            60  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            61  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            62  
00001000                            63  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            64  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            65  
00001000                            66  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            67  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            68  
00001000                            69  *example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            70  
00001000                            71  *example EQU     %0100110000000011 ; MULS.L D3, D4 = 01001 1 0000 000 011
00001000                            72  
00001000                            73  *example EQU     %0100100010010100 ; MOVEM.W (A4), (D16A6) = 0100 1000 10 010 100
00001000                            74  *example EQU     %0100110010101110 ; MOVEM.W (D16A6), (A4) = 0100 1100 10 101 110
00001000                            75  
00001000                            76  *example EQU     %0100100011010100 ; MOVEM.L (A4), (D16A6) = 0100 1000 11 010 100
00001000                            77  *example EQU     %0100110011101110 ; MOVEM.L (D16A6), (A4) = 0100 1100 11 101 110
00001000                            78  
00001000                            79  *example EQU     %1110111100011010  ; ROL.B  D1,D2 = 1110 111 1 00 0 11 010 where D1 = 0x111 or 7
00001000                            80  *example EQU     %1110111101011010  ; ROL.W  D1,D2 = 1110 111 1 01 0 11 010 where D1 = 0x111 or 7
00001000                            81  *example EQU     %1110111110011010  ; ROL.L  D1,D2 = 1110 111 1 10 0 11 010 where D1 = 0x111 or 7
00001000                            82  
00001000                            83  *example EQU     %1110111000011010  ; ROR.B  D1,D2 = 1110 111 0 00 0 11 010 where D1 = 0x111 or 7
00001000                            84  *example EQU     %1110111001011010  ; ROR.W  D1,D2 = 1110 111 0 01 0 11 010 where D1 = 0x111 or 7
00001000                            85  *example EQU     %1110111010011010  ; ROR.L  D1,D2 = 1110 111 0 10 0 11 010 where D1 = 0x111 or 7
00001000                            86  
00001000                            87  *example EQU     %1110111100001010  ; LSL.B  D1,D2 = 1110 111 1 00 0 01 010 where D1 = 0x111 or 7
00001000                            88  *example EQU     %1110111101001010  ; LSL.W  D1,D2 = 1110 111 1 01 0 01 010 where D1 = 0x111 or 7
00001000                            89  *example EQU     %1110111110001010  ; LSL.L  D1,D2 = 1110 111 1 10 0 01 010 where D1 = 0x111 or 7
00001000                            90  
00001000                            91  *example EQU     %1110111000001010  ; LSR.B  D1,D2 = 1110 111 0 00 0 01 010 where D1 = 0x111 or 7
00001000                            92  *example EQU     %1110111001001010  ; LSR.W  D1,D2 = 1110 111 0 01 0 01 010 where D1 = 0x111 or 7
00001000                            93  *example EQU     %1110111010001010  ; LSR.L  D1,D2 = 1110 111 0 10 0 01 010 where D1 = 0x111 or 7
00001000                            94  
00001000                            95  *example EQU     %1110111100000010  ; ASL.B  D1,D2 = 1110 111 1 00 0 00 010 where D1 = 0x111 or 7
00001000                            96  *example EQU     %1110111101000010  ; ASL.W  D1,D2 = 1110 111 1 01 0 00 010 where D1 = 0x111 or 7
00001000                            97  *example EQU     %1110111110000010  ; ASL.L  D1,D2 = 1110 111 1 10 0 00 010 where D1 = 0x111 or 7
00001000                            98  
00001000  =0000EE02                 99  example EQU     %1110111000000010  ; ASR.B  D1,D2 = 1110 111 0 00 0 00 010 where D1 = 0x111 or 7
00001000                           100  *example EQU     %1110111001000010  ; ASR.W  D1,D2 = 1110 111 0 01 0 00 010 where D1 = 0x111 or 7
00001000                           101  *example EQU     %1110111010000010  ; ASR.L  D1,D2 = 1110 111 0 10 0 00 010 where D1 = 0x111 or 7
00001000                           102  
00001000                           103  *example EQU     %1000100011000011 ; DIVU.W D3,D4 = 1000 100 011 000 011
00001000                           104  *example EQU     %0100110001000011 ; DIVU.L D3,D4 = 0100 110001 000 011
00001000                           105  
00001000                           106  *example EQU     %1000100000000011 ; OR.B D3,D4 = 1000 100 000 000 011
00001000                           107  *example EQU     %1000100100000011 ; OR.B D3,D4 = 1000 100 100 000 011
00001000                           108  *example EQU     %1000100001000011 ; OR.W D3,D4 = 1000 100 001 000 011
00001000                           109  *example EQU     %1000100101000011 ; OR.W D3,D4 = 1000 100 101 000 011
00001000                           110  *example EQU     %1000100010000011 ; OR.L D3,D4 = 1000 100 010 000 011
00001000                           111  *example EQU     %1000100110000011 ; OR.L D3,D4 = 1000 100 110 000 011
00001000                           112  
00001000                           113  *example EQU     %0110010000000000 ; BCC = 0110 0100 0000 0000
00001000                           114  *example EQU     %0110111000000000 ; BGT = 0110 1110 0000 0000
00001000                           115  *example EQU     %0110111100000000  ; BLE = 0110 1111 0000 0000
00001000                           116  
00001000  =0000000C                117  shift   EQU     12                 ; Shift 12 bits
00001000                           118  
00001000                           119  * Program starts here
00001000                           120  
00001000  4FF8 7000                121          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E            122          LEA     table,A0            ; Index into the table
0000100A  4280                     123          CLR.L   D0                  ; Zero it
0000100C  303C EE02                124          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                125          MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001014  E268                     126          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                           127                                      ; and the rest are zeroed out)
00001016  C0FC 0006                128          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EF0 0000                129          JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000101E                           130  
0000101E  4EF9 0000107E            131  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084            132          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090            133          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096            134          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C            135          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS or MULS.W
0000103C  4EF9 000010A8            136          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4            137          JMP     code0110        ; BCC or BGT or BLE
00001048  4EF9 000010C0            138          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010CC            139          JMP     code1000        ; OR.B or OR.W or OR.L or DIVU.W
00001054  4EF9 000010D8            140          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010E4            141          JMP     code1010
00001060  4EF9 000010E8            142          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010F4            143          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 00001100            144          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 0000110C            145          JMP     code1110        ; ROd_LSd_ASd
00001078  4EF9 00001118            146          JMP     code1111
0000107E                           147  
0000107E                           148  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           149  
0000107E  4EB9 00001A30            150  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 0000211A            151  code0001 JSR   ISMOVEB
0000108A  4EB9 00002172            152           JSR   DONE
00001090  4EB9 00001A8A            153  code0010 JSR   MOVEA_LorMOVE_L
00001096  4EB9 00001B3E            154  code0011 JSR  MOVEA_WorMOVE_W
0000109C  4EB9 00001944            155  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 00002172            156           JSR    DONE
000010A8  4EB9 00001768            157  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 00002172            158           JSR    DONE
000010B4  4EB9 0000111C            159  code0110 JSR    BCCorBGTorBLE
000010BA  4EB9 00002172            160           JSR    DONE
000010C0  4EB9 00001FD0            161  code0111 JSR    ISMOVEQL
000010C6  4EB9 00002172            162           JSR    DONE
000010CC  4EB9 000011BA            163  code1000 JSR    OR_BorOR_WorOR_LorDIVU
000010D2  4EB9 00002172            164           JSR    DONE
000010D8  4EB9 0000168C            165  code1001 JSR    SUB_BorSUB_WorSUB_L
000010DE  4EB9 00002172            166           JSR    DONE
000010E4  4E72 2700                167  code1010 STOP  #$2700
000010E8  4EB9 00001714            168  code1011 JSR    CMP_BorCMP_WorCMP_L
000010EE  4EB9 00002172            169           JSR DONE
000010F4  4EB9 0000155C            170  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010FA  4EB9 00002172            171           JSR    DONE
00001100  4EB9 000015F2            172  code1101 JSR    ADD_BorADD_WorADD_L
00001106  4EB9 00002172            173           JSR    DONE
0000110C  4EB9 00001504            174  code1110 JSR    ROd_LSd_ASd
00001112  4EB9 00002172            175           JSR    DONE
00001118  4E72 2700                176  code1111 STOP  #$2700
0000111C                           177  
0000111C                           178  *****************************  BCCorBGTorBLE ************************************
0000111C  4FF8 7000                179  BCCorBGTorBLE       LEA     STACK,SP            ; Load the SP
00001120  41F9 00001146            180                      LEA     tableBCCorBGTorBLE, A0            ; Index into the table
00001126  4280                     181                      CLR.L   D0                  ; Zero it
00001128  303C EE02                182                      MOVE.W  #example,D0         ; We'll play with it here
0000112C  123C 0006                183                      MOVE.B  #6,D1           ; Shift 6 bits left
00001130  E360                     184                      ASL.W   D1,D0
00001132  123C 000C                185                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001136  E268                     186                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001138                           187                                      ; and the rest are zeroed out)
00001138  123C 0002                188                      MOVE.B  #2,D1           ; Shift 2 bits right
0000113C  E260                     189                      ASR.W   D1,D0
0000113E                           190  
0000113E  C0FC 0006                191                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001142  4EF0 0000                192                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001146                           193  
00001146  4EF9 0000115E            194  tableBCCorBGTorBLE   JMP    BCCorBGTorBLEcode00   ; BCC
0000114C  4EF9 00001166            195                       JMP    BCCorBGTorBLEcode01   ;
00001152  4EF9 0000116A            196                       JMP    BCCorBGTorBLEcode10   ; BGT
00001158  4EF9 00001172            197                       JMP    BCCorBGTorBLEcode11   ; BLE
0000115E                           198  
0000115E                           199  
0000115E                           200  
0000115E  4EB9 00001BF2            201  BCCorBGTorBLEcode00    JSR     ISBCC
00001164  4E75                     202                         RTS
00001166  4E72 2700                203  BCCorBGTorBLEcode01    STOP  #$2700
0000116A  4EB9 00001C08            204  BCCorBGTorBLEcode10    JSR     ISBGT
00001170  4E75                     205                         RTS
00001172  4EB9 00001C1E            206  BCCorBGTorBLEcode11    JSR     ISBLE
00001178  4E75                     207                         RTS
0000117A                           208  
0000117A                           209  ***************************** END  BCCorBGTorBLE ************************************
0000117A                           210  
0000117A                           211  *****************************  MULSLorDIVUL ************************************
0000117A  4FF8 7000                212  MULSLorDIVUL        LEA     STACK,SP            ; Load the SP
0000117E  41F9 0000119E            213                      LEA     tableMULSLorDIVUL, A0            ; Index into the table
00001184  4280                     214                      CLR.L   D0                  ; Zero it
00001186  303C EE02                215                      MOVE.W  #example,D0         ; We'll play with it here
0000118A  123C 0006                216                      MOVE.B  #6,D1           ; Shift 6 bits left
0000118E  E360                     217                      ASL.W   D1,D0
00001190  123C 000C                218                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001194  E268                     219                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001196                           220  
00001196  C0FC 0006                221                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000119A  4EF0 0000                222                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000119E                           223  
0000119E  4EF9 000011AA            224  tableMULSLorDIVUL             JMP    MULSLorDIVULcode0   ;  MULS.L
000011A4  4EF9 000011B2            225                                JMP    MULSLorDIVULcode1   ;  DIVU.L
000011AA                           226  
000011AA  4EB9 00001E2E            227  MULSLorDIVULcode0   JSR     ISMULSL
000011B0  4E75                     228                      RTS
000011B2  4EB9 00001C34            229  MULSLorDIVULcode1   JSR     ISDIVUL
000011B8  4E75                     230                      RTS
000011BA                           231  ***************************** END  MULSLorDIVUL ************************************
000011BA                           232  
000011BA                           233  *****************************  OR_BorOR_WorOR_LorDIVU ************************************
000011BA  4FF8 7000                234  OR_BorOR_WorOR_LorDIVU     LEA     STACK,SP            ; Load the SP
000011BE  41F9 000011E4            235                      LEA     tableOR_BorOR_WorOR_LorDIVU, A0            ; Index into the table
000011C4  4280                     236                      CLR.L   D0                  ; Zero it
000011C6  303C EE02                237                      MOVE.W  #example,D0         ; We'll play with it here
000011CA  123C 0007                238                      MOVE.B  #7,D1           ; Shift 7 bits left
000011CE  E360                     239                      ASL.W   D1,D0
000011D0  123C 000C                240                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000011D4  E268                     241                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011D6                           242                                      ; and the rest are zeroed out)
000011D6  123C 0001                243                      MOVE.B  #1,D1           ; Shift 1 bits right
000011DA  E260                     244                      ASR.W   D1,D0
000011DC                           245  
000011DC  C0FC 0006                246                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011E0  4EF0 0000                247                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000011E4                           248  
000011E4  4EF9 0000120E            249  tableOR_BorOR_WorOR_LorDIVU             JMP    OR_DIVUcode000   ; OR.B
000011EA  4EF9 00001216            250                                          JMP    OR_DIVUcode001   ; OR.W
000011F0  4EF9 0000121E            251                                          JMP    OR_DIVUcode010   ; OR.L
000011F6                           252  
000011F6  4EF9 00001226            253                                          JMP    OR_DIVUcode011   ; DIVU.W
000011FC  4EF9 0000122E            254                                          JMP    OR_DIVUcode100   ; OR.B
00001202  4EF9 00001236            255                                          JMP    OR_DIVUcode101   ; OR.W
00001208  4EF9 0000123E            256                                          JMP    OR_DIVUcode110   ; OR.L
0000120E                           257                                          ;JMP    OR_DIVUcode111
0000120E                           258  
0000120E                           259  
0000120E  4EB9 00001C60            260  OR_DIVUcode000      JSR     ISORB
00001214  4E75                     261                      RTS
00001216  4EB9 00001C76            262  OR_DIVUcode001      JSR     ISORW
0000121C  4E75                     263                      RTS
0000121E  4EB9 00001C8C            264  OR_DIVUcode010      JSR     ISORL
00001224  4E75                     265                      RTS
00001226  4EB9 00001C4A            266  OR_DIVUcode011      JSR     ISDIVUW
0000122C  4E75                     267                      RTS
0000122E  4EB9 00001C60            268  OR_DIVUcode100      JSR     ISORB
00001234  4E75                     269                      RTS
00001236  4EB9 00001C76            270  OR_DIVUcode101      JSR     ISORW
0000123C  4E75                     271                      RTS
0000123E  4EB9 00001C8C            272  OR_DIVUcode110      JSR     ISORL
00001244  4E75                     273                      RTS
00001246                           274  
00001246                           275  
00001246                           276  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001246                           277  
00001246                           278  *****************************someASR ************************************
00001246  4FF8 7000                279  someASR    LEA     STACK,SP            ; Load the SP
0000124A  41F9 00001270            280                      LEA     tableSomeASR, A0            ; Index into the table
00001250  4280                     281                      CLR.L   D0                  ; Zero it
00001252  303C EE02                282                      MOVE.W  #example,D0         ; We'll play with it here
00001256  123C 0008                283                      MOVE.B  #8,D1           ; Shift 8 bits left
0000125A  E360                     284                      ASL.W   D1,D0
0000125C  123C 000C                285                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001260  E268                     286                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001262                           287                                      ; and the rest are zeroed out)
00001262  123C 0002                288                      MOVE.B  #2,D1           ; Shift 2 bits right
00001266  E260                     289                      ASR.W   D1,D0
00001268                           290  
00001268  C0FC 0006                291                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000126C  4EF0 0000                292                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001270                           293  
00001270  4EF9 00001282            294  tableSomeASR        JMP     ASRcode00   *ASR.B
00001276  4EF9 0000128A            295                      JMP     ASRcode01   *ASR.W
0000127C  4EF9 00001292            296                      JMP     ASRcode10   *ASR.L
00001282                           297  
00001282  4EB9 00001CA2            298  ASRcode00   JSR     ISASRB
00001288  4E75                     299              RTS
0000128A  4EB9 00001CB8            300  ASRcode01   JSR     ISASRW
00001290  4E75                     301              RTS
00001292  4EB9 00001CCE            302  ASRcode10   JSR     ISASRL
00001298  4E75                     303              RTS
0000129A                           304  
0000129A                           305  *****************************END someLSL ************************************
0000129A                           306  
0000129A                           307  
0000129A                           308  *****************************someASL ************************************
0000129A  4FF8 7000                309  someASL    LEA     STACK,SP            ; Load the SP
0000129E  41F9 000012C4            310                      LEA     tableSomeASL, A0            ; Index into the table
000012A4  4280                     311                      CLR.L   D0                  ; Zero it
000012A6  303C EE02                312                      MOVE.W  #example,D0         ; We'll play with it here
000012AA  123C 0008                313                      MOVE.B  #8,D1           ; Shift 8 bits left
000012AE  E360                     314                      ASL.W   D1,D0
000012B0  123C 000C                315                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000012B4  E268                     316                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012B6                           317                                      ; and the rest are zeroed out)
000012B6  123C 0002                318                      MOVE.B  #2,D1           ; Shift 2 bits right
000012BA  E260                     319                      ASR.W   D1,D0
000012BC                           320  
000012BC  C0FC 0006                321                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012C0  4EF0 0000                322                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000012C4                           323  
000012C4  4EF9 000012D6            324  tableSomeASL        JMP     ASLcode00   *ASL.B
000012CA  4EF9 000012DE            325                      JMP     ASLcode01   *ASL.W
000012D0  4EF9 000012E6            326                      JMP     ASLcode10   *ASL.L
000012D6                           327  
000012D6  4EB9 00001CE4            328  ASLcode00   JSR     ISASLB
000012DC  4E75                     329              RTS
000012DE  4EB9 00001CFA            330  ASLcode01   JSR     ISASLW
000012E4  4E75                     331              RTS
000012E6  4EB9 00001D10            332  ASLcode10   JSR     ISASLL
000012EC  4E75                     333              RTS
000012EE                           334  
000012EE                           335  *****************************END someLSL ************************************
000012EE                           336  
000012EE                           337  
000012EE                           338  *****************************someLSR ************************************
000012EE  4FF8 7000                339  someLSR    LEA     STACK,SP            ; Load the SP
000012F2  41F9 00001318            340                      LEA     tableSomeLSR, A0            ; Index into the table
000012F8  4280                     341                      CLR.L   D0                  ; Zero it
000012FA  303C EE02                342                      MOVE.W  #example,D0         ; We'll play with it here
000012FE  123C 0008                343                      MOVE.B  #8,D1           ; Shift 8 bits left
00001302  E360                     344                      ASL.W   D1,D0
00001304  123C 000C                345                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001308  E268                     346                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000130A                           347                                      ; and the rest are zeroed out)
0000130A  123C 0002                348                      MOVE.B  #2,D1           ; Shift 2 bits right
0000130E  E260                     349                      ASR.W   D1,D0
00001310                           350  
00001310  C0FC 0006                351                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001314  4EF0 0000                352                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001318                           353  
00001318  4EF9 0000132A            354  tableSomeLSR        JMP     LSRcode00   *LSR.B
0000131E  4EF9 00001332            355                      JMP     LSRcode01   *LSR.W
00001324  4EF9 0000133A            356                      JMP     LSRcode10   *LSR.L
0000132A                           357  
0000132A  4EB9 00001D26            358  LSRcode00   JSR     ISLSRB
00001330  4E75                     359              RTS
00001332  4EB9 00001D3C            360  LSRcode01   JSR     ISLSRW
00001338  4E75                     361              RTS
0000133A  4EB9 00001D52            362  LSRcode10   JSR     ISLSRL
00001340  4E75                     363              RTS
00001342                           364  
00001342                           365  *****************************END someLSR ************************************
00001342                           366  
00001342                           367  
00001342                           368  *****************************someLSL ************************************
00001342  4FF8 7000                369  someLSL    LEA     STACK,SP            ; Load the SP
00001346  41F9 0000136C            370                      LEA     tableSomeLSL, A0            ; Index into the table
0000134C  4280                     371                      CLR.L   D0                  ; Zero it
0000134E  303C EE02                372                      MOVE.W  #example,D0         ; We'll play with it here
00001352  123C 0008                373                      MOVE.B  #8,D1           ; Shift 8 bits left
00001356  E360                     374                      ASL.W   D1,D0
00001358  123C 000C                375                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000135C  E268                     376                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000135E                           377                                      ; and the rest are zeroed out)
0000135E  123C 0002                378                      MOVE.B  #2,D1           ; Shift 2 bits right
00001362  E260                     379                      ASR.W   D1,D0
00001364                           380  
00001364  C0FC 0006                381                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001368  4EF0 0000                382                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000136C                           383  
0000136C  4EF9 0000137E            384  tableSomeLSL        JMP     LSLcode00   *LSL.B
00001372  4EF9 00001386            385                      JMP     LSLcode01   *LSL.W
00001378  4EF9 0000138E            386                      JMP     LSLcode10   *LSL.L
0000137E                           387  
0000137E  4EB9 00001D68            388  LSLcode00   JSR     ISLSLB
00001384  4E75                     389              RTS
00001386  4EB9 00001D7E            390  LSLcode01   JSR     ISLSLW
0000138C  4E75                     391              RTS
0000138E  4EB9 00001D94            392  LSLcode10   JSR     ISLSLL
00001394  4E75                     393              RTS
00001396                           394  
00001396                           395  *****************************END someLSL ************************************
00001396                           396  
00001396                           397  
00001396                           398  *****************************someROL ************************************
00001396  4FF8 7000                399  someROL    LEA     STACK,SP            ; Load the SP
0000139A  41F9 000013C0            400                      LEA     tableSomeROL, A0            ; Index into the table
000013A0  4280                     401                      CLR.L   D0                  ; Zero it
000013A2  303C EE02                402                      MOVE.W  #example,D0         ; We'll play with it here
000013A6  123C 0008                403                      MOVE.B  #8,D1           ; Shift 8 bits left
000013AA  E360                     404                      ASL.W   D1,D0
000013AC  123C 000C                405                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000013B0  E268                     406                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013B2                           407                                      ; and the rest are zeroed out)
000013B2  123C 0002                408                      MOVE.B  #2,D1           ; Shift 2 bits right
000013B6  E260                     409                      ASR.W   D1,D0
000013B8                           410  
000013B8  C0FC 0006                411                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013BC  4EF0 0000                412                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000013C0                           413  
000013C0  4EF9 000013D2            414  tableSomeROL        JMP     ROLcode00   *ROL.B
000013C6  4EF9 000013DA            415                      JMP     ROLcode01   *ROL.W
000013CC  4EF9 000013E2            416                      JMP     ROLcode10   *ROL.L
000013D2                           417  
000013D2  4EB9 00001DEC            418  ROLcode00   JSR     ISROLB
000013D8  4E75                     419              RTS
000013DA  4EB9 00001E02            420  ROLcode01   JSR     ISROLW
000013E0  4E75                     421              RTS
000013E2  4EB9 00001E18            422  ROLcode10   JSR     ISROLL
000013E8  4E75                     423              RTS
000013EA                           424  
000013EA                           425  *****************************END someROR ************************************
000013EA                           426  
000013EA                           427  
000013EA                           428  *****************************someROR ************************************
000013EA  4FF8 7000                429  someROR     LEA     STACK,SP            ; Load the SP
000013EE  41F9 00001414            430                      LEA     tableSomeROR, A0            ; Index into the table
000013F4  4280                     431                      CLR.L   D0                  ; Zero it
000013F6  303C EE02                432                      MOVE.W  #example,D0         ; We'll play with it here
000013FA  123C 0008                433                      MOVE.B  #8,D1           ; Shift 8 bits left
000013FE  E360                     434                      ASL.W   D1,D0
00001400  123C 000C                435                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001404  E268                     436                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001406                           437                                      ; and the rest are zeroed out)
00001406  123C 0002                438                      MOVE.B  #2,D1           ; Shift 2 bits right
0000140A  E260                     439                      ASR.W   D1,D0
0000140C                           440  
0000140C  C0FC 0006                441                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001410  4EF0 0000                442                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001414                           443  
00001414  4EF9 00001426            444  tableSomeROR        JMP     RORcode00   *ROR.B
0000141A  4EF9 0000142E            445                      JMP     RORcode01   *ROR.W
00001420  4EF9 00001436            446                      JMP     RORcode10   *ROR.L
00001426                           447  
00001426  4EB9 00001DAA            448  RORcode00   JSR     ISRORB
0000142C  4E75                     449              RTS
0000142E  4EB9 00001DC0            450  RORcode01   JSR     ISRORW
00001434  4E75                     451              RTS
00001436  4EB9 00001DD6            452  RORcode10   JSR     ISRORL
0000143C  4E75                     453              RTS
0000143E                           454  
0000143E                           455  *****************************END someROR ************************************
0000143E                           456  
0000143E                           457  
0000143E                           458  *****************************  ROL_ROR ************************************
0000143E  4FF8 7000                459  ROL_ROR     LEA     STACK,SP            ; Load the SP
00001442  41F9 00001468            460                      LEA     tableROL_ROR, A0            ; Index into the table
00001448  4280                     461                      CLR.L   D0                  ; Zero it
0000144A  303C EE02                462                      MOVE.W  #example,D0         ; We'll play with it here
0000144E  123C 0007                463                      MOVE.B  #7,D1           ; Shift 7 bits left
00001452  E360                     464                      ASL.W   D1,D0
00001454  123C 000C                465                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001458  E268                     466                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000145A                           467                                      ; and the rest are zeroed out)
0000145A  123C 0003                468                      MOVE.B  #3,D1           ; Shift 3 bits right
0000145E  E260                     469                      ASR.W   D1,D0
00001460                           470  
00001460  C0FC 0006                471                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001464  4EF0 0000                472                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001468                           473  
00001468  4EF9 00001474            474  tableROL_ROR            JMP    ROL_RORcode0   ; ROR
0000146E  4EF9 0000147A            475                          JMP    ROL_RORcode1   ; ROL
00001474                           476  
00001474                           477  
00001474                           478  
00001474                           479  
00001474  4EB8 13EA                480  ROL_RORcode0   JSR     someROR
00001478  4E75                     481                 RTS
0000147A  4EB8 1396                482  ROL_RORcode1   JSR     someROL
0000147E  4E75                     483                 RTS
00001480                           484  
00001480                           485  
00001480                           486  ***************************** END ROL_ROR ************************************
00001480                           487  
00001480                           488  
00001480                           489  *****************************  LSL_LSR ************************************
00001480  4FF8 7000                490  LSL_LSR     LEA     STACK,SP            ; Load the SP
00001484  41F9 000014AA            491                      LEA     tableLSL_LSR, A0            ; Index into the table
0000148A  4280                     492                      CLR.L   D0                  ; Zero it
0000148C  303C EE02                493                      MOVE.W  #example,D0         ; We'll play with it here
00001490  123C 0007                494                      MOVE.B  #7,D1           ; Shift 7 bits left
00001494  E360                     495                      ASL.W   D1,D0
00001496  123C 000C                496                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000149A  E268                     497                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000149C                           498                                      ; and the rest are zeroed out)
0000149C  123C 0003                499                      MOVE.B  #3,D1           ; Shift 3 bits right
000014A0  E260                     500                      ASR.W   D1,D0
000014A2                           501  
000014A2  C0FC 0006                502                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014A6  4EF0 0000                503                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000014AA                           504  
000014AA  4EF9 000014B6            505  tableLSL_LSR            JMP    LSL_LSRcode0   ; LSR
000014B0  4EF9 000014BC            506                          JMP    LSL_LSRcode1   ; LSL
000014B6                           507  
000014B6                           508  
000014B6                           509  
000014B6                           510  
000014B6  4EB8 12EE                511  LSL_LSRcode0   JSR     someLSR
000014BA  4E75                     512                 RTS
000014BC  4EB8 1342                513  LSL_LSRcode1   JSR     someLSL
000014C0  4E75                     514                 RTS
000014C2                           515  
000014C2                           516  
000014C2                           517  ***************************** END LSL_LSR ************************************
000014C2                           518  
000014C2                           519  
000014C2                           520  *****************************  ASL_ASR ************************************
000014C2  4FF8 7000                521  ASL_ASR     LEA     STACK,SP            ; Load the SP
000014C6  41F9 000014EC            522                      LEA     tableASL_ASR, A0            ; Index into the table
000014CC  4280                     523                      CLR.L   D0                  ; Zero it
000014CE  303C EE02                524                      MOVE.W  #example,D0         ; We'll play with it here
000014D2  123C 0007                525                      MOVE.B  #7,D1           ; Shift 7 bits left
000014D6  E360                     526                      ASL.W   D1,D0
000014D8  123C 000C                527                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000014DC  E268                     528                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014DE                           529                                      ; and the rest are zeroed out)
000014DE  123C 0003                530                      MOVE.B  #3,D1           ; Shift 3 bits right
000014E2  E260                     531                      ASR.W   D1,D0
000014E4                           532  
000014E4  C0FC 0006                533                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014E8  4EF0 0000                534                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000014EC                           535  
000014EC  4EF9 000014F8            536  tableASL_ASR            JMP    ASL_ASRcode0   ; ASR
000014F2  4EF9 000014FE            537                          JMP    ASL_ASRcode1   ; ASL
000014F8                           538  
000014F8                           539  
000014F8                           540  
000014F8                           541  
000014F8  4EB8 1246                542  ASL_ASRcode0   JSR     someASR
000014FC  4E75                     543                 RTS
000014FE  4EB8 129A                544  ASL_ASRcode1   JSR     someASL
00001502  4E75                     545                 RTS
00001504                           546  
00001504                           547  
00001504                           548  ***************************** END ASL_ASR ************************************
00001504                           549  
00001504                           550  
00001504                           551  *****************************  ROd_LSd_ASd ************************************
00001504  4FF8 7000                552  ROd_LSd_ASd     LEA     STACK,SP            ; Load the SP
00001508  41F9 0000152E            553                      LEA     tableROd_LSd_ASd, A0            ; Index into the table
0000150E  4280                     554                      CLR.L   D0                  ; Zero it
00001510  303C EE02                555                      MOVE.W  #example,D0         ; We'll play with it here
00001514  123C 000B                556                      MOVE.B  #11,D1           ; Shift 11 bits left
00001518  E360                     557                      ASL.W   D1,D0
0000151A  123C 000C                558                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000151E  E268                     559                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001520                           560                                      ; and the rest are zeroed out)
00001520  123C 0002                561                      MOVE.B  #2,D1           ; Shift 2 bits right
00001524  E260                     562                      ASR.W   D1,D0
00001526                           563  
00001526  C0FC 0006                564                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000152A  4EF0 0000                565                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000152E                           566  
0000152E  4EF9 00001546            567  tableROd_LSd_ASd        JMP    ROd_LSd_ASdcode00   ; ASL_ASR
00001534  4EF9 0000154C            568                          JMP    ROd_LSd_ASdcode01   ; LSL_LSR
0000153A  4EF9 00001552            569                          JMP    ROd_LSd_ASdcode10
00001540  4EF9 00001556            570                          JMP    ROd_LSd_ASdcode11   ; ROL_ROR
00001546                           571  
00001546                           572  
00001546                           573  
00001546  4EB8 14C2                574  ROd_LSd_ASdcode00   JSR     ASL_ASR
0000154A  4E75                     575                      RTS
0000154C  4EB8 1480                576  ROd_LSd_ASdcode01   JSR     LSL_LSR
00001550  4E75                     577                      RTS
00001552  4E72 2700                578  ROd_LSd_ASdcode10   STOP    #$2700
00001556  4EB8 143E                579  ROd_LSd_ASdcode11   JSR     ROL_ROR
0000155A  4E75                     580                      RTS
0000155C                           581  
0000155C                           582  ***************************** END  ROd_LSd_ASd ************************************
0000155C                           583  
0000155C                           584  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
0000155C  4FF8 7000                585  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
00001560  41F9 00001586            586                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
00001566  4280                     587                      CLR.L   D0                  ; Zero it
00001568  303C EE02                588                      MOVE.W  #example,D0         ; We'll play with it here
0000156C  123C 0007                589                      MOVE.B  #7,D1           ; Shift 7 bits left
00001570  E360                     590                      ASL.W   D1,D0
00001572  123C 000C                591                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001576  E268                     592                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001578                           593                                      ; and the rest are zeroed out)
00001578  123C 0001                594                      MOVE.B  #1,D1           ; Shift 1 bits right
0000157C  E260                     595                      ASR.W   D1,D0
0000157E                           596  
0000157E  C0FC 0006                597                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001582  4EF0 0000                598                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001586                           599  
00001586  4EF9 000015B6            600  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
0000158C  4EF9 000015BE            601                                          JMP    ANDcode001   ; AND.W
00001592  4EF9 000015C6            602                                          JMP    ANDcode010   ; AND.L
00001598                           603  
00001598  4EF9 000015CE            604                                          JMP    ANDcode011
0000159E  4EF9 000015D2            605                                          JMP    ANDcode100   ; AND.B
000015A4  4EF9 000015DA            606                                          JMP    ANDcode101   ; AND.W
000015AA  4EF9 000015E2            607                                          JMP    ANDcode110   ; AND.L
000015B0  4EF9 000015EA            608                                          JMP    ANDcode111   ; MULS.W
000015B6                           609  
000015B6                           610  
000015B6  4EB9 00001E5A            611  ANDcode000   JSR     ISANDB
000015BC  4E75                     612               RTS
000015BE  4EB9 00001E70            613  ANDcode001   JSR     ISANDW
000015C4  4E75                     614               RTS
000015C6  4EB9 00001E86            615  ANDcode010   JSR     ISANDL
000015CC  4E75                     616               RTS
000015CE  4E72 2700                617  ANDcode011   STOP  #$2700
000015D2  4EB9 00001E5A            618  ANDcode100   JSR     ISANDB
000015D8  4E75                     619               RTS
000015DA  4EB9 00001E70            620  ANDcode101   JSR     ISANDW
000015E0  4E75                     621               RTS
000015E2  4EB9 00001E86            622  ANDcode110   JSR     ISANDL
000015E8  4E75                     623               RTS
000015EA  4EB9 00001E44            624  ANDcode111   JSR     ISMULSW
000015F0  4E75                     625               RTS
000015F2                           626  
000015F2                           627  ***************************** END  ADD_BorADD_WorADD_L ************************************
000015F2                           628  
000015F2                           629  *****************************  ADD_BorADD_WorADD_L ************************************
000015F2  4FF8 7000                630  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
000015F6  41F9 0000161C            631                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
000015FC  4280                     632                      CLR.L   D0                  ; Zero it
000015FE  303C EE02                633                      MOVE.W  #example,D0         ; We'll play with it here
00001602  123C 0007                634                      MOVE.B  #7,D1           ; Shift 7 bits left
00001606  E360                     635                      ASL.W   D1,D0
00001608  123C 000C                636                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000160C  E268                     637                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000160E                           638                                      ; and the rest are zeroed out)
0000160E  123C 0001                639                      MOVE.B  #1,D1           ; Shift 1 bits right
00001612  E260                     640                      ASR.W   D1,D0
00001614                           641  
00001614  C0FC 0006                642                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001618  4EF0 0000                643                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000161C                           644  
0000161C  4EF9 0000164C            645  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
00001622  4EF9 00001654            646                                   JMP    ADDcode001   *ADD.W
00001628  4EF9 0000165C            647                                   JMP    ADDcode010   *ADD.L
0000162E                           648  
0000162E  4EF9 00001664            649                                   JMP    ADDcode011   *ADDA.W
00001634  4EF9 0000166C            650                                   JMP    ADDcode100   *ADD.B
0000163A  4EF9 00001674            651                                   JMP    ADDcode101   *ADD.W
00001640  4EF9 0000167C            652                                   JMP    ADDcode110   *ADD.L
00001646  4EF9 00001684            653                                   JMP    ADDcode111   *ADDA.L
0000164C                           654  
0000164C                           655  
0000164C  4EB9 00001EC8            656  ADDcode000   JSR     ISADDB
00001652  4E75                     657               RTS
00001654  4EB9 00001EDE            658  ADDcode001   JSR     ISADDW
0000165A  4E75                     659               RTS
0000165C  4EB9 00001EF4            660  ADDcode010   JSR     ISADDL
00001662  4E75                     661               RTS
00001664  4EB9 00001E9C            662  ADDcode011   JSR     ISADDAW
0000166A  4E75                     663               RTS
0000166C  4EB9 00001EC8            664  ADDcode100   JSR     ISADDB
00001672  4E75                     665               RTS
00001674  4EB9 00001EDE            666  ADDcode101   JSR     ISADDW
0000167A  4E75                     667               RTS
0000167C  4EB9 00001EF4            668  ADDcode110   JSR     ISADDL
00001682  4E75                     669               RTS
00001684  4EB9 00001EB2            670  ADDcode111   JSR     ISADDAL
0000168A  4E75                     671               RTS
0000168C                           672  
0000168C                           673  ***************************** END  ADD_BorADD_WorADD_L ************************************
0000168C                           674  
0000168C                           675  *****************************  SUB_BorSUB_WorSUB_L ************************************
0000168C  4FF8 7000                676  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
00001690  41F9 000016B6            677                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
00001696  4280                     678                      CLR.L   D0                  ; Zero it
00001698  303C EE02                679                      MOVE.W  #example,D0         ; We'll play with it here
0000169C  123C 0007                680                      MOVE.B  #7,D1           ; Shift 7 bits left
000016A0  E360                     681                      ASL.W   D1,D0
000016A2  123C 000C                682                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000016A6  E268                     683                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000016A8                           684                                      ; and the rest are zeroed out)
000016A8  123C 0001                685                      MOVE.B  #1,D1           ; Shift 1 bits right
000016AC  E260                     686                      ASR.W   D1,D0
000016AE                           687  
000016AE  C0FC 0006                688                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016B2  4EF0 0000                689                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000016B6                           690  
000016B6  4EF9 000016E0            691  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
000016BC  4EF9 000016E8            692                                   JMP    SUBcode001   *SUB.W
000016C2  4EF9 000016F0            693                                   JMP    SUBcode010   *SUB.L
000016C8                           694  
000016C8  4EF9 000016F8            695                                   JMP    SUBcode011
000016CE  4EF9 000016FC            696                                   JMP    SUBcode100   *SUB.B
000016D4  4EF9 00001704            697                                   JMP    SUBcode101   *SUB.W
000016DA  4EF9 0000170C            698                                   JMP    SUBcode110   *SUB.L
000016E0                           699  
000016E0                           700  
000016E0                           701  
000016E0  4EB9 00001F0A            702  SUBcode000   JSR     ISSUBB
000016E6  4E75                     703               RTS
000016E8  4EB9 00001F20            704  SUBcode001   JSR     ISSUBW
000016EE  4E75                     705               RTS
000016F0  4EB9 00001F36            706  SUBcode010   JSR     ISSUBL
000016F6  4E75                     707               RTS
000016F8  4E72 2700                708  SUBcode011   STOP  #$2700
000016FC  4EB9 00001F0A            709  SUBcode100   JSR     ISSUBB
00001702  4E75                     710               RTS
00001704  4EB9 00001F20            711  SUBcode101   JSR     ISSUBW
0000170A  4E75                     712               RTS
0000170C  4EB9 00001F36            713  SUBcode110   JSR     ISSUBL
00001712  4E75                     714               RTS
00001714                           715  
00001714                           716  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
00001714                           717  
00001714                           718  
00001714                           719  ***************************** CMP_BorCMP_WorCMP_L ************************************
00001714  4FF8 7000                720  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
00001718  41F9 0000173E            721                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
0000171E  4280                     722                      CLR.L   D0                  ; Zero it
00001720  303C EE02                723                      MOVE.W  #example,D0         ; We'll play with it here
00001724  123C 0007                724                      MOVE.B  #7,D1           ; Shift 7 bits left
00001728  E360                     725                      ASL.W   D1,D0
0000172A  123C 000C                726                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000172E  E268                     727                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001730                           728                                      ; and the rest are zeroed out)
00001730  123C 0001                729                      MOVE.B  #1,D1           ; Shift 1 bits right
00001734  E260                     730                      ASR.W   D1,D0
00001736                           731  
00001736  C0FC 0006                732                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000173A  4EF0 0000                733                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000173E                           734  
0000173E  4EF9 00001750            735  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
00001744  4EF9 00001758            736                                   JMP    CMPcode001   *CMP.W
0000174A  4EF9 00001760            737                                   JMP    CMPcode010   *CMP.L
00001750                           738  
00001750  4EB9 00001F4C            739  CMPcode000   JSR     ISCMPB
00001756  4E75                     740              RTS
00001758  4EB9 00001F62            741  CMPcode001   JSR     ISCMPW
0000175E  4E75                     742              RTS
00001760  4EB9 00001F78            743  CMPcode010   JSR     ISCMPL
00001766  4E75                     744              RTS
00001768                           745  
00001768                           746  ***************************** END CMP_BorCMP_WorCMP_L ************************************
00001768                           747  
00001768                           748  
00001768                           749  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
00001768  4FF8 7000                750  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
0000176C  41F9 00001792            751                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
00001772  4280                     752                      CLR.L   D0                  ; Zero it
00001774  303C EE02                753                      MOVE.W  #example,D0         ; We'll play with it here
00001778  123C 0008                754                      MOVE.B  #8,D1           ; Shift 8 bits left
0000177C  E360                     755                      ASL.W   D1,D0
0000177E  123C 000C                756                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001782  E268                     757                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001784                           758                                      ; and the rest are zeroed out)
00001784  123C 0002                759                      MOVE.B  #2,D1           ; Shift 2 bits right
00001788  E260                     760                      ASR.W   D1,D0
0000178A                           761  
0000178A  C0FC 0006                762                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000178E  4EF0 0000                763                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001792                           764  
00001792  4EF9 000017A4            765  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
00001798  4EF9 000017AC            766                                      JMP     ADDQcode01   *ADDQ.W
0000179E  4EF9 000017B4            767                                      JMP     ADDQcode10   *ADDQ.L
000017A4                           768  
000017A4  4EB9 00001F8E            769  ADDQcode00   JSR     ISADDQB
000017AA  4E75                     770              RTS
000017AC  4EB9 00001FA4            771  ADDQcode01   JSR     ISADDQW
000017B2  4E75                     772              RTS
000017B4  4EB9 00001FBA            773  ADDQcode10   JSR     ISADDQL
000017BA  4E75                     774              RTS
000017BC                           775  
000017BC                           776  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
000017BC                           777  
000017BC                           778  
000017BC                           779  *****************************someCLR ************************************
000017BC  4FF8 7000                780  someCLR     LEA     STACK,SP            ; Load the SP
000017C0  41F9 000017E6            781                      LEA     tableSomeCLR, A0            ; Index into the table
000017C6  4280                     782                      CLR.L   D0                  ; Zero it
000017C8  303C EE02                783                      MOVE.W  #example,D0         ; We'll play with it here
000017CC  123C 0008                784                      MOVE.B  #8,D1           ; Shift 8 bits left
000017D0  E360                     785                      ASL.W   D1,D0
000017D2  123C 000C                786                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000017D6  E268                     787                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000017D8                           788                                      ; and the rest are zeroed out)
000017D8  123C 0002                789                      MOVE.B  #2,D1           ; Shift 2 bits right
000017DC  E260                     790                      ASR.W   D1,D0
000017DE                           791  
000017DE  C0FC 0006                792                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000017E2  4EF0 0000                793                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000017E6                           794  
000017E6  4EF9 000017F8            795  tableSomeCLR        JMP     CLRcode00   *CLR.B
000017EC  4EF9 00001800            796                      JMP     CLRcode01   *CLR.W
000017F2  4EF9 00001808            797                      JMP     CLRcode10   *CLR.L
000017F8                           798  
000017F8  4EB9 00001FE6            799  CLRcode00   JSR     ISCLRB
000017FE  4E75                     800              RTS
00001800  4EB9 00001FFC            801  CLRcode01   JSR     ISCLRW
00001806  4E75                     802              RTS
00001808  4EB9 00002012            803  CLRcode10   JSR     ISCLRL
0000180E  4E75                     804              RTS
00001810                           805  
00001810                           806  *****************************END someCLR ************************************
00001810                           807  
00001810                           808  *****************************NOPorCLRorRTSorJSR ************************************
00001810  4FF8 7000                809  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
00001814  41F9 00001848            810                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
0000181A  4280                     811                      CLR.L   D0                  ; Zero it
0000181C  303C EE02                812                      MOVE.W  #example,D0         ; We'll play with it here
00001820                           813  
00001820  323C 4E71                814                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
00001824  B240                     815                      CMP.W   D0, D1
00001826  6700 0088                816                      BEQ     NOPcommand
0000182A                           817  
0000182A  323C 4E75                818                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
0000182E  B240                     819                      CMP.W   D0, D1
00001830  6700 0076                820                      BEQ     RTScommand
00001834                           821  
00001834  123C 0004                822                      MOVE.B  #4,D1           ; Shift 4 bits left
00001838  E360                     823                      ASL.W   D1,D0
0000183A  123C 000C                824                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000183E  E268                     825                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001840                           826                                      ; and the rest are zeroed out)
00001840                           827  
00001840                           828  
00001840  C0FC 0006                829                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001844  4EF0 0000                830                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001848                           831  
00001848  4EF9 000018B8            832  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
0000184E  4EF9 000018BC            833                             JMP     JSRorCLRcode0001
00001854  4EF9 000018C0            834                             JMP     JSRorCLRcode0010
0000185A  4EF9 000018C6            835                             JMP     JSRorCLRcode0011
00001860  4EF9 000018CA            836                             JMP     JSRorCLRcode0100
00001866  4EF9 000018CE            837                             JMP     JSRorCLRcode0101
0000186C  4EF9 000018D2            838                             JMP     JSRorCLRcode0110
00001872  4EF9 000018D6            839                             JMP     JSRorCLRcode0111
00001878  4EF9 000018DA            840                             JMP     JSRorCLRcode1000
0000187E  4EF9 000018DE            841                             JMP     JSRorCLRcode1001
00001884  4EF9 000018E2            842                             JMP     JSRorCLRcode1010
0000188A  4EF9 000018E6            843                             JMP     JSRorCLRcode1011
00001890  4EF9 000018EA            844                             JMP     JSRorCLRcode1100
00001896  4EF9 000018EE            845                             JMP     JSRorCLRcode1101
0000189C  4EF9 000018F2            846                             JMP     JSRorCLRcode1110
000018A2  4EF9 000018FA            847                             JMP     JSRorCLRcode1111
000018A8                           848  
000018A8  4EB9 00002080            849  RTScommand          JSR     ISRTS
000018AE  4E75                     850                      RTS
000018B0  4EB9 000020AC            851  NOPcommand          JSR     ISNOP
000018B6  4E75                     852                      RTS
000018B8  4E72 2700                853  JSRorCLRcode0000     STOP  #$2700
000018BC  4E72 2700                854  JSRorCLRcode0001     STOP  #$2700
000018C0  4EB8 17BC                855  JSRorCLRcode0010    JSR      someCLR
000018C4  4E75                     856                      RTS
000018C6  4E72 2700                857  JSRorCLRcode0011     STOP  #$2700
000018CA  4E72 2700                858  JSRorCLRcode0100     STOP  #$2700
000018CE  4E72 2700                859  JSRorCLRcode0101     STOP  #$2700
000018D2  4E72 2700                860  JSRorCLRcode0110     STOP  #$2700
000018D6  4E72 2700                861  JSRorCLRcode0111     STOP  #$2700
000018DA  4E72 2700                862  JSRorCLRcode1000     STOP  #$2700
000018DE  4E72 2700                863  JSRorCLRcode1001     STOP  #$2700
000018E2  4E72 2700                864  JSRorCLRcode1010     STOP  #$2700
000018E6  4E72 2700                865  JSRorCLRcode1011     STOP  #$2700
000018EA  4E72 2700                866  JSRorCLRcode1100     STOP  #$2700
000018EE  4E72 2700                867  JSRorCLRcode1101     STOP  #$2700
000018F2  4EB9 0000206A            868  JSRorCLRcode1110    JSR     ISJSR
000018F8  4E75                     869                      RTS
000018FA  4E72 2700                870  JSRorCLRcode1111     STOP  #$2700
000018FE                           871  
000018FE                           872  *****************************END NOPorCLRorRTSorJSR ************************************
000018FE                           873  
000018FE                           874  
000018FE                           875  *****************************someMOVEM ************************************
000018FE  4FF8 7000                876  someMOVEM     LEA     STACK,SP            ; Load the SP
00001902  41F9 00001928            877                      LEA     tableSomeMOVEM, A0            ; Index into the table
00001908  4280                     878                      CLR.L   D0                  ; Zero it
0000190A  303C EE02                879                      MOVE.W  #example,D0         ; We'll play with it here
0000190E  123C 0009                880                      MOVE.B  #9,D1           ; Shift 9 bits left
00001912  E360                     881                      ASL.W   D1,D0
00001914  123C 000C                882                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001918  E268                     883                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000191A                           884                                      ; and the rest are zeroed out)
0000191A  123C 0003                885                      MOVE.B  #3,D1           ; Shift 3 bits right
0000191E  E260                     886                      ASR.W   D1,D0
00001920                           887  
00001920  C0FC 0006                888                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001924  4EF0 0000                889                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001928                           890  
00001928  4EF9 00001934            891  tableSomeMOVEM    JMP     MOVEMcode0   ;MOVEM.W
0000192E  4EF9 0000193C            892                    JMP     MOVEMcode1   ;MOVEM.L
00001934                           893  
00001934                           894  
00001934                           895  
00001934  4EB9 0000203E            896  MOVEMcode0         JSR     ISMOVEMW
0000193A  4E75                     897                      RTS
0000193C  4EB9 00002028            898  MOVEMcode1         JSR     ISMOVEML
00001942  4E75                     899                      RTS
00001944                           900  
00001944                           901  *****************************END someMOVEM ************************************
00001944                           902  
00001944                           903  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001944  4FF8 7000                904  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
00001948  41F9 0000196E            905                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
0000194E  4280                     906                      CLR.L   D0                  ; Zero it
00001950  303C EE02                907                      MOVE.W  #example,D0         ; We'll play with it here
00001954  123C 0007                908                      MOVE.B  #7,D1           ; Shift 7 bits right
00001958  E260                     909                      ASR.W   D1,D0
0000195A                           910  
0000195A  123C 000D                911                      MOVE.B  #13,D1           ; Shift 13 bits left
0000195E  E360                     912                      ASL.W   D1,D0
00001960  123C 000C                913                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001964  E268                     914                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001966                           915                                      ; and the rest are zeroed out)
00001966                           916  
00001966                           917  
00001966  C0FC 0006                918                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000196A  4EF0 0000                919                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000196E                           920  
0000196E  4EF9 000019C8            921  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
00001974  4EF9 000019D2            922                                    JMP     LOTScode0001
0000197A  4EF9 000019D6            923                                    JMP     LOTScode0010
00001980  4EF9 000019E0            924                                    JMP     LOTScode0011
00001986  4EF9 000019E4            925                                    JMP     LOTScode0100
0000198C  4EF9 000019E8            926                                    JMP     LOTScode0101
00001992  4EF9 000019EC            927                                    JMP     LOTScode0110
00001998  4EF9 000019F8            928                                    JMP     LOTScode0111
0000199E  4EF9 000019FC            929                                    JMP     LOTScode1000
000019A4  4EF9 00001A06            930                                    JMP     LOTScode1001
000019AA  4EF9 00001A0A            931                                    JMP     LOTScode1010
000019B0  4EF9 00001A14            932                                    JMP     LOTScode1011
000019B6  4EF9 00001A18            933                                    JMP     LOTScode1100
000019BC  4EF9 00001A1C            934                                    JMP     LOTScode1101                               JMP     LOTScode1110
000019C2  4EF9 00001A2C            935                                    JMP     LOTScode1111
000019C8                           936  
000019C8                           937  
000019C8                           938  
000019C8  4EB8 117A                939  LOTScode0000        JSR   MULSLorDIVUL
000019CC  4EB9 00002172            940                      JSR    DONE
000019D2  4E72 2700                941  LOTScode0001        STOP  #$2700
000019D6  4EB8 18FE                942  LOTScode0010        JSR    someMOVEM
000019DA  4EB9 00002172            943                      JSR    DONE
000019E0  4E72 2700                944  LOTScode0011        STOP  #$2700
000019E4  4E72 2700                945  LOTScode0100        STOP  #$2700
000019E8  4E72 2700                946  LOTScode0101        STOP  #$2700
000019EC  4EB9 00002054            947  LOTScode0110        JSR    ISLEA
000019F2  4EB9 00002172            948                      JSR    DONE
000019F8  4E72 2700                949  LOTScode0111        STOP  #$2700
000019FC  4EB8 1810                950  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001A00  4EB9 00002172            951                      JSR    DONE
00001A06  4E72 2700                952  LOTScode1001        STOP  #$2700
00001A0A  4EB8 1810                953  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001A0E  4EB9 00002172            954                      JSR    DONE
00001A14  4E72 2700                955  LOTScode1011        STOP  #$2700
00001A18  4E72 2700                956  LOTScode1100        STOP  #$2700
00001A1C  4E72 2700                957  LOTScode1101        STOP  #$2700
00001A20  4EB9 00002054            958  LOTScode1110        JSR    ISLEA
00001A26  4EB9 00002172            959                      JSR    DONE
00001A2C  4E72 2700                960  LOTScode1111        STOP  #$2700
00001A30                           961  
00001A30                           962  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001A30                           963  
00001A30                           964  
00001A30                           965  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001A30  4FF8 7000                966  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001A34  41F9 00001A54            967                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001A3A  4280                     968                      CLR.L   D0                  ; Zero it
00001A3C  303C EE02                969                      MOVE.W  #example,D0         ; We'll play with it here
00001A40  123C 0007                970                      MOVE.B  #7,D1           ; Shift 7 bits left
00001A44  E360                     971                      ASL.W   D1,D0
00001A46  123C 000D                972                      MOVE.B  #13,D1
00001A4A  E260                     973                      ASR.W   D1,D0
00001A4C                           974  
00001A4C                           975  
00001A4C  C0FC 0006                976                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A50  4EF0 0000                977                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001A54                           978  
00001A54  4EF9 00001A66            979  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001A5A  4EF9 00001A72            980                                 JMP     ADDIWcode01
00001A60  4EF9 00001A7E            981                                 JMP     ADDILcode10
00001A66                           982  
00001A66                           983  
00001A66  4EB9 0000215C            984  ADDIBcode00        JSR     ISADDIB
00001A6C  4EB9 00002172            985                      JSR    DONE
00001A72  4EB9 00002130            986  ADDIWcode01        JSR     ISADDIW
00001A78  4EB9 00002172            987                      JSR    DONE
00001A7E  4EB9 00002146            988  ADDILcode10        JSR     ISADDIL
00001A84  4EB9 00002172            989                      JSR    DONE
00001A8A                           990  
00001A8A                           991  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001A8A                           992  
00001A8A                           993  
00001A8A                           994  
00001A8A                           995  
00001A8A                           996  *****************************MOVEA_LorMOVE_L ************************************
00001A8A  4FF8 7000                997  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001A8E  41F9 00001AAE            998                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001A94  4280                     999                      CLR.L   D0                  ; Zero it
00001A96  303C EE02               1000                      MOVE.W  #example,D0         ; We'll play with it here
00001A9A  123C 0007               1001                      MOVE.B  #7,D1           ; Shift 7 bits left
00001A9E  E360                    1002                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001AA0  123C 000D               1003                      MOVE.B  #13,D1           ; Shift 13 bits right
00001AA4  E260                    1004                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001AA6                          1005  
00001AA6                          1006  
00001AA6  C0FC 0006               1007                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001AAA  4EF0 0000               1008                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001AAE                          1009  
00001AAE  4EF9 00001ADE           1010  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001AB4  4EF9 00001AEA           1011                          JMP     MOVEAcode001
00001ABA  4EF9 00001AF6           1012                          JMP     MOVEcode010
00001AC0  4EF9 00001B02           1013                          JMP     MOVEcode011
00001AC6  4EF9 00001B0E           1014                          JMP     MOVEcode100
00001ACC  4EF9 00001B1A           1015                          JMP     MOVEcode101
00001AD2  4EF9 00001B26           1016                          JMP     MOVEcode110
00001AD8  4EF9 00001B32           1017                          JMP     MOVEcode111
00001ADE                          1018  
00001ADE  4EB9 000020EE           1019  MOVEcode000     JSR     ISMOVEL
00001AE4  4EB9 00002172           1020                  JSR    DONE
00001AEA  4EB9 00002104           1021  MOVEAcode001    JSR     ISMOVEAL
00001AF0  4EB9 00002172           1022                  JSR    DONE
00001AF6  4EB9 000020EE           1023  MOVEcode010     JSR     ISMOVEL
00001AFC  4EB9 00002172           1024                  JSR    DONE
00001B02  4EB9 000020EE           1025  MOVEcode011     JSR     ISMOVEL
00001B08  4EB9 00002172           1026                  JSR    DONE
00001B0E  4EB9 000020EE           1027  MOVEcode100     JSR     ISMOVEL
00001B14  4EB9 00002172           1028                  JSR    DONE
00001B1A  4EB9 000020EE           1029  MOVEcode101     JSR     ISMOVEL
00001B20  4EB9 00002172           1030                  JSR    DONE
00001B26  4EB9 000020EE           1031  MOVEcode110     JSR     ISMOVEL
00001B2C  4EB9 00002172           1032                  JSR    DONE
00001B32  4EB9 000020EE           1033  MOVEcode111     JSR     ISMOVEL
00001B38  4EB9 00002172           1034                  JSR    DONE
00001B3E                          1035  *****************************END MOVEA_LorMOVE_L ************************************
00001B3E                          1036  
00001B3E                          1037  *****************************MOVEA_WorMOVE_W ************************************
00001B3E  4FF8 7000               1038  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001B42  41F9 00001B62           1039                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001B48  4280                    1040                      CLR.L   D0                  ; Zero it
00001B4A  303C EE02               1041                      MOVE.W  #example,D0         ; We'll play with it here
00001B4E  123C 0007               1042                      MOVE.B  #7,D1           ; Shift 7 bits left
00001B52  E360                    1043                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001B54  123C 000D               1044                      MOVE.B  #13,D1           ; Shift 13 bits right
00001B58  E260                    1045                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001B5A                          1046  
00001B5A                          1047  
00001B5A  C0FC 0006               1048                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B5E  4EF0 0000               1049                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001B62                          1050  
00001B62  4EF9 00001B92           1051  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001B68  4EF9 00001B9E           1052                          JMP     MOVEAWcode001
00001B6E  4EF9 00001BAA           1053                          JMP     MOVEWcode010
00001B74  4EF9 00001BB6           1054                          JMP     MOVEWcode011
00001B7A  4EF9 00001BC2           1055                          JMP     MOVEWcode100
00001B80  4EF9 00001BCE           1056                          JMP     MOVEWcode101
00001B86  4EF9 00001BDA           1057                          JMP     MOVEWcode110
00001B8C  4EF9 00001BE6           1058                          JMP     MOVEWcode111
00001B92                          1059  
00001B92  4EB9 000020C2           1060  MOVEWcode000     JSR     ISMOVEW
00001B98  4EB9 00002172           1061                  JSR    DONE
00001B9E  4EB9 000020D8           1062  MOVEAWcode001    JSR     ISMOVEAW
00001BA4  4EB9 00002172           1063                  JSR    DONE
00001BAA  4EB9 000020C2           1064  MOVEWcode010     JSR     ISMOVEW
00001BB0  4EB9 00002172           1065                  JSR    DONE
00001BB6  4EB9 000020C2           1066  MOVEWcode011     JSR     ISMOVEW
00001BBC  4EB9 00002172           1067                  JSR    DONE
00001BC2  4EB9 000020C2           1068  MOVEWcode100     JSR     ISMOVEW
00001BC8  4EB9 00002172           1069                  JSR    DONE
00001BCE  4EB9 000020C2           1070  MOVEWcode101     JSR     ISMOVEW
00001BD4  4EB9 00002172           1071                  JSR    DONE
00001BDA  4EB9 000020C2           1072  MOVEWcode110     JSR     ISMOVEW
00001BE0  4EB9 00002172           1073                  JSR    DONE
00001BE6  4EB9 000020C2           1074  MOVEWcode111     JSR     ISMOVEW
00001BEC  4EB9 00002172           1075                  JSR    DONE
00001BF2                          1076  *****************************END MOVEA_WorMOVE_W ************************************
00001BF2  48A7 FFFF               1077  ISBCC  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001BF6  43F9 0000236C           1078              LEA MESSAGEBCC, A1
00001BFC  103C 000E               1079              MOVE.B  #14, D0
00001C00  4E4F                    1080              TRAP    #15
00001C02                          1081  
00001C02  4C9F FFFF               1082              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C06  4E75                    1083              RTS
00001C08  48A7 FFFF               1084  ISBGT  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C0C  43F9 00002372           1085              LEA MESSAGEBGT, A1
00001C12  103C 000E               1086              MOVE.B  #14, D0
00001C16  4E4F                    1087              TRAP    #15
00001C18                          1088  
00001C18  4C9F FFFF               1089              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C1C  4E75                    1090              RTS
00001C1E                          1091  
00001C1E  48A7 FFFF               1092  ISBLE  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C22  43F9 00002378           1093              LEA MESSAGEBLE, A1
00001C28  103C 000E               1094              MOVE.B  #14, D0
00001C2C  4E4F                    1095              TRAP    #15
00001C2E                          1096  
00001C2E  4C9F FFFF               1097              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C32  4E75                    1098              RTS
00001C34                          1099  
00001C34  48A7 FFFF               1100  ISDIVUL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C38  43F9 00002363           1101              LEA MESSAGEDIVUL, A1
00001C3E  103C 000E               1102              MOVE.B  #14, D0
00001C42  4E4F                    1103              TRAP    #15
00001C44                          1104  
00001C44  4C9F FFFF               1105              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C48  4E75                    1106              RTS
00001C4A                          1107  
00001C4A  48A7 FFFF               1108  ISDIVUW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C4E  43F9 0000235A           1109              LEA MESSAGEDIVUW, A1
00001C54  103C 000E               1110              MOVE.B  #14, D0
00001C58  4E4F                    1111              TRAP    #15
00001C5A                          1112  
00001C5A  4C9F FFFF               1113              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C5E  4E75                    1114              RTS
00001C60                          1115  
00001C60  48A7 FFFF               1116  ISORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C64  43F9 00002345           1117              LEA MESSAGEORB, A1
00001C6A  103C 000E               1118              MOVE.B  #14, D0
00001C6E  4E4F                    1119              TRAP    #15
00001C70                          1120  
00001C70  4C9F FFFF               1121              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C74  4E75                    1122              RTS
00001C76                          1123  
00001C76  48A7 FFFF               1124  ISORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C7A  43F9 0000234C           1125              LEA MESSAGEORW, A1
00001C80  103C 000E               1126              MOVE.B  #14, D0
00001C84  4E4F                    1127              TRAP    #15
00001C86                          1128  
00001C86  4C9F FFFF               1129              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C8A  4E75                    1130              RTS
00001C8C                          1131  
00001C8C  48A7 FFFF               1132  ISORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C90  43F9 00002353           1133              LEA MESSAGEORL, A1
00001C96  103C 000E               1134              MOVE.B  #14, D0
00001C9A  4E4F                    1135              TRAP    #15
00001C9C                          1136  
00001C9C  4C9F FFFF               1137              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CA0  4E75                    1138              RTS
00001CA2                          1139  
00001CA2  48A7 FFFF               1140  ISASRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CA6  43F9 000022B5           1141              LEA MESSAGEASRB, A1
00001CAC  103C 000E               1142              MOVE.B  #14, D0
00001CB0  4E4F                    1143              TRAP    #15
00001CB2                          1144  
00001CB2  4C9F FFFF               1145              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CB6  4E75                    1146              RTS
00001CB8                          1147  
00001CB8  48A7 FFFF               1148  ISASRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CBC  43F9 000022BD           1149              LEA MESSAGEASRW, A1
00001CC2  103C 000E               1150              MOVE.B  #14, D0
00001CC6  4E4F                    1151              TRAP    #15
00001CC8                          1152  
00001CC8  4C9F FFFF               1153              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CCC  4E75                    1154              RTS
00001CCE                          1155  
00001CCE  48A7 FFFF               1156  ISASRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CD2  43F9 000022C5           1157              LEA MESSAGEASRL, A1
00001CD8  103C 000E               1158              MOVE.B  #14, D0
00001CDC  4E4F                    1159              TRAP    #15
00001CDE                          1160  
00001CDE  4C9F FFFF               1161              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CE2  4E75                    1162              RTS
00001CE4                          1163  
00001CE4  48A7 FFFF               1164  ISASLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CE8  43F9 000022CD           1165              LEA MESSAGEASLB, A1
00001CEE  103C 000E               1166              MOVE.B  #14, D0
00001CF2  4E4F                    1167              TRAP    #15
00001CF4                          1168  
00001CF4  4C9F FFFF               1169              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CF8  4E75                    1170              RTS
00001CFA                          1171  
00001CFA  48A7 FFFF               1172  ISASLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CFE  43F9 000022D5           1173              LEA MESSAGEASLW, A1
00001D04  103C 000E               1174              MOVE.B  #14, D0
00001D08  4E4F                    1175              TRAP    #15
00001D0A                          1176  
00001D0A  4C9F FFFF               1177              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D0E  4E75                    1178              RTS
00001D10                          1179  
00001D10  48A7 FFFF               1180  ISASLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D14  43F9 000022DD           1181              LEA MESSAGEASLL, A1
00001D1A  103C 000E               1182              MOVE.B  #14, D0
00001D1E  4E4F                    1183              TRAP    #15
00001D20                          1184  
00001D20  4C9F FFFF               1185              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D24  4E75                    1186              RTS
00001D26                          1187  
00001D26  48A7 FFFF               1188  ISLSRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D2A  43F9 00002315           1189              LEA MESSAGELSRB, A1
00001D30  103C 000E               1190              MOVE.B  #14, D0
00001D34  4E4F                    1191              TRAP    #15
00001D36                          1192  
00001D36  4C9F FFFF               1193              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D3A  4E75                    1194              RTS
00001D3C                          1195  
00001D3C  48A7 FFFF               1196  ISLSRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D40  43F9 0000231D           1197              LEA MESSAGELSRW, A1
00001D46  103C 000E               1198              MOVE.B  #14, D0
00001D4A  4E4F                    1199              TRAP    #15
00001D4C                          1200  
00001D4C  4C9F FFFF               1201              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D50  4E75                    1202              RTS
00001D52                          1203  
00001D52  48A7 FFFF               1204  ISLSRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D56  43F9 00002325           1205              LEA MESSAGELSRL, A1
00001D5C  103C 000E               1206              MOVE.B  #14, D0
00001D60  4E4F                    1207              TRAP    #15
00001D62                          1208  
00001D62  4C9F FFFF               1209              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D66  4E75                    1210              RTS
00001D68                          1211  
00001D68  48A7 FFFF               1212  ISLSLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D6C  43F9 0000232D           1213              LEA MESSAGELSLB, A1
00001D72  103C 000E               1214              MOVE.B  #14, D0
00001D76  4E4F                    1215              TRAP    #15
00001D78                          1216  
00001D78  4C9F FFFF               1217              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D7C  4E75                    1218              RTS
00001D7E                          1219  
00001D7E  48A7 FFFF               1220  ISLSLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D82  43F9 00002335           1221              LEA MESSAGELSLW, A1
00001D88  103C 000E               1222              MOVE.B  #14, D0
00001D8C  4E4F                    1223              TRAP    #15
00001D8E                          1224  
00001D8E  4C9F FFFF               1225              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D92  4E75                    1226              RTS
00001D94                          1227  
00001D94  48A7 FFFF               1228  ISLSLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D98  43F9 0000233D           1229              LEA MESSAGELSLL, A1
00001D9E  103C 000E               1230              MOVE.B  #14, D0
00001DA2  4E4F                    1231              TRAP    #15
00001DA4                          1232  
00001DA4  4C9F FFFF               1233              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DA8  4E75                    1234              RTS
00001DAA                          1235  
00001DAA  48A7 FFFF               1236  ISRORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DAE  43F9 000022E5           1237              LEA MESSAGERORB, A1
00001DB4  103C 000E               1238              MOVE.B  #14, D0
00001DB8  4E4F                    1239              TRAP    #15
00001DBA                          1240  
00001DBA  4C9F FFFF               1241              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DBE  4E75                    1242              RTS
00001DC0                          1243  
00001DC0  48A7 FFFF               1244  ISRORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DC4  43F9 000022ED           1245              LEA MESSAGERORW, A1
00001DCA  103C 000E               1246              MOVE.B  #14, D0
00001DCE  4E4F                    1247              TRAP    #15
00001DD0                          1248  
00001DD0  4C9F FFFF               1249              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DD4  4E75                    1250              RTS
00001DD6                          1251  
00001DD6  48A7 FFFF               1252  ISRORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DDA  43F9 000022F5           1253              LEA MESSAGERORL, A1
00001DE0  103C 000E               1254              MOVE.B  #14, D0
00001DE4  4E4F                    1255              TRAP    #15
00001DE6                          1256  
00001DE6  4C9F FFFF               1257              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DEA  4E75                    1258              RTS
00001DEC                          1259  
00001DEC  48A7 FFFF               1260  ISROLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DF0  43F9 000022FD           1261              LEA MESSAGEROLB, A1
00001DF6  103C 000E               1262              MOVE.B  #14, D0
00001DFA  4E4F                    1263              TRAP    #15
00001DFC                          1264  
00001DFC  4C9F FFFF               1265              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E00  4E75                    1266              RTS
00001E02                          1267  
00001E02  48A7 FFFF               1268  ISROLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E06  43F9 00002305           1269              LEA MESSAGEROLW, A1
00001E0C  103C 000E               1270              MOVE.B  #14, D0
00001E10  4E4F                    1271              TRAP    #15
00001E12                          1272  
00001E12  4C9F FFFF               1273              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E16  4E75                    1274              RTS
00001E18                          1275  
00001E18  48A7 FFFF               1276  ISROLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E1C  43F9 0000230D           1277              LEA MESSAGEROLL, A1
00001E22  103C 000E               1278              MOVE.B  #14, D0
00001E26  4E4F                    1279              TRAP    #15
00001E28                          1280  
00001E28  4C9F FFFF               1281              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E2C  4E75                    1282              RTS
00001E2E                          1283  
00001E2E  48A7 FFFF               1284  ISMULSL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E32  43F9 000022AC           1285              LEA MESSAGEMULSL, A1         *OPCODE is MULS.L
00001E38  103C 000E               1286              MOVE.B  #14, D0
00001E3C  4E4F                    1287              TRAP    #15
00001E3E                          1288  
00001E3E  4C9F FFFF               1289              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E42  4E75                    1290              RTS
00001E44                          1291  
00001E44  48A7 FFFF               1292  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E48  43F9 000022A3           1293              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001E4E  103C 000E               1294              MOVE.B  #14, D0
00001E52  4E4F                    1295              TRAP    #15
00001E54                          1296  
00001E54  4C9F FFFF               1297              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E58  4E75                    1298              RTS
00001E5A                          1299  
00001E5A  48A7 FFFF               1300  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E5E  43F9 0000228B           1301              LEA MESSAGEANDB, A1         *OPCODE is AND.B
00001E64  103C 000E               1302              MOVE.B  #14, D0
00001E68  4E4F                    1303              TRAP    #15
00001E6A                          1304  
00001E6A  4C9F FFFF               1305              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E6E  4E75                    1306              RTS
00001E70                          1307  
00001E70  48A7 FFFF               1308  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E74  43F9 00002293           1309              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001E7A  103C 000E               1310              MOVE.B  #14, D0
00001E7E  4E4F                    1311              TRAP    #15
00001E80                          1312  
00001E80  4C9F FFFF               1313              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E84  4E75                    1314              RTS
00001E86                          1315  
00001E86  48A7 FFFF               1316  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E8A  43F9 0000229B           1317              LEA MESSAGEANDL, A1         *OPCODE is AND.L
00001E90  103C 000E               1318              MOVE.B  #14, D0
00001E94  4E4F                    1319              TRAP    #15
00001E96                          1320  
00001E96  4C9F FFFF               1321              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E9A  4E75                    1322              RTS
00001E9C                          1323  
00001E9C  48A7 FFFF               1324  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EA0  43F9 0000226F           1325              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001EA6  103C 000E               1326              MOVE.B  #14, D0
00001EAA  4E4F                    1327              TRAP    #15
00001EAC                          1328  
00001EAC  4C9F FFFF               1329              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EB0  4E75                    1330              RTS
00001EB2                          1331  
00001EB2  48A7 FFFF               1332  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EB6  43F9 00002278           1333              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001EBC  103C 000E               1334              MOVE.B  #14, D0
00001EC0  4E4F                    1335              TRAP    #15
00001EC2                          1336  
00001EC2  4C9F FFFF               1337              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EC6  4E75                    1338              RTS
00001EC8                          1339  
00001EC8  48A7 FFFF               1340  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001ECC  43F9 00002257           1341              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
00001ED2  103C 000E               1342              MOVE.B  #14, D0
00001ED6  4E4F                    1343              TRAP    #15
00001ED8                          1344  
00001ED8  4C9F FFFF               1345              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EDC  4E75                    1346              RTS
00001EDE                          1347  
00001EDE  48A7 FFFF               1348  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EE2  43F9 0000225F           1349              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
00001EE8  103C 000E               1350              MOVE.B  #14, D0
00001EEC  4E4F                    1351              TRAP    #15
00001EEE                          1352  
00001EEE  4C9F FFFF               1353              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EF2  4E75                    1354              RTS
00001EF4                          1355  
00001EF4  48A7 FFFF               1356  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EF8  43F9 00002267           1357              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
00001EFE  103C 000E               1358              MOVE.B  #14, D0
00001F02  4E4F                    1359              TRAP    #15
00001F04                          1360  
00001F04  4C9F FFFF               1361              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F08  4E75                    1362              RTS
00001F0A                          1363  
00001F0A  48A7 FFFF               1364  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F0E  43F9 0000223F           1365              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
00001F14  103C 000E               1366              MOVE.B  #14, D0
00001F18  4E4F                    1367              TRAP    #15
00001F1A                          1368  
00001F1A  4C9F FFFF               1369              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F1E  4E75                    1370              RTS
00001F20                          1371  
00001F20  48A7 FFFF               1372  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F24  43F9 00002247           1373              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00001F2A  103C 000E               1374              MOVE.B  #14, D0
00001F2E  4E4F                    1375              TRAP    #15
00001F30                          1376  
00001F30  4C9F FFFF               1377              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F34  4E75                    1378              RTS
00001F36                          1379  
00001F36  48A7 FFFF               1380  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F3A  43F9 0000224F           1381              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
00001F40  103C 000E               1382              MOVE.B  #14, D0
00001F44  4E4F                    1383              TRAP    #15
00001F46                          1384  
00001F46  4C9F FFFF               1385              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F4A  4E75                    1386              RTS
00001F4C                          1387  
00001F4C  48A7 FFFF               1388  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F50  43F9 00002227           1389              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00001F56  103C 000E               1390              MOVE.B  #14, D0
00001F5A  4E4F                    1391              TRAP    #15
00001F5C                          1392  
00001F5C  4C9F FFFF               1393              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F60  4E75                    1394              RTS
00001F62                          1395  
00001F62  48A7 FFFF               1396  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F66  43F9 0000222F           1397              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001F6C  103C 000E               1398              MOVE.B  #14, D0
00001F70  4E4F                    1399              TRAP    #15
00001F72                          1400  
00001F72  4C9F FFFF               1401              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F76  4E75                    1402              RTS
00001F78                          1403  
00001F78  48A7 FFFF               1404  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F7C  43F9 00002237           1405              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
00001F82  103C 000E               1406              MOVE.B  #14, D0
00001F86  4E4F                    1407              TRAP    #15
00001F88                          1408  
00001F88  4C9F FFFF               1409              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F8C  4E75                    1410              RTS
00001F8E                          1411  
00001F8E  48A7 FFFF               1412  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F92  43F9 0000220C           1413              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00001F98  103C 000E               1414              MOVE.B  #14, D0
00001F9C  4E4F                    1415              TRAP    #15
00001F9E                          1416  
00001F9E  4C9F FFFF               1417              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FA2  4E75                    1418              RTS
00001FA4                          1419  
00001FA4  48A7 FFFF               1420  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FA8  43F9 00002215           1421              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00001FAE  103C 000E               1422              MOVE.B  #14, D0
00001FB2  4E4F                    1423              TRAP    #15
00001FB4                          1424  
00001FB4  4C9F FFFF               1425              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FB8  4E75                    1426              RTS
00001FBA                          1427  
00001FBA  48A7 FFFF               1428  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FBE  43F9 0000221E           1429              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
00001FC4  103C 000E               1430              MOVE.B  #14, D0
00001FC8  4E4F                    1431              TRAP    #15
00001FCA                          1432  
00001FCA  4C9F FFFF               1433              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FCE  4E75                    1434              RTS
00001FD0                          1435  
00001FD0  48A7 FFFF               1436  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FD4  43F9 00002281           1437              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00001FDA  103C 000E               1438              MOVE.B  #14, D0
00001FDE  4E4F                    1439              TRAP    #15
00001FE0                          1440  
00001FE0  4C9F FFFF               1441              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FE4  4E75                    1442              RTS
00001FE6                          1443  
00001FE6  48A7 FFFF               1444  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FEA  43F9 000021F4           1445              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00001FF0  103C 000E               1446              MOVE.B  #14, D0
00001FF4  4E4F                    1447              TRAP    #15
00001FF6                          1448  
00001FF6  4C9F FFFF               1449              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FFA  4E75                    1450              RTS
00001FFC                          1451  
00001FFC  48A7 FFFF               1452  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002000  43F9 000021FC           1453              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
00002006  103C 000E               1454              MOVE.B  #14, D0
0000200A  4E4F                    1455              TRAP    #15
0000200C                          1456  
0000200C  4C9F FFFF               1457              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002010  4E75                    1458              RTS
00002012                          1459  
00002012  48A7 FFFF               1460  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002016  43F9 00002204           1461              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
0000201C  103C 000E               1462              MOVE.B  #14, D0
00002020  4E4F                    1463              TRAP    #15
00002022                          1464  
00002022  4C9F FFFF               1465              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002026  4E75                    1466              RTS
00002028                          1467  
00002028  48A7 FFFF               1468  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000202C  43F9 000021C8           1469              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L
00002032  103C 000E               1470              MOVE.B  #14, D0
00002036  4E4F                    1471              TRAP    #15
00002038                          1472  
00002038  4C9F FFFF               1473              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000203C  4E75                    1474              RTS
0000203E                          1475  
0000203E  48A7 FFFF               1476  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002042  43F9 000021D2           1477              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W
00002048  103C 000E               1478              MOVE.B  #14, D0
0000204C  4E4F                    1479              TRAP    #15
0000204E                          1480  
0000204E  4C9F FFFF               1481              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002052  4E75                    1482              RTS
00002054                          1483  
00002054  48A7 FFFF               1484  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002058  43F9 000021EE           1485              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
0000205E  103C 000E               1486              MOVE.B  #14, D0
00002062  4E4F                    1487              TRAP    #15
00002064                          1488  
00002064  4C9F FFFF               1489              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002068  4E75                    1490              RTS                          ; Exit subroutine
0000206A                          1491  
0000206A  48A7 FFFF               1492  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000206E  43F9 000021DC           1493              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
00002074  103C 000E               1494              MOVE.B  #14, D0
00002078  4E4F                    1495              TRAP    #15
0000207A  4C9F FFFF               1496              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000207E  4E75                    1497              RTS                          ; Exit subroutine
00002080                          1498  
00002080  48A7 FFFF               1499  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002084  43F9 000021E8           1500              LEA MESSAGERTS, A1         *OPCODE is RTS
0000208A  103C 000E               1501              MOVE.B  #14, D0
0000208E  4E4F                    1502              TRAP    #15
00002090  4C9F FFFF               1503              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002094  4E75                    1504              RTS
00002096                          1505  
00002096  48A7 FFFF               1506  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000209A  43F9 000021E2           1507              LEA MESSAGECLR, A1         *OPCODE is CLR
000020A0  103C 000E               1508              MOVE.B  #14, D0
000020A4  4E4F                    1509              TRAP    #15
000020A6  4C9F FFFF               1510              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020AA  4E75                    1511              RTS
000020AC                          1512  
000020AC  48A7 FFFF               1513  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020B0  43F9 00002178           1514              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
000020B6  103C 000E               1515              MOVE.B  #14, D0
000020BA  4E4F                    1516              TRAP    #15
000020BC  4C9F FFFF               1517              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020C0  4E75                    1518              RTS                          ; Exit subroutine
000020C2                          1519  
000020C2  48A7 FFFF               1520  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020C6  43F9 0000217E           1521              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
000020CC  103C 000E               1522              MOVE.B  #14, D0
000020D0  4E4F                    1523              TRAP    #15
000020D2                          1524  
000020D2  4C9F FFFF               1525              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020D6  4E75                    1526              RTS                          ; Exit subroutine
000020D8                          1527  
000020D8  48A7 FFFF               1528  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020DC  43F9 000021BE           1529              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
000020E2  103C 000E               1530              MOVE.B  #14, D0
000020E6  4E4F                    1531              TRAP    #15
000020E8                          1532  
000020E8  4C9F FFFF               1533              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020EC  4E75                    1534              RTS                          ; Exit subroutine
000020EE                          1535  
000020EE  48A7 FFFF               1536  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020F2  43F9 00002187           1537              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
000020F8  103C 000E               1538              MOVE.B  #14, D0
000020FC  4E4F                    1539              TRAP    #15
000020FE                          1540  
000020FE  4C9F FFFF               1541              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002102  4E75                    1542              RTS                          ; Exit subroutine
00002104                          1543  
00002104  48A7 FFFF               1544  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002108  43F9 000021B4           1545              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
0000210E  103C 000E               1546              MOVE.B  #14, D0
00002112  4E4F                    1547              TRAP    #15
00002114                          1548  
00002114  4C9F FFFF               1549              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002118  4E75                    1550              RTS                          ; Exit subroutine
0000211A                          1551  
0000211A  48A7 FFFF               1552  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000211E  43F9 00002190           1553              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
00002124  103C 000E               1554              MOVE.B  #14, D0
00002128  4E4F                    1555              TRAP    #15
0000212A                          1556  
0000212A  4C9F FFFF               1557              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000212E  4E75                    1558              RTS                          ; Exit subroutine
00002130                          1559  
00002130  48A7 FFFF               1560  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002134  43F9 00002199           1561              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
0000213A  103C 000E               1562              MOVE.B  #14, D0
0000213E  4E4F                    1563              TRAP    #15
00002140                          1564  
00002140  4C9F FFFF               1565              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002144  4E75                    1566              RTS                          ; Exit subroutine
00002146                          1567  
00002146  48A7 FFFF               1568  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000214A  43F9 000021A2           1569              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
00002150  103C 000E               1570              MOVE.B  #14, D0
00002154  4E4F                    1571              TRAP    #15
00002156                          1572  
00002156  4C9F FFFF               1573              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000215A  4E75                    1574              RTS                          ; Exit subroutine
0000215C                          1575  
0000215C  48A7 FFFF               1576  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002160  43F9 000021AB           1577              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
00002166  103C 000E               1578              MOVE.B  #14, D0
0000216A  4E4F                    1579              TRAP    #15
0000216C                          1580  
0000216C  4C9F FFFF               1581              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002170  4E75                    1582              RTS                          ; Exit subroutine
00002172                          1583  
00002172  103C 0009               1584  DONE        MOVE.B      #9, D0
00002176  4E4F                    1585              TRAP        #15
00002178                          1586  
00002178  =0000000D               1587  CR  EQU     $0D
00002178  =0000000A               1588  LF  EQU     $0A
00002178= 4E 4F 50 0D 0A 00       1589  MESSAGENOP DC.B    'NOP',CR,LF, 0
0000217E                          1590  
0000217E= 4D 4F 56 45 2E 57 ...   1591  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0
00002187= 4D 4F 56 45 2E 4C ...   1592  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0
00002190= 4D 4F 56 45 2E 42 ...   1593  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0
00002199                          1594  
00002199= 41 44 44 49 2E 57 ...   1595  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0
000021A2= 41 44 44 49 2E 4C ...   1596  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0
000021AB= 41 44 44 49 2E 42 ...   1597  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0
000021B4                          1598  
000021B4= 4D 4F 56 45 41 2E ...   1599  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0
000021BE= 4D 4F 56 45 41 2E ...   1600  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0
000021C8                          1601  
000021C8= 4D 4F 56 45 4D 2E ...   1602  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0
000021D2= 4D 4F 56 45 4D 2E ...   1603  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0
000021DC                          1604  
000021DC= 4A 53 52 0D 0A 00       1605  MESSAGEJSR DC.B    'JSR',CR,LF, 0
000021E2                          1606  
000021E2= 43 4C 52 0D 0A 00       1607  MESSAGECLR DC.B    'CLR',CR,LF, 0
000021E8                          1608  
000021E8= 52 54 53 0D 0A 00       1609  MESSAGERTS DC.B    'RTS',CR,LF, 0
000021EE                          1610  
000021EE= 4C 45 41 0D 0A 00       1611  MESSAGELEA DC.B    'LEA',CR,LF, 0
000021F4                          1612  
000021F4= 43 4C 52 2E 42 0D ...   1613  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0
000021FC= 43 4C 52 2E 57 0D ...   1614  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00002204= 43 4C 52 2E 4C 0D ...   1615  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
0000220C                          1616  
0000220C= 41 44 44 51 2E 42 ...   1617  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0
00002215= 41 44 44 51 2E 57 ...   1618  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
0000221E= 41 44 44 51 2E 4C ...   1619  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
00002227                          1620  
00002227= 43 4D 50 2E 42 0D ...   1621  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0
0000222F= 43 4D 50 2E 57 0D ...   1622  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
00002237= 43 4D 50 2E 4C 0D ...   1623  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
0000223F                          1624  
0000223F= 53 55 42 2E 42 0D ...   1625  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0
00002247= 53 55 42 2E 57 0D ...   1626  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
0000224F= 53 55 42 2E 4C 0D ...   1627  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
00002257                          1628  
00002257= 41 44 44 2E 42 0D ...   1629  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0
0000225F= 41 44 44 2E 57 0D ...   1630  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
00002267= 41 44 44 2E 4C 0D ...   1631  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
0000226F                          1632  
0000226F= 41 44 44 41 2E 57 ...   1633  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
00002278= 41 44 44 41 2E 4C ...   1634  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
00002281                          1635  
00002281= 4D 4F 56 45 51 2E ...   1636  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
0000228B                          1637  
0000228B= 41 4E 44 2E 42 0D ...   1638  MESSAGEANDB DC.B    'AND.B',CR,LF, 0
00002293= 41 4E 44 2E 57 0D ...   1639  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
0000229B= 41 4E 44 2E 4C 0D ...   1640  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
000022A3                          1641  
000022A3= 4D 55 4C 53 2E 57 ...   1642  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
000022AC= 4D 55 4C 53 2E 4C ...   1643  MESSAGEMULSL DC.B    'MULS.L',CR,LF, 0
000022B5                          1644  
000022B5= 41 53 52 2E 42 0D ...   1645  MESSAGEASRB DC.B    'ASR.B',CR,LF, 0
000022BD= 41 53 52 2E 57 0D ...   1646  MESSAGEASRW DC.B    'ASR.W',CR,LF, 0
000022C5= 41 53 52 2E 4C 0D ...   1647  MESSAGEASRL DC.B    'ASR.L',CR,LF, 0
000022CD                          1648  
000022CD= 41 53 4C 2E 42 0D ...   1649  MESSAGEASLB DC.B    'ASL.B',CR,LF, 0
000022D5= 41 53 4C 2E 57 0D ...   1650  MESSAGEASLW DC.B    'ASL.W',CR,LF, 0
000022DD= 41 53 4C 2E 4C 0D ...   1651  MESSAGEASLL DC.B    'ASL.L',CR,LF, 0
000022E5                          1652  
000022E5= 52 4F 52 2E 42 0D ...   1653  MESSAGERORB DC.B    'ROR.B',CR,LF, 0
000022ED= 52 4F 52 2E 57 0D ...   1654  MESSAGERORW DC.B    'ROR.W',CR,LF, 0
000022F5= 52 4F 52 2E 4C 0D ...   1655  MESSAGERORL DC.B    'ROR.L',CR,LF, 0
000022FD                          1656  
000022FD= 52 4F 4C 2E 42 0D ...   1657  MESSAGEROLB DC.B    'ROL.B',CR,LF, 0
00002305= 52 4F 4C 2E 57 0D ...   1658  MESSAGEROLW DC.B    'ROL.W',CR,LF, 0
0000230D= 52 4F 4C 2E 4C 0D ...   1659  MESSAGEROLL DC.B    'ROL.L',CR,LF, 0
00002315                          1660  
00002315= 4C 53 52 2E 42 0D ...   1661  MESSAGELSRB DC.B    'LSR.B',CR,LF, 0
0000231D= 4C 53 52 2E 57 0D ...   1662  MESSAGELSRW DC.B    'LSR.W',CR,LF, 0
00002325= 4C 53 52 2E 4C 0D ...   1663  MESSAGELSRL DC.B    'LSR.L',CR,LF, 0
0000232D                          1664  
0000232D= 4C 53 4C 2E 42 0D ...   1665  MESSAGELSLB DC.B    'LSL.B',CR,LF, 0
00002335= 4C 53 4C 2E 57 0D ...   1666  MESSAGELSLW DC.B    'LSL.W',CR,LF, 0
0000233D= 4C 53 4C 2E 4C 0D ...   1667  MESSAGELSLL DC.B    'LSL.L',CR,LF, 0
00002345                          1668  
00002345= 4F 52 2E 42 0D 0A 00    1669  MESSAGEORB DC.B    'OR.B',CR,LF, 0
0000234C= 4F 52 2E 57 0D 0A 00    1670  MESSAGEORW DC.B    'OR.W',CR,LF, 0
00002353= 4F 52 2E 4C 0D 0A 00    1671  MESSAGEORL DC.B    'OR.L',CR,LF, 0
0000235A                          1672  
0000235A= 44 49 56 55 2E 57 ...   1673  MESSAGEDIVUW DC.B    'DIVU.W',CR,LF, 0
00002363= 44 49 56 55 2E 4C ...   1674  MESSAGEDIVUL DC.B    'DIVU.L',CR,LF, 0
0000236C                          1675  
0000236C= 42 43 43 0D 0A 00       1676  MESSAGEBCC DC.B    'BCC',CR,LF, 0
00002372= 42 47 54 0D 0A 00       1677  MESSAGEBGT DC.B    'BGT',CR,LF, 0
00002378= 42 4C 45 0D 0A 00       1678  MESSAGEBLE DC.B    'BLE',CR,LF, 0
0000237E                          1679  
0000237E  FFFF FFFF               1680      SIMHALT             ; halt simulator
00002382                          1681  
00002382                          1682  * Put variables and constants here
00002382                          1683  
00002382                          1684      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          164C
ADDCODE001          1654
ADDCODE010          165C
ADDCODE011          1664
ADDCODE100          166C
ADDCODE101          1674
ADDCODE110          167C
ADDCODE111          1684
ADDIBCODE00         1A66
ADDILCODE10         1A7E
ADDIWCODE01         1A72
ADDI_BORADDI_WORADDI_L  1A30
ADDQCODE00          17A4
ADDQCODE01          17AC
ADDQCODE10          17B4
ADDQ_BORADDQ_WORADDQ_L  1768
ADD_BORADD_WORADD_L  15F2
ANDCODE000          15B6
ANDCODE001          15BE
ANDCODE010          15C6
ANDCODE011          15CE
ANDCODE100          15D2
ANDCODE101          15DA
ANDCODE110          15E2
ANDCODE111          15EA
AND_BORAND_WORAND_LORMULS_W  155C
ASLCODE00           12D6
ASLCODE01           12DE
ASLCODE10           12E6
ASL_ASR             14C2
ASL_ASRCODE0        14F8
ASL_ASRCODE1        14FE
ASRCODE00           1282
ASRCODE01           128A
ASRCODE10           1292
BCCORBGTORBLE       111C
BCCORBGTORBLECODE00  115E
BCCORBGTORBLECODE01  1166
BCCORBGTORBLECODE10  116A
BCCORBGTORBLECODE11  1172
CLRCODE00           17F8
CLRCODE01           1800
CLRCODE10           1808
CMPCODE000          1750
CMPCODE001          1758
CMPCODE010          1760
CMP_BORCMP_WORCMP_L  1714
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10C0
CODE1000            10CC
CODE1001            10D8
CODE1010            10E4
CODE1011            10E8
CODE1100            10F4
CODE1101            1100
CODE1110            110C
CODE1111            1118
CR                  D
DONE                2172
EXAMPLE             EE02
ISADDAL             1EB2
ISADDAW             1E9C
ISADDB              1EC8
ISADDIB             215C
ISADDIL             2146
ISADDIW             2130
ISADDL              1EF4
ISADDQB             1F8E
ISADDQL             1FBA
ISADDQW             1FA4
ISADDW              1EDE
ISANDB              1E5A
ISANDL              1E86
ISANDW              1E70
ISASLB              1CE4
ISASLL              1D10
ISASLW              1CFA
ISASRB              1CA2
ISASRL              1CCE
ISASRW              1CB8
ISBCC               1BF2
ISBGT               1C08
ISBLE               1C1E
ISCLR               2096
ISCLRB              1FE6
ISCLRL              2012
ISCLRW              1FFC
ISCMPB              1F4C
ISCMPL              1F78
ISCMPW              1F62
ISDIVUL             1C34
ISDIVUW             1C4A
ISJSR               206A
ISLEA               2054
ISLSLB              1D68
ISLSLL              1D94
ISLSLW              1D7E
ISLSRB              1D26
ISLSRL              1D52
ISLSRW              1D3C
ISMOVEAL            2104
ISMOVEAW            20D8
ISMOVEB             211A
ISMOVEL             20EE
ISMOVEML            2028
ISMOVEMW            203E
ISMOVEQL            1FD0
ISMOVEW             20C2
ISMULSL             1E2E
ISMULSW             1E44
ISNOP               20AC
ISORB               1C60
ISORL               1C8C
ISORW               1C76
ISROLB              1DEC
ISROLL              1E18
ISROLW              1E02
ISRORB              1DAA
ISRORL              1DD6
ISRORW              1DC0
ISRTS               2080
ISSUBB              1F0A
ISSUBL              1F36
ISSUBW              1F20
JSRORCLRCODE0000    18B8
JSRORCLRCODE0001    18BC
JSRORCLRCODE0010    18C0
JSRORCLRCODE0011    18C6
JSRORCLRCODE0100    18CA
JSRORCLRCODE0101    18CE
JSRORCLRCODE0110    18D2
JSRORCLRCODE0111    18D6
JSRORCLRCODE1000    18DA
JSRORCLRCODE1001    18DE
JSRORCLRCODE1010    18E2
JSRORCLRCODE1011    18E6
JSRORCLRCODE1100    18EA
JSRORCLRCODE1101    18EE
JSRORCLRCODE1110    18F2
JSRORCLRCODE1111    18FA
LF                  A
LOTSCODE0000        19C8
LOTSCODE0001        19D2
LOTSCODE0010        19D6
LOTSCODE0011        19E0
LOTSCODE0100        19E4
LOTSCODE0101        19E8
LOTSCODE0110        19EC
LOTSCODE0111        19F8
LOTSCODE1000        19FC
LOTSCODE1001        1A06
LOTSCODE1010        1A0A
LOTSCODE1011        1A14
LOTSCODE1100        1A18
LOTSCODE1101        1A1C
LOTSCODE1110        1A20
LOTSCODE1111        1A2C
LSLCODE00           137E
LSLCODE01           1386
LSLCODE10           138E
LSL_LSR             1480
LSL_LSRCODE0        14B6
LSL_LSRCODE1        14BC
LSRCODE00           132A
LSRCODE01           1332
LSRCODE10           133A
MESSAGEADDAL        2278
MESSAGEADDAW        226F
MESSAGEADDB         2257
MESSAGEADDIB        21AB
MESSAGEADDIL        21A2
MESSAGEADDIW        2199
MESSAGEADDL         2267
MESSAGEADDQB        220C
MESSAGEADDQL        221E
MESSAGEADDQW        2215
MESSAGEADDW         225F
MESSAGEANDB         228B
MESSAGEANDL         229B
MESSAGEANDW         2293
MESSAGEASLB         22CD
MESSAGEASLL         22DD
MESSAGEASLW         22D5
MESSAGEASRB         22B5
MESSAGEASRL         22C5
MESSAGEASRW         22BD
MESSAGEBCC          236C
MESSAGEBGT          2372
MESSAGEBLE          2378
MESSAGECLR          21E2
MESSAGECLRB         21F4
MESSAGECLRL         2204
MESSAGECLRW         21FC
MESSAGECMPB         2227
MESSAGECMPL         2237
MESSAGECMPW         222F
MESSAGEDIVUL        2363
MESSAGEDIVUW        235A
MESSAGEJSR          21DC
MESSAGELEA          21EE
MESSAGELSLB         232D
MESSAGELSLL         233D
MESSAGELSLW         2335
MESSAGELSRB         2315
MESSAGELSRL         2325
MESSAGELSRW         231D
MESSAGEMOVEAL       21B4
MESSAGEMOVEAW       21BE
MESSAGEMOVEB        2190
MESSAGEMOVEL        2187
MESSAGEMOVEML       21C8
MESSAGEMOVEMW       21D2
MESSAGEMOVEQL       2281
MESSAGEMOVEW        217E
MESSAGEMULSL        22AC
MESSAGEMULSW        22A3
MESSAGENOP          2178
MESSAGEORB          2345
MESSAGEORL          2353
MESSAGEORW          234C
MESSAGEROLB         22FD
MESSAGEROLL         230D
MESSAGEROLW         2305
MESSAGERORB         22E5
MESSAGERORL         22F5
MESSAGERORW         22ED
MESSAGERTS          21E8
MESSAGESUBB         223F
MESSAGESUBL         224F
MESSAGESUBW         2247
MOVEACODE001        1AEA
MOVEAWCODE001       1B9E
MOVEA_LORMOVE_L     1A8A
MOVEA_WORMOVE_W     1B3E
MOVECODE000         1ADE
MOVECODE010         1AF6
MOVECODE011         1B02
MOVECODE100         1B0E
MOVECODE101         1B1A
MOVECODE110         1B26
MOVECODE111         1B32
MOVEMCODE0          1934
MOVEMCODE1          193C
MOVEWCODE000        1B92
MOVEWCODE010        1BAA
MOVEWCODE011        1BB6
MOVEWCODE100        1BC2
MOVEWCODE101        1BCE
MOVEWCODE110        1BDA
MOVEWCODE111        1BE6
MULSLORDIVUL        117A
MULSLORDIVULCODE0   11AA
MULSLORDIVULCODE1   11B2
NOPCOMMAND          18B0
NOPORCLRORRTSORJSR  1810
NOP_MOVEM_LEA_JSR_CLR_RTS  1944
OR_BOROR_WOROR_LORDIVU  11BA
OR_DIVUCODE000      120E
OR_DIVUCODE001      1216
OR_DIVUCODE010      121E
OR_DIVUCODE011      1226
OR_DIVUCODE100      122E
OR_DIVUCODE101      1236
OR_DIVUCODE110      123E
ROD_LSD_ASD         1504
ROD_LSD_ASDCODE00   1546
ROD_LSD_ASDCODE01   154C
ROD_LSD_ASDCODE10   1552
ROD_LSD_ASDCODE11   1556
ROLCODE00           13D2
ROLCODE01           13DA
ROLCODE10           13E2
ROL_ROR             143E
ROL_RORCODE0        1474
ROL_RORCODE1        147A
RORCODE00           1426
RORCODE01           142E
RORCODE10           1436
RTSCOMMAND          18A8
SHIFT               C
SOMEASL             129A
SOMEASR             1246
SOMECLR             17BC
SOMELSL             1342
SOMELSR             12EE
SOMEMOVEM           18FE
SOMEROL             1396
SOMEROR             13EA
STACK               7000
START               1000
SUBCODE000          16E0
SUBCODE001          16E8
SUBCODE010          16F0
SUBCODE011          16F8
SUBCODE100          16FC
SUBCODE101          1704
SUBCODE110          170C
SUB_BORSUB_WORSUB_L  168C
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1A54
TABLEADDQ_BORADDQ_WORADDQ_L  1792
TABLEADD_BORADD_WORADD_L  161C
TABLEAND_BORAND_WORAND_LORMULS_W  1586
TABLEASL_ASR        14EC
TABLEBCCORBGTORBLE  1146
TABLECMP_BORCMP_WORCMP_L  173E
TABLELSL_LSR        14AA
TABLEMOVEA_LORMOVE_L  1AAE
TABLEMOVEA_WORMOVE_W  1B62
TABLEMULSLORDIVUL   119E
TABLENOPORCLRORRTSORJSR  1848
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  196E
TABLEOR_BOROR_WOROR_LORDIVU  11E4
TABLEROD_LSD_ASD    152E
TABLEROL_ROR        1468
TABLESOMEASL        12C4
TABLESOMEASR        1270
TABLESOMECLR        17E6
TABLESOMELSL        136C
TABLESOMELSR        1318
TABLESOMEMOVEM      1928
TABLESOMEROL        13C0
TABLESOMEROR        1414
TABLESUB_BORSUB_WORSUB_L  16B6
