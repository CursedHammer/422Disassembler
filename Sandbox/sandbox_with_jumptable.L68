00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/29/2016 3:16:11 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000                            57  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000                            60  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            61  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            62  
00001000                            63  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            64  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            65  
00001000                            66  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            67  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            68  
00001000                            69  *example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            70  
00001000                            71  *example EQU     %0100110000000011 ; MULS.L D3, D4 = 01001 1 0000 000 011
00001000                            72  
00001000                            73  *example EQU     %0100100010010100 ; MOVEM.W (A4), (D16A6) = 0100 1000 10 010 100
00001000                            74  *example EQU     %0100110010101110 ; MOVEM.W (D16A6), (A4) = 0100 1100 10 101 110
00001000                            75  
00001000                            76  *example EQU     %0100100011010100 ; MOVEM.L (A4), (D16A6) = 0100 1000 11 010 100
00001000                            77  *example EQU     %0100110011101110 ; MOVEM.L (D16A6), (A4) = 0100 1100 11 101 110
00001000                            78  
00001000                            79  *example EQU     %1110111100011010  ; ROL.B  D1,D2 = 1110 111 1 00 0 11 010 where D1 = 0x111 or 7
00001000                            80  *example EQU     %1110111101011010  ; ROL.W  D1,D2 = 1110 111 1 01 0 11 010 where D1 = 0x111 or 7
00001000                            81  *example EQU     %1110111110011010  ; ROL.L  D1,D2 = 1110 111 1 10 0 11 010 where D1 = 0x111 or 7
00001000                            82  
00001000                            83  *example EQU     %1110111000011010  ; ROR.B  D1,D2 = 1110 111 0 00 0 11 010 where D1 = 0x111 or 7
00001000                            84  *example EQU     %1110111001011010  ; ROR.W  D1,D2 = 1110 111 0 01 0 11 010 where D1 = 0x111 or 7
00001000                            85  *example EQU     %1110111010011010  ; ROR.L  D1,D2 = 1110 111 0 10 0 11 010 where D1 = 0x111 or 7
00001000                            86  
00001000                            87  *example EQU     %1110111100001010  ; LSL.B  D1,D2 = 1110 111 1 00 0 01 010 where D1 = 0x111 or 7
00001000                            88  *example EQU     %1110111101001010  ; LSL.W  D1,D2 = 1110 111 1 01 0 01 010 where D1 = 0x111 or 7
00001000                            89  *example EQU     %1110111110001010  ; LSL.L  D1,D2 = 1110 111 1 10 0 01 010 where D1 = 0x111 or 7
00001000                            90  
00001000                            91  *example EQU     %1110111000001010  ; LSR.B  D1,D2 = 1110 111 0 00 0 01 010 where D1 = 0x111 or 7
00001000                            92  *example EQU     %1110111001001010  ; LSR.W  D1,D2 = 1110 111 0 01 0 01 010 where D1 = 0x111 or 7
00001000                            93  *example EQU     %1110111010001010  ; LSR.L  D1,D2 = 1110 111 0 10 0 01 010 where D1 = 0x111 or 7
00001000                            94  
00001000                            95  *example EQU     %1110111100000010  ; ASL.B  D1,D2 = 1110 111 1 00 0 00 010 where D1 = 0x111 or 7
00001000                            96  *example EQU     %1110111101000010  ; ASL.W  D1,D2 = 1110 111 1 01 0 00 010 where D1 = 0x111 or 7
00001000                            97  *example EQU     %1110111110000010  ; ASL.L  D1,D2 = 1110 111 1 10 0 00 010 where D1 = 0x111 or 7
00001000                            98  
00001000                            99  *example EQU     %1110111000000010  ; ASR.B  D1,D2 = 1110 111 0 00 0 00 010 where D1 = 0x111 or 7
00001000                           100  *example EQU     %1110111001000010  ; ASR.W  D1,D2 = 1110 111 0 01 0 00 010 where D1 = 0x111 or 7
00001000                           101  *example EQU     %1110111010000010  ; ASR.L  D1,D2 = 1110 111 0 10 0 00 010 where D1 = 0x111 or 7
00001000                           102  
00001000                           103  *example EQU     %1000100011000011 ; DIVU.W D3,D4 = 1000 100 011 000 011
00001000                           104  *example EQU     %0100110001000011 ; DIVU.L D3,D4 = 0100 110001 000 011
00001000                           105  
00001000                           106  *example EQU     %1000100000000011 ; OR.B D3,D4 = 1000 100 000 000 011
00001000                           107  *example EQU     %1000100100000011 ; OR.B D3,D4 = 1000 100 100 000 011
00001000                           108  *example EQU     %1000100001000011 ; OR.W D3,D4 = 1000 100 001 000 011
00001000                           109  *example EQU     %1000100101000011 ; OR.W D3,D4 = 1000 100 101 000 011
00001000                           110  *example EQU     %1000100010000011 ; OR.L D3,D4 = 1000 100 010 000 011
00001000                           111  *example EQU     %1000100110000011 ; OR.L D3,D4 = 1000 100 110 000 011
00001000                           112  
00001000                           113  *example EQU     %0110010000000000 ; BCC = 0110 0100 0000 0000
00001000                           114  *example EQU     %0110111000000000 ; BGT = 0110 1110 0000 0000
00001000  =00006F00                115  example EQU     %0110111100000000  ; BLE = 0110 1111 0000 0000
00001000                           116  
00001000                           117  *example EQU     %1010111100000000  ; INVALID
00001000                           118  
00001000  =0000000C                119  shift   EQU     12                 ; Shift 12 bits
00001000                           120  
00001000                           121  * Program starts here
00001000                           122  
00001000  4FF8 7000                123          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E            124          LEA     table,A0            ; Index into the table
0000100A  4280                     125          CLR.L   D0                  ; Zero it
0000100C  303C 6F00                126          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                127          MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001014  E268                     128          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                           129                                      ; and the rest are zeroed out)
00001016  C0FC 0006                130          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EF0 0000                131          JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000101E                           132  
0000101E  4EF9 0000107E            133  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084            134          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090            135          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096            136          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C            137          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS or MULS.W
0000103C  4EF9 000010A8            138          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4            139          JMP     code0110        ; BCC or BGT or BLE
00001048  4EF9 000010C0            140          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010CC            141          JMP     code1000        ; OR.B or OR.W or OR.L or DIVU.W
00001054  4EF9 000010D8            142          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010E4            143          JMP     code1010
00001060  4EF9 000010EC            144          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010F8            145          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 00001104            146          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 00001110            147          JMP     code1110        ; ROd_LSd_ASd
00001078  4EF9 0000111C            148          JMP     code1111
0000107E                           149  
0000107E                           150  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           151  
0000107E  4EB9 00001AA8            152  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 000021A8            153  code0001 JSR   ISMOVEB
0000108A  4EB9 00002200            154           JSR   DONE
00001090  4EB9 00001B02            155  code0010 JSR   MOVEA_LorMOVE_L
00001096  4EB9 00001BB6            156  code0011 JSR  MOVEA_WorMOVE_W
0000109C  4EB9 00001994            157  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 00002200            158           JSR    DONE
000010A8  4EB9 00001780            159  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 00002200            160           JSR    DONE
000010B4  4EB9 00001124            161  code0110 JSR    BCCorBGTorBLE
000010BA  4EB9 00002200            162           JSR    DONE
000010C0  4EB9 0000205E            163  code0111 JSR    ISMOVEQL
000010C6  4EB9 00002200            164           JSR    DONE
000010CC  4EB9 000011C6            165  code1000 JSR    OR_BorOR_WorOR_LorDIVU
000010D2  4EB9 00002200            166           JSR    DONE
000010D8  4EB9 000016A0            167  code1001 JSR    SUB_BorSUB_WorSUB_L
000010DE  4EB9 00002200            168           JSR    DONE
000010E4  4EB9 00001C6A            169  code1010 JSR    OPCODE_INVALID              ;INVALID
000010EA  4E75                     170           RTS   
000010EC  4EB9 0000172C            171  code1011 JSR    CMP_BorCMP_WorCMP_L
000010F2  4EB9 00002200            172           JSR DONE
000010F8  4EB9 0000156C            173  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010FE  4EB9 00002200            174           JSR    DONE
00001104  4EB9 00001606            175  code1101 JSR    ADD_BorADD_WorADD_L
0000110A  4EB9 00002200            176           JSR    DONE
00001110  4EB9 00001510            177  code1110 JSR    ROd_LSd_ASd
00001116  4EB9 00002200            178           JSR    DONE
0000111C  4EB9 00001C6A            179  code1111 JSR    OPCODE_INVALID              ;INVALID
00001122  4E75                     180           RTS 
00001124                           181  
00001124                           182  *****************************  BCCorBGTorBLE ************************************
00001124  4FF8 7000                183  BCCorBGTorBLE       LEA     STACK,SP            ; Load the SP
00001128  41F9 0000114E            184                      LEA     tableBCCorBGTorBLE, A0            ; Index into the table
0000112E  4280                     185                      CLR.L   D0                  ; Zero it
00001130  303C 6F00                186                      MOVE.W  #example,D0         ; We'll play with it here
00001134  123C 0006                187                      MOVE.B  #6,D1           ; Shift 6 bits left
00001138  E360                     188                      ASL.W   D1,D0
0000113A  123C 000C                189                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000113E  E268                     190                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001140                           191                                      ; and the rest are zeroed out)
00001140  123C 0002                192                      MOVE.B  #2,D1           ; Shift 2 bits right
00001144  E260                     193                      ASR.W   D1,D0
00001146                           194  
00001146  C0FC 0006                195                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000114A  4EF0 0000                196                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000114E                           197  
0000114E  4EF9 00001166            198  tableBCCorBGTorBLE   JMP    BCCorBGTorBLEcode00   ; BCC
00001154  4EF9 0000116E            199                       JMP    BCCorBGTorBLEcode01   ;
0000115A  4EF9 00001176            200                       JMP    BCCorBGTorBLEcode10   ; BGT
00001160  4EF9 0000117E            201                       JMP    BCCorBGTorBLEcode11   ; BLE
00001166                           202  
00001166                           203  
00001166                           204  
00001166  4EB9 00001C80            205  BCCorBGTorBLEcode00    JSR     ISBCC
0000116C  4E75                     206                         RTS
0000116E  4EB9 00001C6A            207  BCCorBGTorBLEcode01    JSR    OPCODE_INVALID              ;INVALID
00001174  4E75                     208                         RTS 
00001176  4EB9 00001C96            209  BCCorBGTorBLEcode10    JSR     ISBGT
0000117C  4E75                     210                         RTS
0000117E  4EB9 00001CAC            211  BCCorBGTorBLEcode11    JSR     ISBLE
00001184  4E75                     212                         RTS
00001186                           213  
00001186                           214  ***************************** END  BCCorBGTorBLE ************************************
00001186                           215  
00001186                           216  *****************************  MULSLorDIVUL ************************************
00001186  4FF8 7000                217  MULSLorDIVUL        LEA     STACK,SP            ; Load the SP
0000118A  41F9 000011AA            218                      LEA     tableMULSLorDIVUL, A0            ; Index into the table
00001190  4280                     219                      CLR.L   D0                  ; Zero it
00001192  303C 6F00                220                      MOVE.W  #example,D0         ; We'll play with it here
00001196  123C 0006                221                      MOVE.B  #6,D1           ; Shift 6 bits left
0000119A  E360                     222                      ASL.W   D1,D0
0000119C  123C 000C                223                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000011A0  E268                     224                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011A2                           225  
000011A2  C0FC 0006                226                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011A6  4EF0 0000                227                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000011AA                           228  
000011AA  4EF9 000011B6            229  tableMULSLorDIVUL             JMP    MULSLorDIVULcode0   ;  MULS.L
000011B0  4EF9 000011BE            230                                JMP    MULSLorDIVULcode1   ;  DIVU.L
000011B6                           231  
000011B6  4EB9 00001EBC            232  MULSLorDIVULcode0   JSR     ISMULSL
000011BC  4E75                     233                      RTS
000011BE  4EB9 00001CC2            234  MULSLorDIVULcode1   JSR     ISDIVUL
000011C4  4E75                     235                      RTS
000011C6                           236  ***************************** END  MULSLorDIVUL ************************************
000011C6                           237  
000011C6                           238  *****************************  OR_BorOR_WorOR_LorDIVU ************************************
000011C6  4FF8 7000                239  OR_BorOR_WorOR_LorDIVU     LEA     STACK,SP            ; Load the SP
000011CA  41F9 000011F0            240                      LEA     tableOR_BorOR_WorOR_LorDIVU, A0            ; Index into the table
000011D0  4280                     241                      CLR.L   D0                  ; Zero it
000011D2  303C 6F00                242                      MOVE.W  #example,D0         ; We'll play with it here
000011D6  123C 0007                243                      MOVE.B  #7,D1           ; Shift 7 bits left
000011DA  E360                     244                      ASL.W   D1,D0
000011DC  123C 000C                245                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000011E0  E268                     246                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011E2                           247                                      ; and the rest are zeroed out)
000011E2  123C 0001                248                      MOVE.B  #1,D1           ; Shift 1 bits right
000011E6  E260                     249                      ASR.W   D1,D0
000011E8                           250  
000011E8  C0FC 0006                251                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011EC  4EF0 0000                252                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000011F0                           253  
000011F0  4EF9 0000121A            254  tableOR_BorOR_WorOR_LorDIVU             JMP    OR_DIVUcode000   ; OR.B
000011F6  4EF9 00001222            255                                          JMP    OR_DIVUcode001   ; OR.W
000011FC  4EF9 0000122A            256                                          JMP    OR_DIVUcode010   ; OR.L
00001202                           257  
00001202  4EF9 00001232            258                                          JMP    OR_DIVUcode011   ; DIVU.W
00001208  4EF9 0000123A            259                                          JMP    OR_DIVUcode100   ; OR.B
0000120E  4EF9 00001242            260                                          JMP    OR_DIVUcode101   ; OR.W
00001214  4EF9 0000124A            261                                          JMP    OR_DIVUcode110   ; OR.L
0000121A                           262                                          ;JMP    OR_DIVUcode111    ; NEED TO ADD THIS IN WITH A STOP !!!!
0000121A                           263  
0000121A                           264  
0000121A  4EB9 00001CEE            265  OR_DIVUcode000      JSR     ISORB
00001220  4E75                     266                      RTS
00001222  4EB9 00001D04            267  OR_DIVUcode001      JSR     ISORW
00001228  4E75                     268                      RTS
0000122A  4EB9 00001D1A            269  OR_DIVUcode010      JSR     ISORL
00001230  4E75                     270                      RTS
00001232  4EB9 00001CD8            271  OR_DIVUcode011      JSR     ISDIVUW
00001238  4E75                     272                      RTS
0000123A  4EB9 00001CEE            273  OR_DIVUcode100      JSR     ISORB
00001240  4E75                     274                      RTS
00001242  4EB9 00001D04            275  OR_DIVUcode101      JSR     ISORW
00001248  4E75                     276                      RTS
0000124A  4EB9 00001D1A            277  OR_DIVUcode110      JSR     ISORL
00001250  4E75                     278                      RTS
00001252                           279  
00001252                           280  
00001252                           281  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001252                           282  
00001252                           283  *****************************someASR ************************************
00001252  4FF8 7000                284  someASR    LEA     STACK,SP            ; Load the SP
00001256  41F9 0000127C            285                      LEA     tableSomeASR, A0            ; Index into the table
0000125C  4280                     286                      CLR.L   D0                  ; Zero it
0000125E  303C 6F00                287                      MOVE.W  #example,D0         ; We'll play with it here
00001262  123C 0008                288                      MOVE.B  #8,D1           ; Shift 8 bits left
00001266  E360                     289                      ASL.W   D1,D0
00001268  123C 000C                290                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000126C  E268                     291                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000126E                           292                                      ; and the rest are zeroed out)
0000126E  123C 0002                293                      MOVE.B  #2,D1           ; Shift 2 bits right
00001272  E260                     294                      ASR.W   D1,D0
00001274                           295  
00001274  C0FC 0006                296                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001278  4EF0 0000                297                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000127C                           298  
0000127C  4EF9 0000128E            299  tableSomeASR        JMP     ASRcode00   *ASR.B
00001282  4EF9 00001296            300                      JMP     ASRcode01   *ASR.W
00001288  4EF9 0000129E            301                      JMP     ASRcode10   *ASR.L
0000128E                           302  
0000128E  4EB9 00001D30            303  ASRcode00   JSR     ISASRB
00001294  4E75                     304              RTS
00001296  4EB9 00001D46            305  ASRcode01   JSR     ISASRW
0000129C  4E75                     306              RTS
0000129E  4EB9 00001D5C            307  ASRcode10   JSR     ISASRL
000012A4  4E75                     308              RTS
000012A6                           309  
000012A6                           310  *****************************END someLSL ************************************
000012A6                           311  
000012A6                           312  
000012A6                           313  *****************************someASL ************************************
000012A6  4FF8 7000                314  someASL    LEA     STACK,SP            ; Load the SP
000012AA  41F9 000012D0            315                      LEA     tableSomeASL, A0            ; Index into the table
000012B0  4280                     316                      CLR.L   D0                  ; Zero it
000012B2  303C 6F00                317                      MOVE.W  #example,D0         ; We'll play with it here
000012B6  123C 0008                318                      MOVE.B  #8,D1           ; Shift 8 bits left
000012BA  E360                     319                      ASL.W   D1,D0
000012BC  123C 000C                320                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000012C0  E268                     321                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012C2                           322                                      ; and the rest are zeroed out)
000012C2  123C 0002                323                      MOVE.B  #2,D1           ; Shift 2 bits right
000012C6  E260                     324                      ASR.W   D1,D0
000012C8                           325  
000012C8  C0FC 0006                326                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012CC  4EF0 0000                327                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000012D0                           328  
000012D0  4EF9 000012E2            329  tableSomeASL        JMP     ASLcode00   *ASL.B
000012D6  4EF9 000012EA            330                      JMP     ASLcode01   *ASL.W
000012DC  4EF9 000012F2            331                      JMP     ASLcode10   *ASL.L
000012E2                           332  
000012E2  4EB9 00001D72            333  ASLcode00   JSR     ISASLB
000012E8  4E75                     334              RTS
000012EA  4EB9 00001D88            335  ASLcode01   JSR     ISASLW
000012F0  4E75                     336              RTS
000012F2  4EB9 00001D9E            337  ASLcode10   JSR     ISASLL
000012F8  4E75                     338              RTS
000012FA                           339  
000012FA                           340  *****************************END someLSL ************************************
000012FA                           341  
000012FA                           342  
000012FA                           343  *****************************someLSR ************************************
000012FA  4FF8 7000                344  someLSR    LEA     STACK,SP            ; Load the SP
000012FE  41F9 00001324            345                      LEA     tableSomeLSR, A0            ; Index into the table
00001304  4280                     346                      CLR.L   D0                  ; Zero it
00001306  303C 6F00                347                      MOVE.W  #example,D0         ; We'll play with it here
0000130A  123C 0008                348                      MOVE.B  #8,D1           ; Shift 8 bits left
0000130E  E360                     349                      ASL.W   D1,D0
00001310  123C 000C                350                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001314  E268                     351                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001316                           352                                      ; and the rest are zeroed out)
00001316  123C 0002                353                      MOVE.B  #2,D1           ; Shift 2 bits right
0000131A  E260                     354                      ASR.W   D1,D0
0000131C                           355  
0000131C  C0FC 0006                356                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001320  4EF0 0000                357                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001324                           358  
00001324  4EF9 00001336            359  tableSomeLSR        JMP     LSRcode00   *LSR.B
0000132A  4EF9 0000133E            360                      JMP     LSRcode01   *LSR.W
00001330  4EF9 00001346            361                      JMP     LSRcode10   *LSR.L
00001336                           362  
00001336  4EB9 00001DB4            363  LSRcode00   JSR     ISLSRB
0000133C  4E75                     364              RTS
0000133E  4EB9 00001DCA            365  LSRcode01   JSR     ISLSRW
00001344  4E75                     366              RTS
00001346  4EB9 00001DE0            367  LSRcode10   JSR     ISLSRL
0000134C  4E75                     368              RTS
0000134E                           369  
0000134E                           370  *****************************END someLSR ************************************
0000134E                           371  
0000134E                           372  
0000134E                           373  *****************************someLSL ************************************
0000134E  4FF8 7000                374  someLSL    LEA     STACK,SP            ; Load the SP
00001352  41F9 00001378            375                      LEA     tableSomeLSL, A0            ; Index into the table
00001358  4280                     376                      CLR.L   D0                  ; Zero it
0000135A  303C 6F00                377                      MOVE.W  #example,D0         ; We'll play with it here
0000135E  123C 0008                378                      MOVE.B  #8,D1           ; Shift 8 bits left
00001362  E360                     379                      ASL.W   D1,D0
00001364  123C 000C                380                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001368  E268                     381                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000136A                           382                                      ; and the rest are zeroed out)
0000136A  123C 0002                383                      MOVE.B  #2,D1           ; Shift 2 bits right
0000136E  E260                     384                      ASR.W   D1,D0
00001370                           385  
00001370  C0FC 0006                386                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001374  4EF0 0000                387                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001378                           388  
00001378  4EF9 0000138A            389  tableSomeLSL        JMP     LSLcode00   *LSL.B
0000137E  4EF9 00001392            390                      JMP     LSLcode01   *LSL.W
00001384  4EF9 0000139A            391                      JMP     LSLcode10   *LSL.L
0000138A                           392  
0000138A  4EB9 00001DF6            393  LSLcode00   JSR     ISLSLB
00001390  4E75                     394              RTS
00001392  4EB9 00001E0C            395  LSLcode01   JSR     ISLSLW
00001398  4E75                     396              RTS
0000139A  4EB9 00001E22            397  LSLcode10   JSR     ISLSLL
000013A0  4E75                     398              RTS
000013A2                           399  
000013A2                           400  *****************************END someLSL ************************************
000013A2                           401  
000013A2                           402  
000013A2                           403  *****************************someROL ************************************
000013A2  4FF8 7000                404  someROL    LEA     STACK,SP            ; Load the SP
000013A6  41F9 000013CC            405                      LEA     tableSomeROL, A0            ; Index into the table
000013AC  4280                     406                      CLR.L   D0                  ; Zero it
000013AE  303C 6F00                407                      MOVE.W  #example,D0         ; We'll play with it here
000013B2  123C 0008                408                      MOVE.B  #8,D1           ; Shift 8 bits left
000013B6  E360                     409                      ASL.W   D1,D0
000013B8  123C 000C                410                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000013BC  E268                     411                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013BE                           412                                      ; and the rest are zeroed out)
000013BE  123C 0002                413                      MOVE.B  #2,D1           ; Shift 2 bits right
000013C2  E260                     414                      ASR.W   D1,D0
000013C4                           415  
000013C4  C0FC 0006                416                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013C8  4EF0 0000                417                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000013CC                           418  
000013CC  4EF9 000013DE            419  tableSomeROL        JMP     ROLcode00   *ROL.B
000013D2  4EF9 000013E6            420                      JMP     ROLcode01   *ROL.W
000013D8  4EF9 000013EE            421                      JMP     ROLcode10   *ROL.L
000013DE                           422  
000013DE  4EB9 00001E7A            423  ROLcode00   JSR     ISROLB
000013E4  4E75                     424              RTS
000013E6  4EB9 00001E90            425  ROLcode01   JSR     ISROLW
000013EC  4E75                     426              RTS
000013EE  4EB9 00001EA6            427  ROLcode10   JSR     ISROLL
000013F4  4E75                     428              RTS
000013F6                           429  
000013F6                           430  *****************************END someROR ************************************
000013F6                           431  
000013F6                           432  
000013F6                           433  *****************************someROR ************************************
000013F6  4FF8 7000                434  someROR     LEA     STACK,SP            ; Load the SP
000013FA  41F9 00001420            435                      LEA     tableSomeROR, A0            ; Index into the table
00001400  4280                     436                      CLR.L   D0                  ; Zero it
00001402  303C 6F00                437                      MOVE.W  #example,D0         ; We'll play with it here
00001406  123C 0008                438                      MOVE.B  #8,D1           ; Shift 8 bits left
0000140A  E360                     439                      ASL.W   D1,D0
0000140C  123C 000C                440                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001410  E268                     441                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001412                           442                                      ; and the rest are zeroed out)
00001412  123C 0002                443                      MOVE.B  #2,D1           ; Shift 2 bits right
00001416  E260                     444                      ASR.W   D1,D0
00001418                           445  
00001418  C0FC 0006                446                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000141C  4EF0 0000                447                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001420                           448  
00001420  4EF9 00001432            449  tableSomeROR        JMP     RORcode00   *ROR.B
00001426  4EF9 0000143A            450                      JMP     RORcode01   *ROR.W
0000142C  4EF9 00001442            451                      JMP     RORcode10   *ROR.L
00001432                           452  
00001432  4EB9 00001E38            453  RORcode00   JSR     ISRORB
00001438  4E75                     454              RTS
0000143A  4EB9 00001E4E            455  RORcode01   JSR     ISRORW
00001440  4E75                     456              RTS
00001442  4EB9 00001E64            457  RORcode10   JSR     ISRORL
00001448  4E75                     458              RTS
0000144A                           459  
0000144A                           460  *****************************END someROR ************************************
0000144A                           461  
0000144A                           462  
0000144A                           463  *****************************  ROL_ROR ************************************
0000144A  4FF8 7000                464  ROL_ROR     LEA     STACK,SP            ; Load the SP
0000144E  41F9 00001474            465                      LEA     tableROL_ROR, A0            ; Index into the table
00001454  4280                     466                      CLR.L   D0                  ; Zero it
00001456  303C 6F00                467                      MOVE.W  #example,D0         ; We'll play with it here
0000145A  123C 0007                468                      MOVE.B  #7,D1           ; Shift 7 bits left
0000145E  E360                     469                      ASL.W   D1,D0
00001460  123C 000C                470                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001464  E268                     471                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001466                           472                                      ; and the rest are zeroed out)
00001466  123C 0003                473                      MOVE.B  #3,D1           ; Shift 3 bits right
0000146A  E260                     474                      ASR.W   D1,D0
0000146C                           475  
0000146C  C0FC 0006                476                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001470  4EF0 0000                477                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001474                           478  
00001474  4EF9 00001480            479  tableROL_ROR            JMP    ROL_RORcode0   ; ROR
0000147A  4EF9 00001486            480                          JMP    ROL_RORcode1   ; ROL
00001480                           481  
00001480                           482  
00001480                           483  
00001480                           484  
00001480  4EB8 13F6                485  ROL_RORcode0   JSR     someROR
00001484  4E75                     486                 RTS
00001486  4EB8 13A2                487  ROL_RORcode1   JSR     someROL
0000148A  4E75                     488                 RTS
0000148C                           489  
0000148C                           490  
0000148C                           491  ***************************** END ROL_ROR ************************************
0000148C                           492  
0000148C                           493  
0000148C                           494  *****************************  LSL_LSR ************************************
0000148C  4FF8 7000                495  LSL_LSR     LEA     STACK,SP            ; Load the SP
00001490  41F9 000014B6            496                      LEA     tableLSL_LSR, A0            ; Index into the table
00001496  4280                     497                      CLR.L   D0                  ; Zero it
00001498  303C 6F00                498                      MOVE.W  #example,D0         ; We'll play with it here
0000149C  123C 0007                499                      MOVE.B  #7,D1           ; Shift 7 bits left
000014A0  E360                     500                      ASL.W   D1,D0
000014A2  123C 000C                501                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000014A6  E268                     502                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014A8                           503                                      ; and the rest are zeroed out)
000014A8  123C 0003                504                      MOVE.B  #3,D1           ; Shift 3 bits right
000014AC  E260                     505                      ASR.W   D1,D0
000014AE                           506  
000014AE  C0FC 0006                507                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014B2  4EF0 0000                508                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000014B6                           509  
000014B6  4EF9 000014C2            510  tableLSL_LSR            JMP    LSL_LSRcode0   ; LSR
000014BC  4EF9 000014C8            511                          JMP    LSL_LSRcode1   ; LSL
000014C2                           512  
000014C2                           513  
000014C2                           514  
000014C2                           515  
000014C2  4EB8 12FA                516  LSL_LSRcode0   JSR     someLSR
000014C6  4E75                     517                 RTS
000014C8  4EB8 134E                518  LSL_LSRcode1   JSR     someLSL
000014CC  4E75                     519                 RTS
000014CE                           520  
000014CE                           521  
000014CE                           522  ***************************** END LSL_LSR ************************************
000014CE                           523  
000014CE                           524  
000014CE                           525  *****************************  ASL_ASR ************************************
000014CE  4FF8 7000                526  ASL_ASR     LEA     STACK,SP            ; Load the SP
000014D2  41F9 000014F8            527                      LEA     tableASL_ASR, A0            ; Index into the table
000014D8  4280                     528                      CLR.L   D0                  ; Zero it
000014DA  303C 6F00                529                      MOVE.W  #example,D0         ; We'll play with it here
000014DE  123C 0007                530                      MOVE.B  #7,D1           ; Shift 7 bits left
000014E2  E360                     531                      ASL.W   D1,D0
000014E4  123C 000C                532                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000014E8  E268                     533                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014EA                           534                                      ; and the rest are zeroed out)
000014EA  123C 0003                535                      MOVE.B  #3,D1           ; Shift 3 bits right
000014EE  E260                     536                      ASR.W   D1,D0
000014F0                           537  
000014F0  C0FC 0006                538                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014F4  4EF0 0000                539                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000014F8                           540  
000014F8  4EF9 00001504            541  tableASL_ASR            JMP    ASL_ASRcode0   ; ASR
000014FE  4EF9 0000150A            542                          JMP    ASL_ASRcode1   ; ASL
00001504                           543  
00001504                           544  
00001504                           545  
00001504                           546  
00001504  4EB8 1252                547  ASL_ASRcode0   JSR     someASR
00001508  4E75                     548                 RTS
0000150A  4EB8 12A6                549  ASL_ASRcode1   JSR     someASL
0000150E  4E75                     550                 RTS
00001510                           551  
00001510                           552  
00001510                           553  ***************************** END ASL_ASR ************************************
00001510                           554  
00001510                           555  
00001510                           556  *****************************  ROd_LSd_ASd ************************************
00001510  4FF8 7000                557  ROd_LSd_ASd     LEA     STACK,SP            ; Load the SP
00001514  41F9 0000153A            558                      LEA     tableROd_LSd_ASd, A0            ; Index into the table
0000151A  4280                     559                      CLR.L   D0                  ; Zero it
0000151C  303C 6F00                560                      MOVE.W  #example,D0         ; We'll play with it here
00001520  123C 000B                561                      MOVE.B  #11,D1           ; Shift 11 bits left
00001524  E360                     562                      ASL.W   D1,D0
00001526  123C 000C                563                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000152A  E268                     564                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000152C                           565                                      ; and the rest are zeroed out)
0000152C  123C 0002                566                      MOVE.B  #2,D1           ; Shift 2 bits right
00001530  E260                     567                      ASR.W   D1,D0
00001532                           568  
00001532  C0FC 0006                569                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001536  4EF0 0000                570                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
0000153A                           571  
0000153A  4EF9 00001552            572  tableROd_LSd_ASd        JMP    ROd_LSd_ASdcode00   ; ASL_ASR
00001540  4EF9 00001558            573                          JMP    ROd_LSd_ASdcode01   ; LSL_LSR
00001546  4EF9 0000155E            574                          JMP    ROd_LSd_ASdcode10
0000154C  4EF9 00001566            575                          JMP    ROd_LSd_ASdcode11   ; ROL_ROR
00001552                           576  
00001552                           577  
00001552                           578  
00001552  4EB8 14CE                579  ROd_LSd_ASdcode00   JSR     ASL_ASR
00001556  4E75                     580                      RTS
00001558  4EB8 148C                581  ROd_LSd_ASdcode01   JSR     LSL_LSR
0000155C  4E75                     582                      RTS
0000155E  4EB9 00001C6A            583  ROd_LSd_ASdcode10   JSR    OPCODE_INVALID              ;INVALID
00001564  4E75                     584                      RTS 
00001566  4EB8 144A                585  ROd_LSd_ASdcode11   JSR     ROL_ROR
0000156A  4E75                     586                      RTS
0000156C                           587  
0000156C                           588  ***************************** END  ROd_LSd_ASd ************************************
0000156C                           589  
0000156C                           590  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
0000156C  4FF8 7000                591  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
00001570  41F9 00001596            592                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
00001576  4280                     593                      CLR.L   D0                  ; Zero it
00001578  303C 6F00                594                      MOVE.W  #example,D0         ; We'll play with it here
0000157C  123C 0007                595                      MOVE.B  #7,D1           ; Shift 7 bits left
00001580  E360                     596                      ASL.W   D1,D0
00001582  123C 000C                597                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001586  E268                     598                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001588                           599                                      ; and the rest are zeroed out)
00001588  123C 0001                600                      MOVE.B  #1,D1           ; Shift 1 bits right
0000158C  E260                     601                      ASR.W   D1,D0
0000158E                           602  
0000158E  C0FC 0006                603                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001592  4EF0 0000                604                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001596                           605  
00001596  4EF9 000015C6            606  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
0000159C  4EF9 000015CE            607                                          JMP    ANDcode001   ; AND.W
000015A2  4EF9 000015D6            608                                          JMP    ANDcode010   ; AND.L
000015A8                           609  
000015A8  4EF9 000015DE            610                                          JMP    ANDcode011
000015AE  4EF9 000015E6            611                                          JMP    ANDcode100   ; AND.B
000015B4  4EF9 000015EE            612                                          JMP    ANDcode101   ; AND.W
000015BA  4EF9 000015F6            613                                          JMP    ANDcode110   ; AND.L
000015C0  4EF9 000015FE            614                                          JMP    ANDcode111   ; MULS.W
000015C6                           615  
000015C6                           616  
000015C6  4EB9 00001EE8            617  ANDcode000   JSR     ISANDB
000015CC  4E75                     618               RTS
000015CE  4EB9 00001EFE            619  ANDcode001   JSR     ISANDW
000015D4  4E75                     620               RTS
000015D6  4EB9 00001F14            621  ANDcode010   JSR     ISANDL
000015DC  4E75                     622               RTS
000015DE  4EB9 00001C6A            623  ANDcode011   JSR    OPCODE_INVALID              ;INVALID
000015E4  4E75                     624               RTS 
000015E6  4EB9 00001EE8            625  ANDcode100   JSR     ISANDB
000015EC  4E75                     626               RTS
000015EE  4EB9 00001EFE            627  ANDcode101   JSR     ISANDW
000015F4  4E75                     628               RTS
000015F6  4EB9 00001F14            629  ANDcode110   JSR     ISANDL
000015FC  4E75                     630               RTS
000015FE  4EB9 00001ED2            631  ANDcode111   JSR     ISMULSW
00001604  4E75                     632               RTS
00001606                           633  
00001606                           634  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001606                           635  
00001606                           636  *****************************  ADD_BorADD_WorADD_L ************************************
00001606  4FF8 7000                637  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
0000160A  41F9 00001630            638                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
00001610  4280                     639                      CLR.L   D0                  ; Zero it
00001612  303C 6F00                640                      MOVE.W  #example,D0         ; We'll play with it here
00001616  123C 0007                641                      MOVE.B  #7,D1           ; Shift 7 bits left
0000161A  E360                     642                      ASL.W   D1,D0
0000161C  123C 000C                643                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001620  E268                     644                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001622                           645                                      ; and the rest are zeroed out)
00001622  123C 0001                646                      MOVE.B  #1,D1           ; Shift 1 bits right
00001626  E260                     647                      ASR.W   D1,D0
00001628                           648  
00001628  C0FC 0006                649                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000162C  4EF0 0000                650                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001630                           651  
00001630  4EF9 00001660            652  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
00001636  4EF9 00001668            653                                   JMP    ADDcode001   *ADD.W
0000163C  4EF9 00001670            654                                   JMP    ADDcode010   *ADD.L
00001642                           655  
00001642  4EF9 00001678            656                                   JMP    ADDcode011   *ADDA.W
00001648  4EF9 00001680            657                                   JMP    ADDcode100   *ADD.B
0000164E  4EF9 00001688            658                                   JMP    ADDcode101   *ADD.W
00001654  4EF9 00001690            659                                   JMP    ADDcode110   *ADD.L
0000165A  4EF9 00001698            660                                   JMP    ADDcode111   *ADDA.L
00001660                           661  
00001660                           662  
00001660  4EB9 00001F56            663  ADDcode000   JSR     ISADDB
00001666  4E75                     664               RTS
00001668  4EB9 00001F6C            665  ADDcode001   JSR     ISADDW
0000166E  4E75                     666               RTS
00001670  4EB9 00001F82            667  ADDcode010   JSR     ISADDL
00001676  4E75                     668               RTS
00001678  4EB9 00001F2A            669  ADDcode011   JSR     ISADDAW
0000167E  4E75                     670               RTS
00001680  4EB9 00001F56            671  ADDcode100   JSR     ISADDB
00001686  4E75                     672               RTS
00001688  4EB9 00001F6C            673  ADDcode101   JSR     ISADDW
0000168E  4E75                     674               RTS
00001690  4EB9 00001F82            675  ADDcode110   JSR     ISADDL
00001696  4E75                     676               RTS
00001698  4EB9 00001F40            677  ADDcode111   JSR     ISADDAL
0000169E  4E75                     678               RTS
000016A0                           679  
000016A0                           680  ***************************** END  ADD_BorADD_WorADD_L ************************************
000016A0                           681  
000016A0                           682  *****************************  SUB_BorSUB_WorSUB_L ************************************
000016A0  4FF8 7000                683  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
000016A4  41F9 000016CA            684                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
000016AA  4280                     685                      CLR.L   D0                  ; Zero it
000016AC  303C 6F00                686                      MOVE.W  #example,D0         ; We'll play with it here
000016B0  123C 0007                687                      MOVE.B  #7,D1           ; Shift 7 bits left
000016B4  E360                     688                      ASL.W   D1,D0
000016B6  123C 000C                689                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000016BA  E268                     690                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000016BC                           691                                      ; and the rest are zeroed out)
000016BC  123C 0001                692                      MOVE.B  #1,D1           ; Shift 1 bits right
000016C0  E260                     693                      ASR.W   D1,D0
000016C2                           694  
000016C2  C0FC 0006                695                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016C6  4EF0 0000                696                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000016CA                           697  
000016CA  4EF9 000016F4            698  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
000016D0  4EF9 000016FC            699                                   JMP    SUBcode001   *SUB.W
000016D6  4EF9 00001704            700                                   JMP    SUBcode010   *SUB.L
000016DC                           701  
000016DC  4EF9 0000170C            702                                   JMP    SUBcode011
000016E2  4EF9 00001714            703                                   JMP    SUBcode100   *SUB.B
000016E8  4EF9 0000171C            704                                   JMP    SUBcode101   *SUB.W
000016EE  4EF9 00001724            705                                   JMP    SUBcode110   *SUB.L
000016F4                           706  
000016F4                           707  
000016F4                           708  
000016F4  4EB9 00001F98            709  SUBcode000   JSR     ISSUBB
000016FA  4E75                     710               RTS
000016FC  4EB9 00001FAE            711  SUBcode001   JSR     ISSUBW
00001702  4E75                     712               RTS
00001704  4EB9 00001FC4            713  SUBcode010   JSR     ISSUBL
0000170A  4E75                     714               RTS
0000170C  4EB9 00001C6A            715  SUBcode011   JSR    OPCODE_INVALID              ;INVALID
00001712  4E75                     716               RTS 
00001714  4EB9 00001F98            717  SUBcode100   JSR     ISSUBB
0000171A  4E75                     718               RTS
0000171C  4EB9 00001FAE            719  SUBcode101   JSR     ISSUBW
00001722  4E75                     720               RTS
00001724  4EB9 00001FC4            721  SUBcode110   JSR     ISSUBL
0000172A  4E75                     722               RTS
0000172C                           723  
0000172C                           724  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
0000172C                           725  
0000172C                           726  
0000172C                           727  ***************************** CMP_BorCMP_WorCMP_L ************************************
0000172C  4FF8 7000                728  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
00001730  41F9 00001756            729                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
00001736  4280                     730                      CLR.L   D0                  ; Zero it
00001738  303C 6F00                731                      MOVE.W  #example,D0         ; We'll play with it here
0000173C  123C 0007                732                      MOVE.B  #7,D1           ; Shift 7 bits left
00001740  E360                     733                      ASL.W   D1,D0
00001742  123C 000C                734                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001746  E268                     735                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001748                           736                                      ; and the rest are zeroed out)
00001748  123C 0001                737                      MOVE.B  #1,D1           ; Shift 1 bits right
0000174C  E260                     738                      ASR.W   D1,D0
0000174E                           739  
0000174E  C0FC 0006                740                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001752  4EF0 0000                741                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001756                           742  
00001756  4EF9 00001768            743  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
0000175C  4EF9 00001770            744                                   JMP    CMPcode001   *CMP.W
00001762  4EF9 00001778            745                                   JMP    CMPcode010   *CMP.L
00001768                           746  
00001768  4EB9 00001FDA            747  CMPcode000   JSR     ISCMPB
0000176E  4E75                     748              RTS
00001770  4EB9 00001FF0            749  CMPcode001   JSR     ISCMPW
00001776  4E75                     750              RTS
00001778  4EB9 00002006            751  CMPcode010   JSR     ISCMPL
0000177E  4E75                     752              RTS
00001780                           753  
00001780                           754  ***************************** END CMP_BorCMP_WorCMP_L ************************************
00001780                           755  
00001780                           756  
00001780                           757  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
00001780  4FF8 7000                758  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
00001784  41F9 000017AA            759                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
0000178A  4280                     760                      CLR.L   D0                  ; Zero it
0000178C  303C 6F00                761                      MOVE.W  #example,D0         ; We'll play with it here
00001790  123C 0008                762                      MOVE.B  #8,D1           ; Shift 8 bits left
00001794  E360                     763                      ASL.W   D1,D0
00001796  123C 000C                764                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
0000179A  E268                     765                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000179C                           766                                      ; and the rest are zeroed out)
0000179C  123C 0002                767                      MOVE.B  #2,D1           ; Shift 2 bits right
000017A0  E260                     768                      ASR.W   D1,D0
000017A2                           769  
000017A2  C0FC 0006                770                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000017A6  4EF0 0000                771                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000017AA                           772  
000017AA  4EF9 000017BC            773  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
000017B0  4EF9 000017C4            774                                      JMP     ADDQcode01   *ADDQ.W
000017B6  4EF9 000017CC            775                                      JMP     ADDQcode10   *ADDQ.L
000017BC                           776  
000017BC  4EB9 0000201C            777  ADDQcode00   JSR     ISADDQB
000017C2  4E75                     778              RTS
000017C4  4EB9 00002032            779  ADDQcode01   JSR     ISADDQW
000017CA  4E75                     780              RTS
000017CC  4EB9 00002048            781  ADDQcode10   JSR     ISADDQL
000017D2  4E75                     782              RTS
000017D4                           783  
000017D4                           784  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
000017D4                           785  
000017D4                           786  
000017D4                           787  *****************************someCLR ************************************
000017D4  4FF8 7000                788  someCLR     LEA     STACK,SP            ; Load the SP
000017D8  41F9 000017FE            789                      LEA     tableSomeCLR, A0            ; Index into the table
000017DE  4280                     790                      CLR.L   D0                  ; Zero it
000017E0  303C 6F00                791                      MOVE.W  #example,D0         ; We'll play with it here
000017E4  123C 0008                792                      MOVE.B  #8,D1           ; Shift 8 bits left
000017E8  E360                     793                      ASL.W   D1,D0
000017EA  123C 000C                794                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000017EE  E268                     795                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000017F0                           796                                      ; and the rest are zeroed out)
000017F0  123C 0002                797                      MOVE.B  #2,D1           ; Shift 2 bits right
000017F4  E260                     798                      ASR.W   D1,D0
000017F6                           799  
000017F6  C0FC 0006                800                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000017FA  4EF0 0000                801                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000017FE                           802  
000017FE  4EF9 00001810            803  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001804  4EF9 00001818            804                      JMP     CLRcode01   *CLR.W
0000180A  4EF9 00001820            805                      JMP     CLRcode10   *CLR.L
00001810                           806  
00001810  4EB9 00002074            807  CLRcode00   JSR     ISCLRB
00001816  4E75                     808              RTS
00001818  4EB9 0000208A            809  CLRcode01   JSR     ISCLRW
0000181E  4E75                     810              RTS
00001820  4EB9 000020A0            811  CLRcode10   JSR     ISCLRL
00001826  4E75                     812              RTS
00001828                           813  
00001828                           814  *****************************END someCLR ************************************
00001828                           815  
00001828                           816  *****************************NOPorCLRorRTSorJSR ************************************
00001828  4FF8 7000                817  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
0000182C  41F9 00001860            818                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
00001832  4280                     819                      CLR.L   D0                  ; Zero it
00001834  303C 6F00                820                      MOVE.W  #example,D0         ; We'll play with it here
00001838                           821  
00001838  323C 4E71                822                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
0000183C  B240                     823                      CMP.W   D0, D1
0000183E  6700 0088                824                      BEQ     NOPcommand
00001842                           825  
00001842  323C 4E75                826                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
00001846  B240                     827                      CMP.W   D0, D1
00001848  6700 0076                828                      BEQ     RTScommand
0000184C                           829  
0000184C  123C 0004                830                      MOVE.B  #4,D1           ; Shift 4 bits left
00001850  E360                     831                      ASL.W   D1,D0
00001852  123C 000C                832                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001856  E268                     833                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001858                           834                                      ; and the rest are zeroed out)
00001858                           835  
00001858                           836  
00001858  C0FC 0006                837                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000185C  4EF0 0000                838                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001860                           839  
00001860  4EF9 000018D0            840  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
00001866  4EF9 000018D8            841                             JMP     JSRorCLRcode0001
0000186C  4EF9 000018E0            842                             JMP     JSRorCLRcode0010
00001872  4EF9 000018E6            843                             JMP     JSRorCLRcode0011
00001878  4EF9 000018EE            844                             JMP     JSRorCLRcode0100
0000187E  4EF9 000018F6            845                             JMP     JSRorCLRcode0101
00001884  4EF9 000018FE            846                             JMP     JSRorCLRcode0110
0000188A  4EF9 00001906            847                             JMP     JSRorCLRcode0111
00001890  4EF9 0000190E            848                             JMP     JSRorCLRcode1000
00001896  4EF9 00001916            849                             JMP     JSRorCLRcode1001
0000189C  4EF9 0000191E            850                             JMP     JSRorCLRcode1010
000018A2  4EF9 00001926            851                             JMP     JSRorCLRcode1011
000018A8  4EF9 0000192E            852                             JMP     JSRorCLRcode1100
000018AE  4EF9 00001936            853                             JMP     JSRorCLRcode1101
000018B4  4EF9 0000193E            854                             JMP     JSRorCLRcode1110
000018BA  4EF9 00001946            855                             JMP     JSRorCLRcode1111
000018C0                           856  
000018C0  4EB9 0000210E            857  RTScommand          JSR     ISRTS
000018C6  4E75                     858                      RTS
000018C8  4EB9 0000213A            859  NOPcommand          JSR     ISNOP
000018CE  4E75                     860                      RTS
000018D0  4EB9 00001C6A            861  JSRorCLRcode0000     JSR    OPCODE_INVALID              ;INVALID
000018D6  4E75                     862                      RTS 
000018D8  4EB9 00001C6A            863  JSRorCLRcode0001     JSR    OPCODE_INVALID              ;INVALID
000018DE  4E75                     864                      RTS 
000018E0  4EB8 17D4                865  JSRorCLRcode0010    JSR      someCLR
000018E4  4E75                     866                      RTS
000018E6  4EB9 00001C6A            867  JSRorCLRcode0011     JSR    OPCODE_INVALID              ;INVALID
000018EC  4E75                     868                      RTS 
000018EE  4EB9 00001C6A            869  JSRorCLRcode0100     JSR    OPCODE_INVALID              ;INVALID
000018F4  4E75                     870                      RTS 
000018F6  4EB9 00001C6A            871  JSRorCLRcode0101     JSR    OPCODE_INVALID              ;INVALID
000018FC  4E75                     872                      RTS 
000018FE  4EB9 00001C6A            873  JSRorCLRcode0110     JSR    OPCODE_INVALID              ;INVALID
00001904  4E75                     874                      RTS 
00001906  4EB9 00001C6A            875  JSRorCLRcode0111     JSR    OPCODE_INVALID              ;INVALID
0000190C  4E75                     876                      RTS 
0000190E  4EB9 00001C6A            877  JSRorCLRcode1000     JSR    OPCODE_INVALID              ;INVALID
00001914  4E75                     878                      RTS 
00001916  4EB9 00001C6A            879  JSRorCLRcode1001     JSR    OPCODE_INVALID              ;INVALID
0000191C  4E75                     880                      RTS 
0000191E  4EB9 00001C6A            881  JSRorCLRcode1010     JSR    OPCODE_INVALID              ;INVALID
00001924  4E75                     882                      RTS 
00001926  4EB9 00001C6A            883  JSRorCLRcode1011     JSR    OPCODE_INVALID              ;INVALID
0000192C  4E75                     884                      RTS 
0000192E  4EB9 00001C6A            885  JSRorCLRcode1100     JSR    OPCODE_INVALID              ;INVALID
00001934  4E75                     886                      RTS 
00001936  4EB9 00001C6A            887  JSRorCLRcode1101     JSR    OPCODE_INVALID              ;INVALID
0000193C  4E75                     888                      RTS 
0000193E  4EB9 000020F8            889  JSRorCLRcode1110    JSR     ISJSR
00001944  4E75                     890                      RTS
00001946  4EB9 00001C6A            891  JSRorCLRcode1111     JSR    OPCODE_INVALID              ;INVALID
0000194C  4E75                     892                      RTS 
0000194E                           893  
0000194E                           894  *****************************END NOPorCLRorRTSorJSR ************************************
0000194E                           895  
0000194E                           896  
0000194E                           897  *****************************someMOVEM ************************************
0000194E  4FF8 7000                898  someMOVEM     LEA     STACK,SP            ; Load the SP
00001952  41F9 00001978            899                      LEA     tableSomeMOVEM, A0            ; Index into the table
00001958  4280                     900                      CLR.L   D0                  ; Zero it
0000195A  303C 6F00                901                      MOVE.W  #example,D0         ; We'll play with it here
0000195E  123C 0009                902                      MOVE.B  #9,D1           ; Shift 9 bits left
00001962  E360                     903                      ASL.W   D1,D0
00001964  123C 000C                904                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
00001968  E268                     905                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000196A                           906                                      ; and the rest are zeroed out)
0000196A  123C 0003                907                      MOVE.B  #3,D1           ; Shift 3 bits right
0000196E  E260                     908                      ASR.W   D1,D0
00001970                           909  
00001970  C0FC 0006                910                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001974  4EF0 0000                911                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001978                           912  
00001978  4EF9 00001984            913  tableSomeMOVEM    JMP     MOVEMcode0   ;MOVEM.W
0000197E  4EF9 0000198C            914                    JMP     MOVEMcode1   ;MOVEM.L
00001984                           915  
00001984                           916  
00001984                           917  
00001984  4EB9 000020CC            918  MOVEMcode0         JSR     ISMOVEMW
0000198A  4E75                     919                      RTS
0000198C  4EB9 000020B6            920  MOVEMcode1         JSR     ISMOVEML
00001992  4E75                     921                      RTS
00001994                           922  
00001994                           923  *****************************END someMOVEM ************************************
00001994                           924  
00001994                           925  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001994  4FF8 7000                926  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
00001998  41F9 000019BE            927                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
0000199E  4280                     928                      CLR.L   D0                  ; Zero it
000019A0  303C 6F00                929                      MOVE.W  #example,D0         ; We'll play with it here
000019A4  123C 0007                930                      MOVE.B  #7,D1           ; Shift 7 bits right
000019A8  E260                     931                      ASR.W   D1,D0
000019AA                           932  
000019AA  123C 000D                933                      MOVE.B  #13,D1           ; Shift 13 bits left
000019AE  E360                     934                      ASL.W   D1,D0
000019B0  123C 000C                935                      MOVE.B  #shift,D1           ; Shift 12 bits to the right
000019B4  E268                     936                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000019B6                           937                                      ; and the rest are zeroed out)
000019B6                           938  
000019B6                           939  
000019B6  C0FC 0006                940                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000019BA  4EF0 0000                941                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
000019BE                           942  
000019BE  4EF9 00001A18            943  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
000019C4  4EF9 00001A22            944                                    JMP     LOTScode0001
000019CA  4EF9 00001A2A            945                                    JMP     LOTScode0010
000019D0  4EF9 00001A34            946                                    JMP     LOTScode0011
000019D6  4EF9 00001A3C            947                                    JMP     LOTScode0100
000019DC  4EF9 00001A44            948                                    JMP     LOTScode0101
000019E2  4EF9 00001A4C            949                                    JMP     LOTScode0110
000019E8  4EF9 00001A58            950                                    JMP     LOTScode0111
000019EE  4EF9 00001A60            951                                    JMP     LOTScode1000
000019F4  4EF9 00001A6A            952                                    JMP     LOTScode1001
000019FA  4EF9 00001A72            953                                    JMP     LOTScode1010
00001A00  4EF9 00001A7C            954                                    JMP     LOTScode1011
00001A06  4EF9 00001A84            955                                    JMP     LOTScode1100
00001A0C  4EF9 00001A8C            956                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001A12  4EF9 00001AA0            957                                    JMP     LOTScode1111
00001A18                           958  
00001A18                           959  
00001A18                           960  
00001A18  4EB8 1186                961  LOTScode0000        JSR   MULSLorDIVUL
00001A1C  4EB9 00002200            962                      JSR    DONE
00001A22  4EB9 00001C6A            963  LOTScode0001        JSR    OPCODE_INVALID              ;INVALID
00001A28  4E75                     964                      RTS 
00001A2A  4EB8 194E                965  LOTScode0010        JSR    someMOVEM
00001A2E  4EB9 00002200            966                      JSR    DONE
00001A34  4EB9 00001C6A            967  LOTScode0011        JSR    OPCODE_INVALID              ;INVALID
00001A3A  4E75                     968                      RTS 
00001A3C  4EB9 00001C6A            969  LOTScode0100        JSR    OPCODE_INVALID              ;INVALID
00001A42  4E75                     970                      RTS 
00001A44  4EB9 00001C6A            971  LOTScode0101        JSR    OPCODE_INVALID              ;INVALID
00001A4A  4E75                     972                      RTS 
00001A4C  4EB9 000020E2            973  LOTScode0110        JSR    ISLEA
00001A52  4EB9 00002200            974                      JSR    DONE
00001A58  4EB9 00001C6A            975  LOTScode0111        JSR    OPCODE_INVALID              ;INVALID
00001A5E  4E75                     976                      RTS 
00001A60  4EB8 1828                977  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001A64  4EB9 00002200            978                      JSR    DONE
00001A6A  4EB9 00001C6A            979  LOTScode1001        JSR    OPCODE_INVALID              ;INVALID
00001A70  4E75                     980                      RTS 
00001A72  4EB8 1828                981  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001A76  4EB9 00002200            982                      JSR    DONE
00001A7C  4EB9 00001C6A            983  LOTScode1011        JSR    OPCODE_INVALID              ;INVALID
00001A82  4E75                     984                      RTS 
00001A84  4EB9 00001C6A            985  LOTScode1100        JSR    OPCODE_INVALID              ;INVALID
00001A8A  4E75                     986                      RTS 
00001A8C  4EB9 00001C6A            987  LOTScode1101        JSR    OPCODE_INVALID              ;INVALID
00001A92  4E75                     988                      RTS 
00001A94  4EB9 000020E2            989  LOTScode1110        JSR    ISLEA
00001A9A  4EB9 00002200            990                      JSR    DONE
00001AA0  4EB9 00001C6A            991  LOTScode1111        JSR    OPCODE_INVALID              ;INVALID
00001AA6  4E75                     992                      RTS 
00001AA8                           993  
00001AA8                           994  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001AA8                           995  
00001AA8                           996  
00001AA8                           997  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001AA8  4FF8 7000                998  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001AAC  41F9 00001ACC            999                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001AB2  4280                    1000                      CLR.L   D0                  ; Zero it
00001AB4  303C 6F00               1001                      MOVE.W  #example,D0         ; We'll play with it here
00001AB8  123C 0007               1002                      MOVE.B  #7,D1           ; Shift 7 bits left
00001ABC  E360                    1003                      ASL.W   D1,D0
00001ABE  123C 000D               1004                      MOVE.B  #13,D1
00001AC2  E260                    1005                      ASR.W   D1,D0
00001AC4                          1006  
00001AC4                          1007  
00001AC4  C0FC 0006               1008                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001AC8  4EF0 0000               1009                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001ACC                          1010  
00001ACC  4EF9 00001ADE           1011  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001AD2  4EF9 00001AEA           1012                                 JMP     ADDIWcode01
00001AD8  4EF9 00001AF6           1013                                 JMP     ADDILcode10
00001ADE                          1014  
00001ADE                          1015  
00001ADE  4EB9 000021EA           1016  ADDIBcode00        JSR     ISADDIB
00001AE4  4EB9 00002200           1017                      JSR    DONE
00001AEA  4EB9 000021BE           1018  ADDIWcode01        JSR     ISADDIW
00001AF0  4EB9 00002200           1019                      JSR    DONE
00001AF6  4EB9 000021D4           1020  ADDILcode10        JSR     ISADDIL
00001AFC  4EB9 00002200           1021                      JSR    DONE
00001B02                          1022  
00001B02                          1023  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001B02                          1024  
00001B02                          1025  
00001B02                          1026  
00001B02                          1027  
00001B02                          1028  *****************************MOVEA_LorMOVE_L ************************************
00001B02  4FF8 7000               1029  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001B06  41F9 00001B26           1030                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001B0C  4280                    1031                      CLR.L   D0                  ; Zero it
00001B0E  303C 6F00               1032                      MOVE.W  #example,D0         ; We'll play with it here
00001B12  123C 0007               1033                      MOVE.B  #7,D1           ; Shift 7 bits left
00001B16  E360                    1034                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001B18  123C 000D               1035                      MOVE.B  #13,D1           ; Shift 13 bits right
00001B1C  E260                    1036                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001B1E                          1037  
00001B1E                          1038  
00001B1E  C0FC 0006               1039                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B22  4EF0 0000               1040                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001B26                          1041  
00001B26  4EF9 00001B56           1042  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001B2C  4EF9 00001B62           1043                          JMP     MOVEAcode001
00001B32  4EF9 00001B6E           1044                          JMP     MOVEcode010
00001B38  4EF9 00001B7A           1045                          JMP     MOVEcode011
00001B3E  4EF9 00001B86           1046                          JMP     MOVEcode100
00001B44  4EF9 00001B92           1047                          JMP     MOVEcode101
00001B4A  4EF9 00001B9E           1048                          JMP     MOVEcode110
00001B50  4EF9 00001BAA           1049                          JMP     MOVEcode111
00001B56                          1050  
00001B56  4EB9 0000217C           1051  MOVEcode000     JSR     ISMOVEL
00001B5C  4EB9 00002200           1052                  JSR    DONE
00001B62  4EB9 00002192           1053  MOVEAcode001    JSR     ISMOVEAL
00001B68  4EB9 00002200           1054                  JSR    DONE
00001B6E  4EB9 0000217C           1055  MOVEcode010     JSR     ISMOVEL
00001B74  4EB9 00002200           1056                  JSR    DONE
00001B7A  4EB9 0000217C           1057  MOVEcode011     JSR     ISMOVEL
00001B80  4EB9 00002200           1058                  JSR    DONE
00001B86  4EB9 0000217C           1059  MOVEcode100     JSR     ISMOVEL
00001B8C  4EB9 00002200           1060                  JSR    DONE
00001B92  4EB9 0000217C           1061  MOVEcode101     JSR     ISMOVEL
00001B98  4EB9 00002200           1062                  JSR    DONE
00001B9E  4EB9 0000217C           1063  MOVEcode110     JSR     ISMOVEL
00001BA4  4EB9 00002200           1064                  JSR    DONE
00001BAA  4EB9 0000217C           1065  MOVEcode111     JSR     ISMOVEL
00001BB0  4EB9 00002200           1066                  JSR    DONE
00001BB6                          1067  *****************************END MOVEA_LorMOVE_L ************************************
00001BB6                          1068  
00001BB6                          1069  *****************************MOVEA_WorMOVE_W ************************************
00001BB6  4FF8 7000               1070  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001BBA  41F9 00001BDA           1071                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001BC0  4280                    1072                      CLR.L   D0                  ; Zero it
00001BC2  303C 6F00               1073                      MOVE.W  #example,D0         ; We'll play with it here
00001BC6  123C 0007               1074                      MOVE.B  #7,D1           ; Shift 7 bits left
00001BCA  E360                    1075                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001BCC  123C 000D               1076                      MOVE.B  #13,D1           ; Shift 13 bits right
00001BD0  E260                    1077                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001BD2                          1078  
00001BD2                          1079  
00001BD2  C0FC 0006               1080                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001BD6  4EF0 0000               1081                      JMP     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement
00001BDA                          1082  
00001BDA  4EF9 00001C0A           1083  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001BE0  4EF9 00001C16           1084                          JMP     MOVEAWcode001
00001BE6  4EF9 00001C22           1085                          JMP     MOVEWcode010
00001BEC  4EF9 00001C2E           1086                          JMP     MOVEWcode011
00001BF2  4EF9 00001C3A           1087                          JMP     MOVEWcode100
00001BF8  4EF9 00001C46           1088                          JMP     MOVEWcode101
00001BFE  4EF9 00001C52           1089                          JMP     MOVEWcode110
00001C04  4EF9 00001C5E           1090                          JMP     MOVEWcode111
00001C0A                          1091  
00001C0A  4EB9 00002150           1092  MOVEWcode000     JSR     ISMOVEW
00001C10  4EB9 00002200           1093                  JSR    DONE
00001C16  4EB9 00002166           1094  MOVEAWcode001    JSR     ISMOVEAW
00001C1C  4EB9 00002200           1095                  JSR    DONE
00001C22  4EB9 00002150           1096  MOVEWcode010     JSR     ISMOVEW
00001C28  4EB9 00002200           1097                  JSR    DONE
00001C2E  4EB9 00002150           1098  MOVEWcode011     JSR     ISMOVEW
00001C34  4EB9 00002200           1099                  JSR    DONE
00001C3A  4EB9 00002150           1100  MOVEWcode100     JSR     ISMOVEW
00001C40  4EB9 00002200           1101                  JSR    DONE
00001C46  4EB9 00002150           1102  MOVEWcode101     JSR     ISMOVEW
00001C4C  4EB9 00002200           1103                  JSR    DONE
00001C52  4EB9 00002150           1104  MOVEWcode110     JSR     ISMOVEW
00001C58  4EB9 00002200           1105                  JSR    DONE
00001C5E  4EB9 00002150           1106  MOVEWcode111     JSR     ISMOVEW
00001C64  4EB9 00002200           1107                  JSR    DONE
00001C6A                          1108  *****************************END MOVEA_WorMOVE_W ************************************
00001C6A  48A7 FFFF               1109  OPCODE_INVALID  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C6E  43F9 0000240C           1110              LEA MESSAGEOPCODE_INVALID, A1
00001C74  103C 000E               1111              MOVE.B  #14, D0
00001C78  4E4F                    1112              TRAP    #15
00001C7A                          1113  
00001C7A  4C9F FFFF               1114              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C7E  4E75                    1115              RTS
00001C80                          1116  
00001C80  48A7 FFFF               1117  ISBCC  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C84  43F9 000023FA           1118              LEA MESSAGEBCC, A1
00001C8A  103C 000E               1119              MOVE.B  #14, D0
00001C8E  4E4F                    1120              TRAP    #15
00001C90                          1121  
00001C90  4C9F FFFF               1122              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001C94  4E75                    1123              RTS
00001C96  48A7 FFFF               1124  ISBGT  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001C9A  43F9 00002400           1125              LEA MESSAGEBGT, A1
00001CA0  103C 000E               1126              MOVE.B  #14, D0
00001CA4  4E4F                    1127              TRAP    #15
00001CA6                          1128  
00001CA6  4C9F FFFF               1129              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CAA  4E75                    1130              RTS
00001CAC                          1131  
00001CAC  48A7 FFFF               1132  ISBLE  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CB0  43F9 00002406           1133              LEA MESSAGEBLE, A1
00001CB6  103C 000E               1134              MOVE.B  #14, D0
00001CBA  4E4F                    1135              TRAP    #15
00001CBC                          1136  
00001CBC  4C9F FFFF               1137              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CC0  4E75                    1138              RTS
00001CC2                          1139  
00001CC2  48A7 FFFF               1140  ISDIVUL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CC6  43F9 000023F1           1141              LEA MESSAGEDIVUL, A1
00001CCC  103C 000E               1142              MOVE.B  #14, D0
00001CD0  4E4F                    1143              TRAP    #15
00001CD2                          1144  
00001CD2  4C9F FFFF               1145              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CD6  4E75                    1146              RTS
00001CD8                          1147  
00001CD8  48A7 FFFF               1148  ISDIVUW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CDC  43F9 000023E8           1149              LEA MESSAGEDIVUW, A1
00001CE2  103C 000E               1150              MOVE.B  #14, D0
00001CE6  4E4F                    1151              TRAP    #15
00001CE8                          1152  
00001CE8  4C9F FFFF               1153              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CEC  4E75                    1154              RTS
00001CEE                          1155  
00001CEE  48A7 FFFF               1156  ISORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CF2  43F9 000023D3           1157              LEA MESSAGEORB, A1
00001CF8  103C 000E               1158              MOVE.B  #14, D0
00001CFC  4E4F                    1159              TRAP    #15
00001CFE                          1160  
00001CFE  4C9F FFFF               1161              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D02  4E75                    1162              RTS
00001D04                          1163  
00001D04  48A7 FFFF               1164  ISORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D08  43F9 000023DA           1165              LEA MESSAGEORW, A1
00001D0E  103C 000E               1166              MOVE.B  #14, D0
00001D12  4E4F                    1167              TRAP    #15
00001D14                          1168  
00001D14  4C9F FFFF               1169              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D18  4E75                    1170              RTS
00001D1A                          1171  
00001D1A  48A7 FFFF               1172  ISORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D1E  43F9 000023E1           1173              LEA MESSAGEORL, A1
00001D24  103C 000E               1174              MOVE.B  #14, D0
00001D28  4E4F                    1175              TRAP    #15
00001D2A                          1176  
00001D2A  4C9F FFFF               1177              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D2E  4E75                    1178              RTS
00001D30                          1179  
00001D30  48A7 FFFF               1180  ISASRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D34  43F9 00002343           1181              LEA MESSAGEASRB, A1
00001D3A  103C 000E               1182              MOVE.B  #14, D0
00001D3E  4E4F                    1183              TRAP    #15
00001D40                          1184  
00001D40  4C9F FFFF               1185              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D44  4E75                    1186              RTS
00001D46                          1187  
00001D46  48A7 FFFF               1188  ISASRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D4A  43F9 0000234B           1189              LEA MESSAGEASRW, A1
00001D50  103C 000E               1190              MOVE.B  #14, D0
00001D54  4E4F                    1191              TRAP    #15
00001D56                          1192  
00001D56  4C9F FFFF               1193              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D5A  4E75                    1194              RTS
00001D5C                          1195  
00001D5C  48A7 FFFF               1196  ISASRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D60  43F9 00002353           1197              LEA MESSAGEASRL, A1
00001D66  103C 000E               1198              MOVE.B  #14, D0
00001D6A  4E4F                    1199              TRAP    #15
00001D6C                          1200  
00001D6C  4C9F FFFF               1201              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D70  4E75                    1202              RTS
00001D72                          1203  
00001D72  48A7 FFFF               1204  ISASLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D76  43F9 0000235B           1205              LEA MESSAGEASLB, A1
00001D7C  103C 000E               1206              MOVE.B  #14, D0
00001D80  4E4F                    1207              TRAP    #15
00001D82                          1208  
00001D82  4C9F FFFF               1209              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D86  4E75                    1210              RTS
00001D88                          1211  
00001D88  48A7 FFFF               1212  ISASLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D8C  43F9 00002363           1213              LEA MESSAGEASLW, A1
00001D92  103C 000E               1214              MOVE.B  #14, D0
00001D96  4E4F                    1215              TRAP    #15
00001D98                          1216  
00001D98  4C9F FFFF               1217              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D9C  4E75                    1218              RTS
00001D9E                          1219  
00001D9E  48A7 FFFF               1220  ISASLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DA2  43F9 0000236B           1221              LEA MESSAGEASLL, A1
00001DA8  103C 000E               1222              MOVE.B  #14, D0
00001DAC  4E4F                    1223              TRAP    #15
00001DAE                          1224  
00001DAE  4C9F FFFF               1225              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DB2  4E75                    1226              RTS
00001DB4                          1227  
00001DB4  48A7 FFFF               1228  ISLSRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DB8  43F9 000023A3           1229              LEA MESSAGELSRB, A1
00001DBE  103C 000E               1230              MOVE.B  #14, D0
00001DC2  4E4F                    1231              TRAP    #15
00001DC4                          1232  
00001DC4  4C9F FFFF               1233              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DC8  4E75                    1234              RTS
00001DCA                          1235  
00001DCA  48A7 FFFF               1236  ISLSRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DCE  43F9 000023AB           1237              LEA MESSAGELSRW, A1
00001DD4  103C 000E               1238              MOVE.B  #14, D0
00001DD8  4E4F                    1239              TRAP    #15
00001DDA                          1240  
00001DDA  4C9F FFFF               1241              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DDE  4E75                    1242              RTS
00001DE0                          1243  
00001DE0  48A7 FFFF               1244  ISLSRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DE4  43F9 000023B3           1245              LEA MESSAGELSRL, A1
00001DEA  103C 000E               1246              MOVE.B  #14, D0
00001DEE  4E4F                    1247              TRAP    #15
00001DF0                          1248  
00001DF0  4C9F FFFF               1249              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DF4  4E75                    1250              RTS
00001DF6                          1251  
00001DF6  48A7 FFFF               1252  ISLSLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DFA  43F9 000023BB           1253              LEA MESSAGELSLB, A1
00001E00  103C 000E               1254              MOVE.B  #14, D0
00001E04  4E4F                    1255              TRAP    #15
00001E06                          1256  
00001E06  4C9F FFFF               1257              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E0A  4E75                    1258              RTS
00001E0C                          1259  
00001E0C  48A7 FFFF               1260  ISLSLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E10  43F9 000023C3           1261              LEA MESSAGELSLW, A1
00001E16  103C 000E               1262              MOVE.B  #14, D0
00001E1A  4E4F                    1263              TRAP    #15
00001E1C                          1264  
00001E1C  4C9F FFFF               1265              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E20  4E75                    1266              RTS
00001E22                          1267  
00001E22  48A7 FFFF               1268  ISLSLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E26  43F9 000023CB           1269              LEA MESSAGELSLL, A1
00001E2C  103C 000E               1270              MOVE.B  #14, D0
00001E30  4E4F                    1271              TRAP    #15
00001E32                          1272  
00001E32  4C9F FFFF               1273              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E36  4E75                    1274              RTS
00001E38                          1275  
00001E38  48A7 FFFF               1276  ISRORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E3C  43F9 00002373           1277              LEA MESSAGERORB, A1
00001E42  103C 000E               1278              MOVE.B  #14, D0
00001E46  4E4F                    1279              TRAP    #15
00001E48                          1280  
00001E48  4C9F FFFF               1281              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E4C  4E75                    1282              RTS
00001E4E                          1283  
00001E4E  48A7 FFFF               1284  ISRORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E52  43F9 0000237B           1285              LEA MESSAGERORW, A1
00001E58  103C 000E               1286              MOVE.B  #14, D0
00001E5C  4E4F                    1287              TRAP    #15
00001E5E                          1288  
00001E5E  4C9F FFFF               1289              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E62  4E75                    1290              RTS
00001E64                          1291  
00001E64  48A7 FFFF               1292  ISRORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E68  43F9 00002383           1293              LEA MESSAGERORL, A1
00001E6E  103C 000E               1294              MOVE.B  #14, D0
00001E72  4E4F                    1295              TRAP    #15
00001E74                          1296  
00001E74  4C9F FFFF               1297              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E78  4E75                    1298              RTS
00001E7A                          1299  
00001E7A  48A7 FFFF               1300  ISROLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E7E  43F9 0000238B           1301              LEA MESSAGEROLB, A1
00001E84  103C 000E               1302              MOVE.B  #14, D0
00001E88  4E4F                    1303              TRAP    #15
00001E8A                          1304  
00001E8A  4C9F FFFF               1305              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E8E  4E75                    1306              RTS
00001E90                          1307  
00001E90  48A7 FFFF               1308  ISROLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E94  43F9 00002393           1309              LEA MESSAGEROLW, A1
00001E9A  103C 000E               1310              MOVE.B  #14, D0
00001E9E  4E4F                    1311              TRAP    #15
00001EA0                          1312  
00001EA0  4C9F FFFF               1313              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EA4  4E75                    1314              RTS
00001EA6                          1315  
00001EA6  48A7 FFFF               1316  ISROLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EAA  43F9 0000239B           1317              LEA MESSAGEROLL, A1
00001EB0  103C 000E               1318              MOVE.B  #14, D0
00001EB4  4E4F                    1319              TRAP    #15
00001EB6                          1320  
00001EB6  4C9F FFFF               1321              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EBA  4E75                    1322              RTS
00001EBC                          1323  
00001EBC  48A7 FFFF               1324  ISMULSL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EC0  43F9 0000233A           1325              LEA MESSAGEMULSL, A1         *OPCODE is MULS.L
00001EC6  103C 000E               1326              MOVE.B  #14, D0
00001ECA  4E4F                    1327              TRAP    #15
00001ECC                          1328  
00001ECC  4C9F FFFF               1329              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001ED0  4E75                    1330              RTS
00001ED2                          1331  
00001ED2  48A7 FFFF               1332  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001ED6  43F9 00002331           1333              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001EDC  103C 000E               1334              MOVE.B  #14, D0
00001EE0  4E4F                    1335              TRAP    #15
00001EE2                          1336  
00001EE2  4C9F FFFF               1337              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EE6  4E75                    1338              RTS
00001EE8                          1339  
00001EE8  48A7 FFFF               1340  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EEC  43F9 00002319           1341              LEA MESSAGEANDB, A1         *OPCODE is AND.B
00001EF2  103C 000E               1342              MOVE.B  #14, D0
00001EF6  4E4F                    1343              TRAP    #15
00001EF8                          1344  
00001EF8  4C9F FFFF               1345              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EFC  4E75                    1346              RTS
00001EFE                          1347  
00001EFE  48A7 FFFF               1348  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F02  43F9 00002321           1349              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001F08  103C 000E               1350              MOVE.B  #14, D0
00001F0C  4E4F                    1351              TRAP    #15
00001F0E                          1352  
00001F0E  4C9F FFFF               1353              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F12  4E75                    1354              RTS
00001F14                          1355  
00001F14  48A7 FFFF               1356  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F18  43F9 00002329           1357              LEA MESSAGEANDL, A1         *OPCODE is AND.L
00001F1E  103C 000E               1358              MOVE.B  #14, D0
00001F22  4E4F                    1359              TRAP    #15
00001F24                          1360  
00001F24  4C9F FFFF               1361              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F28  4E75                    1362              RTS
00001F2A                          1363  
00001F2A  48A7 FFFF               1364  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F2E  43F9 000022FD           1365              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001F34  103C 000E               1366              MOVE.B  #14, D0
00001F38  4E4F                    1367              TRAP    #15
00001F3A                          1368  
00001F3A  4C9F FFFF               1369              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F3E  4E75                    1370              RTS
00001F40                          1371  
00001F40  48A7 FFFF               1372  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F44  43F9 00002306           1373              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001F4A  103C 000E               1374              MOVE.B  #14, D0
00001F4E  4E4F                    1375              TRAP    #15
00001F50                          1376  
00001F50  4C9F FFFF               1377              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F54  4E75                    1378              RTS
00001F56                          1379  
00001F56  48A7 FFFF               1380  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F5A  43F9 000022E5           1381              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
00001F60  103C 000E               1382              MOVE.B  #14, D0
00001F64  4E4F                    1383              TRAP    #15
00001F66                          1384  
00001F66  4C9F FFFF               1385              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F6A  4E75                    1386              RTS
00001F6C                          1387  
00001F6C  48A7 FFFF               1388  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F70  43F9 000022ED           1389              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
00001F76  103C 000E               1390              MOVE.B  #14, D0
00001F7A  4E4F                    1391              TRAP    #15
00001F7C                          1392  
00001F7C  4C9F FFFF               1393              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F80  4E75                    1394              RTS
00001F82                          1395  
00001F82  48A7 FFFF               1396  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F86  43F9 000022F5           1397              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
00001F8C  103C 000E               1398              MOVE.B  #14, D0
00001F90  4E4F                    1399              TRAP    #15
00001F92                          1400  
00001F92  4C9F FFFF               1401              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F96  4E75                    1402              RTS
00001F98                          1403  
00001F98  48A7 FFFF               1404  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F9C  43F9 000022CD           1405              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
00001FA2  103C 000E               1406              MOVE.B  #14, D0
00001FA6  4E4F                    1407              TRAP    #15
00001FA8                          1408  
00001FA8  4C9F FFFF               1409              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FAC  4E75                    1410              RTS
00001FAE                          1411  
00001FAE  48A7 FFFF               1412  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FB2  43F9 000022D5           1413              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00001FB8  103C 000E               1414              MOVE.B  #14, D0
00001FBC  4E4F                    1415              TRAP    #15
00001FBE                          1416  
00001FBE  4C9F FFFF               1417              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FC2  4E75                    1418              RTS
00001FC4                          1419  
00001FC4  48A7 FFFF               1420  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FC8  43F9 000022DD           1421              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
00001FCE  103C 000E               1422              MOVE.B  #14, D0
00001FD2  4E4F                    1423              TRAP    #15
00001FD4                          1424  
00001FD4  4C9F FFFF               1425              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FD8  4E75                    1426              RTS
00001FDA                          1427  
00001FDA  48A7 FFFF               1428  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FDE  43F9 000022B5           1429              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00001FE4  103C 000E               1430              MOVE.B  #14, D0
00001FE8  4E4F                    1431              TRAP    #15
00001FEA                          1432  
00001FEA  4C9F FFFF               1433              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FEE  4E75                    1434              RTS
00001FF0                          1435  
00001FF0  48A7 FFFF               1436  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FF4  43F9 000022BD           1437              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001FFA  103C 000E               1438              MOVE.B  #14, D0
00001FFE  4E4F                    1439              TRAP    #15
00002000                          1440  
00002000  4C9F FFFF               1441              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002004  4E75                    1442              RTS
00002006                          1443  
00002006  48A7 FFFF               1444  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000200A  43F9 000022C5           1445              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
00002010  103C 000E               1446              MOVE.B  #14, D0
00002014  4E4F                    1447              TRAP    #15
00002016                          1448  
00002016  4C9F FFFF               1449              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000201A  4E75                    1450              RTS
0000201C                          1451  
0000201C  48A7 FFFF               1452  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002020  43F9 0000229A           1453              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00002026  103C 000E               1454              MOVE.B  #14, D0
0000202A  4E4F                    1455              TRAP    #15
0000202C                          1456  
0000202C  4C9F FFFF               1457              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002030  4E75                    1458              RTS
00002032                          1459  
00002032  48A7 FFFF               1460  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002036  43F9 000022A3           1461              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
0000203C  103C 000E               1462              MOVE.B  #14, D0
00002040  4E4F                    1463              TRAP    #15
00002042                          1464  
00002042  4C9F FFFF               1465              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002046  4E75                    1466              RTS
00002048                          1467  
00002048  48A7 FFFF               1468  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000204C  43F9 000022AC           1469              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
00002052  103C 000E               1470              MOVE.B  #14, D0
00002056  4E4F                    1471              TRAP    #15
00002058                          1472  
00002058  4C9F FFFF               1473              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000205C  4E75                    1474              RTS
0000205E                          1475  
0000205E  48A7 FFFF               1476  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002062  43F9 0000230F           1477              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00002068  103C 000E               1478              MOVE.B  #14, D0
0000206C  4E4F                    1479              TRAP    #15
0000206E                          1480  
0000206E  4C9F FFFF               1481              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002072  4E75                    1482              RTS
00002074                          1483  
00002074  48A7 FFFF               1484  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002078  43F9 00002282           1485              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
0000207E  103C 000E               1486              MOVE.B  #14, D0
00002082  4E4F                    1487              TRAP    #15
00002084                          1488  
00002084  4C9F FFFF               1489              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002088  4E75                    1490              RTS
0000208A                          1491  
0000208A  48A7 FFFF               1492  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000208E  43F9 0000228A           1493              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
00002094  103C 000E               1494              MOVE.B  #14, D0
00002098  4E4F                    1495              TRAP    #15
0000209A                          1496  
0000209A  4C9F FFFF               1497              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000209E  4E75                    1498              RTS
000020A0                          1499  
000020A0  48A7 FFFF               1500  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020A4  43F9 00002292           1501              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
000020AA  103C 000E               1502              MOVE.B  #14, D0
000020AE  4E4F                    1503              TRAP    #15
000020B0                          1504  
000020B0  4C9F FFFF               1505              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020B4  4E75                    1506              RTS
000020B6                          1507  
000020B6  48A7 FFFF               1508  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020BA  43F9 00002256           1509              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L
000020C0  103C 000E               1510              MOVE.B  #14, D0
000020C4  4E4F                    1511              TRAP    #15
000020C6                          1512  
000020C6  4C9F FFFF               1513              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020CA  4E75                    1514              RTS
000020CC                          1515  
000020CC  48A7 FFFF               1516  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020D0  43F9 00002260           1517              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W
000020D6  103C 000E               1518              MOVE.B  #14, D0
000020DA  4E4F                    1519              TRAP    #15
000020DC                          1520  
000020DC  4C9F FFFF               1521              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020E0  4E75                    1522              RTS
000020E2                          1523  
000020E2  48A7 FFFF               1524  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020E6  43F9 0000227C           1525              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
000020EC  103C 000E               1526              MOVE.B  #14, D0
000020F0  4E4F                    1527              TRAP    #15
000020F2                          1528  
000020F2  4C9F FFFF               1529              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020F6  4E75                    1530              RTS                          ; Exit subroutine
000020F8                          1531  
000020F8  48A7 FFFF               1532  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020FC  43F9 0000226A           1533              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
00002102  103C 000E               1534              MOVE.B  #14, D0
00002106  4E4F                    1535              TRAP    #15
00002108  4C9F FFFF               1536              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000210C  4E75                    1537              RTS                          ; Exit subroutine
0000210E                          1538  
0000210E  48A7 FFFF               1539  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002112  43F9 00002276           1540              LEA MESSAGERTS, A1         *OPCODE is RTS
00002118  103C 000E               1541              MOVE.B  #14, D0
0000211C  4E4F                    1542              TRAP    #15
0000211E  4C9F FFFF               1543              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002122  4E75                    1544              RTS
00002124                          1545  
00002124  48A7 FFFF               1546  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002128  43F9 00002270           1547              LEA MESSAGECLR, A1         *OPCODE is CLR
0000212E  103C 000E               1548              MOVE.B  #14, D0
00002132  4E4F                    1549              TRAP    #15
00002134  4C9F FFFF               1550              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002138  4E75                    1551              RTS
0000213A                          1552  
0000213A  48A7 FFFF               1553  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000213E  43F9 00002206           1554              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
00002144  103C 000E               1555              MOVE.B  #14, D0
00002148  4E4F                    1556              TRAP    #15
0000214A  4C9F FFFF               1557              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000214E  4E75                    1558              RTS                          ; Exit subroutine
00002150                          1559  
00002150  48A7 FFFF               1560  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002154  43F9 0000220C           1561              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
0000215A  103C 000E               1562              MOVE.B  #14, D0
0000215E  4E4F                    1563              TRAP    #15
00002160                          1564  
00002160  4C9F FFFF               1565              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002164  4E75                    1566              RTS                          ; Exit subroutine
00002166                          1567  
00002166  48A7 FFFF               1568  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000216A  43F9 0000224C           1569              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
00002170  103C 000E               1570              MOVE.B  #14, D0
00002174  4E4F                    1571              TRAP    #15
00002176                          1572  
00002176  4C9F FFFF               1573              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000217A  4E75                    1574              RTS                          ; Exit subroutine
0000217C                          1575  
0000217C  48A7 FFFF               1576  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002180  43F9 00002215           1577              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
00002186  103C 000E               1578              MOVE.B  #14, D0
0000218A  4E4F                    1579              TRAP    #15
0000218C                          1580  
0000218C  4C9F FFFF               1581              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002190  4E75                    1582              RTS                          ; Exit subroutine
00002192                          1583  
00002192  48A7 FFFF               1584  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002196  43F9 00002242           1585              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
0000219C  103C 000E               1586              MOVE.B  #14, D0
000021A0  4E4F                    1587              TRAP    #15
000021A2                          1588  
000021A2  4C9F FFFF               1589              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021A6  4E75                    1590              RTS                          ; Exit subroutine
000021A8                          1591  
000021A8  48A7 FFFF               1592  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021AC  43F9 0000221E           1593              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
000021B2  103C 000E               1594              MOVE.B  #14, D0
000021B6  4E4F                    1595              TRAP    #15
000021B8                          1596  
000021B8  4C9F FFFF               1597              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021BC  4E75                    1598              RTS                          ; Exit subroutine
000021BE                          1599  
000021BE  48A7 FFFF               1600  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021C2  43F9 00002227           1601              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
000021C8  103C 000E               1602              MOVE.B  #14, D0
000021CC  4E4F                    1603              TRAP    #15
000021CE                          1604  
000021CE  4C9F FFFF               1605              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021D2  4E75                    1606              RTS                          ; Exit subroutine
000021D4                          1607  
000021D4  48A7 FFFF               1608  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021D8  43F9 00002230           1609              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
000021DE  103C 000E               1610              MOVE.B  #14, D0
000021E2  4E4F                    1611              TRAP    #15
000021E4                          1612  
000021E4  4C9F FFFF               1613              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021E8  4E75                    1614              RTS                          ; Exit subroutine
000021EA                          1615  
000021EA  48A7 FFFF               1616  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021EE  43F9 00002239           1617              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
000021F4  103C 000E               1618              MOVE.B  #14, D0
000021F8  4E4F                    1619              TRAP    #15
000021FA                          1620  
000021FA  4C9F FFFF               1621              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021FE  4E75                    1622              RTS                          ; Exit subroutine
00002200                          1623  
00002200  103C 0009               1624  DONE        MOVE.B      #9, D0
00002204  4E4F                    1625              TRAP        #15
00002206                          1626  
00002206  =0000000D               1627  CR  EQU     $0D
00002206  =0000000A               1628  LF  EQU     $0A
00002206= 4E 4F 50 0D 0A 00       1629  MESSAGENOP DC.B    'NOP',CR,LF, 0
0000220C                          1630  
0000220C= 4D 4F 56 45 2E 57 ...   1631  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0
00002215= 4D 4F 56 45 2E 4C ...   1632  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0
0000221E= 4D 4F 56 45 2E 42 ...   1633  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0
00002227                          1634  
00002227= 41 44 44 49 2E 57 ...   1635  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0
00002230= 41 44 44 49 2E 4C ...   1636  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0
00002239= 41 44 44 49 2E 42 ...   1637  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0
00002242                          1638  
00002242= 4D 4F 56 45 41 2E ...   1639  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0
0000224C= 4D 4F 56 45 41 2E ...   1640  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0
00002256                          1641  
00002256= 4D 4F 56 45 4D 2E ...   1642  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0
00002260= 4D 4F 56 45 4D 2E ...   1643  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0
0000226A                          1644  
0000226A= 4A 53 52 0D 0A 00       1645  MESSAGEJSR DC.B    'JSR',CR,LF, 0
00002270                          1646  
00002270= 43 4C 52 0D 0A 00       1647  MESSAGECLR DC.B    'CLR',CR,LF, 0
00002276                          1648  
00002276= 52 54 53 0D 0A 00       1649  MESSAGERTS DC.B    'RTS',CR,LF, 0
0000227C                          1650  
0000227C= 4C 45 41 0D 0A 00       1651  MESSAGELEA DC.B    'LEA',CR,LF, 0
00002282                          1652  
00002282= 43 4C 52 2E 42 0D ...   1653  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0
0000228A= 43 4C 52 2E 57 0D ...   1654  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00002292= 43 4C 52 2E 4C 0D ...   1655  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
0000229A                          1656  
0000229A= 41 44 44 51 2E 42 ...   1657  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0
000022A3= 41 44 44 51 2E 57 ...   1658  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
000022AC= 41 44 44 51 2E 4C ...   1659  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
000022B5                          1660  
000022B5= 43 4D 50 2E 42 0D ...   1661  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0
000022BD= 43 4D 50 2E 57 0D ...   1662  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
000022C5= 43 4D 50 2E 4C 0D ...   1663  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
000022CD                          1664  
000022CD= 53 55 42 2E 42 0D ...   1665  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0
000022D5= 53 55 42 2E 57 0D ...   1666  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
000022DD= 53 55 42 2E 4C 0D ...   1667  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
000022E5                          1668  
000022E5= 41 44 44 2E 42 0D ...   1669  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0
000022ED= 41 44 44 2E 57 0D ...   1670  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
000022F5= 41 44 44 2E 4C 0D ...   1671  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
000022FD                          1672  
000022FD= 41 44 44 41 2E 57 ...   1673  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
00002306= 41 44 44 41 2E 4C ...   1674  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
0000230F                          1675  
0000230F= 4D 4F 56 45 51 2E ...   1676  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
00002319                          1677  
00002319= 41 4E 44 2E 42 0D ...   1678  MESSAGEANDB DC.B    'AND.B',CR,LF, 0
00002321= 41 4E 44 2E 57 0D ...   1679  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
00002329= 41 4E 44 2E 4C 0D ...   1680  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
00002331                          1681  
00002331= 4D 55 4C 53 2E 57 ...   1682  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
0000233A= 4D 55 4C 53 2E 4C ...   1683  MESSAGEMULSL DC.B    'MULS.L',CR,LF, 0
00002343                          1684  
00002343= 41 53 52 2E 42 0D ...   1685  MESSAGEASRB DC.B    'ASR.B',CR,LF, 0
0000234B= 41 53 52 2E 57 0D ...   1686  MESSAGEASRW DC.B    'ASR.W',CR,LF, 0
00002353= 41 53 52 2E 4C 0D ...   1687  MESSAGEASRL DC.B    'ASR.L',CR,LF, 0
0000235B                          1688  
0000235B= 41 53 4C 2E 42 0D ...   1689  MESSAGEASLB DC.B    'ASL.B',CR,LF, 0
00002363= 41 53 4C 2E 57 0D ...   1690  MESSAGEASLW DC.B    'ASL.W',CR,LF, 0
0000236B= 41 53 4C 2E 4C 0D ...   1691  MESSAGEASLL DC.B    'ASL.L',CR,LF, 0
00002373                          1692  
00002373= 52 4F 52 2E 42 0D ...   1693  MESSAGERORB DC.B    'ROR.B',CR,LF, 0
0000237B= 52 4F 52 2E 57 0D ...   1694  MESSAGERORW DC.B    'ROR.W',CR,LF, 0
00002383= 52 4F 52 2E 4C 0D ...   1695  MESSAGERORL DC.B    'ROR.L',CR,LF, 0
0000238B                          1696  
0000238B= 52 4F 4C 2E 42 0D ...   1697  MESSAGEROLB DC.B    'ROL.B',CR,LF, 0
00002393= 52 4F 4C 2E 57 0D ...   1698  MESSAGEROLW DC.B    'ROL.W',CR,LF, 0
0000239B= 52 4F 4C 2E 4C 0D ...   1699  MESSAGEROLL DC.B    'ROL.L',CR,LF, 0
000023A3                          1700  
000023A3= 4C 53 52 2E 42 0D ...   1701  MESSAGELSRB DC.B    'LSR.B',CR,LF, 0
000023AB= 4C 53 52 2E 57 0D ...   1702  MESSAGELSRW DC.B    'LSR.W',CR,LF, 0
000023B3= 4C 53 52 2E 4C 0D ...   1703  MESSAGELSRL DC.B    'LSR.L',CR,LF, 0
000023BB                          1704  
000023BB= 4C 53 4C 2E 42 0D ...   1705  MESSAGELSLB DC.B    'LSL.B',CR,LF, 0
000023C3= 4C 53 4C 2E 57 0D ...   1706  MESSAGELSLW DC.B    'LSL.W',CR,LF, 0
000023CB= 4C 53 4C 2E 4C 0D ...   1707  MESSAGELSLL DC.B    'LSL.L',CR,LF, 0
000023D3                          1708  
000023D3= 4F 52 2E 42 0D 0A 00    1709  MESSAGEORB DC.B    'OR.B',CR,LF, 0
000023DA= 4F 52 2E 57 0D 0A 00    1710  MESSAGEORW DC.B    'OR.W',CR,LF, 0
000023E1= 4F 52 2E 4C 0D 0A 00    1711  MESSAGEORL DC.B    'OR.L',CR,LF, 0
000023E8                          1712  
000023E8= 44 49 56 55 2E 57 ...   1713  MESSAGEDIVUW DC.B    'DIVU.W',CR,LF, 0
000023F1= 44 49 56 55 2E 4C ...   1714  MESSAGEDIVUL DC.B    'DIVU.L',CR,LF, 0
000023FA                          1715  
000023FA= 42 43 43 0D 0A 00       1716  MESSAGEBCC DC.B    'BCC',CR,LF, 0
00002400= 42 47 54 0D 0A 00       1717  MESSAGEBGT DC.B    'BGT',CR,LF, 0
00002406= 42 4C 45 0D 0A 00       1718  MESSAGEBLE DC.B    'BLE',CR,LF, 0
0000240C                          1719  
0000240C= 54 68 61 74 20 69 ...   1720  MESSAGEOPCODE_INVALID DC.B    'That is not an opcode!',CR,LF, 0
00002425                          1721  
00002426  FFFF FFFF               1722      SIMHALT             ; halt simulator
0000242A                          1723  
0000242A                          1724  * Put variables and constants here
0000242A                          1725  
0000242A                          1726      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          1660
ADDCODE001          1668
ADDCODE010          1670
ADDCODE011          1678
ADDCODE100          1680
ADDCODE101          1688
ADDCODE110          1690
ADDCODE111          1698
ADDIBCODE00         1ADE
ADDILCODE10         1AF6
ADDIWCODE01         1AEA
ADDI_BORADDI_WORADDI_L  1AA8
ADDQCODE00          17BC
ADDQCODE01          17C4
ADDQCODE10          17CC
ADDQ_BORADDQ_WORADDQ_L  1780
ADD_BORADD_WORADD_L  1606
ANDCODE000          15C6
ANDCODE001          15CE
ANDCODE010          15D6
ANDCODE011          15DE
ANDCODE100          15E6
ANDCODE101          15EE
ANDCODE110          15F6
ANDCODE111          15FE
AND_BORAND_WORAND_LORMULS_W  156C
ASLCODE00           12E2
ASLCODE01           12EA
ASLCODE10           12F2
ASL_ASR             14CE
ASL_ASRCODE0        1504
ASL_ASRCODE1        150A
ASRCODE00           128E
ASRCODE01           1296
ASRCODE10           129E
BCCORBGTORBLE       1124
BCCORBGTORBLECODE00  1166
BCCORBGTORBLECODE01  116E
BCCORBGTORBLECODE10  1176
BCCORBGTORBLECODE11  117E
CLRCODE00           1810
CLRCODE01           1818
CLRCODE10           1820
CMPCODE000          1768
CMPCODE001          1770
CMPCODE010          1778
CMP_BORCMP_WORCMP_L  172C
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10C0
CODE1000            10CC
CODE1001            10D8
CODE1010            10E4
CODE1011            10EC
CODE1100            10F8
CODE1101            1104
CODE1110            1110
CODE1111            111C
CR                  D
DONE                2200
EXAMPLE             6F00
ISADDAL             1F40
ISADDAW             1F2A
ISADDB              1F56
ISADDIB             21EA
ISADDIL             21D4
ISADDIW             21BE
ISADDL              1F82
ISADDQB             201C
ISADDQL             2048
ISADDQW             2032
ISADDW              1F6C
ISANDB              1EE8
ISANDL              1F14
ISANDW              1EFE
ISASLB              1D72
ISASLL              1D9E
ISASLW              1D88
ISASRB              1D30
ISASRL              1D5C
ISASRW              1D46
ISBCC               1C80
ISBGT               1C96
ISBLE               1CAC
ISCLR               2124
ISCLRB              2074
ISCLRL              20A0
ISCLRW              208A
ISCMPB              1FDA
ISCMPL              2006
ISCMPW              1FF0
ISDIVUL             1CC2
ISDIVUW             1CD8
ISJSR               20F8
ISLEA               20E2
ISLSLB              1DF6
ISLSLL              1E22
ISLSLW              1E0C
ISLSRB              1DB4
ISLSRL              1DE0
ISLSRW              1DCA
ISMOVEAL            2192
ISMOVEAW            2166
ISMOVEB             21A8
ISMOVEL             217C
ISMOVEML            20B6
ISMOVEMW            20CC
ISMOVEQL            205E
ISMOVEW             2150
ISMULSL             1EBC
ISMULSW             1ED2
ISNOP               213A
ISORB               1CEE
ISORL               1D1A
ISORW               1D04
ISROLB              1E7A
ISROLL              1EA6
ISROLW              1E90
ISRORB              1E38
ISRORL              1E64
ISRORW              1E4E
ISRTS               210E
ISSUBB              1F98
ISSUBL              1FC4
ISSUBW              1FAE
JSRORCLRCODE0000    18D0
JSRORCLRCODE0001    18D8
JSRORCLRCODE0010    18E0
JSRORCLRCODE0011    18E6
JSRORCLRCODE0100    18EE
JSRORCLRCODE0101    18F6
JSRORCLRCODE0110    18FE
JSRORCLRCODE0111    1906
JSRORCLRCODE1000    190E
JSRORCLRCODE1001    1916
JSRORCLRCODE1010    191E
JSRORCLRCODE1011    1926
JSRORCLRCODE1100    192E
JSRORCLRCODE1101    1936
JSRORCLRCODE1110    193E
JSRORCLRCODE1111    1946
LF                  A
LOTSCODE0000        1A18
LOTSCODE0001        1A22
LOTSCODE0010        1A2A
LOTSCODE0011        1A34
LOTSCODE0100        1A3C
LOTSCODE0101        1A44
LOTSCODE0110        1A4C
LOTSCODE0111        1A58
LOTSCODE1000        1A60
LOTSCODE1001        1A6A
LOTSCODE1010        1A72
LOTSCODE1011        1A7C
LOTSCODE1100        1A84
LOTSCODE1101        1A8C
LOTSCODE1110        1A94
LOTSCODE1111        1AA0
LSLCODE00           138A
LSLCODE01           1392
LSLCODE10           139A
LSL_LSR             148C
LSL_LSRCODE0        14C2
LSL_LSRCODE1        14C8
LSRCODE00           1336
LSRCODE01           133E
LSRCODE10           1346
MESSAGEADDAL        2306
MESSAGEADDAW        22FD
MESSAGEADDB         22E5
MESSAGEADDIB        2239
MESSAGEADDIL        2230
MESSAGEADDIW        2227
MESSAGEADDL         22F5
MESSAGEADDQB        229A
MESSAGEADDQL        22AC
MESSAGEADDQW        22A3
MESSAGEADDW         22ED
MESSAGEANDB         2319
MESSAGEANDL         2329
MESSAGEANDW         2321
MESSAGEASLB         235B
MESSAGEASLL         236B
MESSAGEASLW         2363
MESSAGEASRB         2343
MESSAGEASRL         2353
MESSAGEASRW         234B
MESSAGEBCC          23FA
MESSAGEBGT          2400
MESSAGEBLE          2406
MESSAGECLR          2270
MESSAGECLRB         2282
MESSAGECLRL         2292
MESSAGECLRW         228A
MESSAGECMPB         22B5
MESSAGECMPL         22C5
MESSAGECMPW         22BD
MESSAGEDIVUL        23F1
MESSAGEDIVUW        23E8
MESSAGEJSR          226A
MESSAGELEA          227C
MESSAGELSLB         23BB
MESSAGELSLL         23CB
MESSAGELSLW         23C3
MESSAGELSRB         23A3
MESSAGELSRL         23B3
MESSAGELSRW         23AB
MESSAGEMOVEAL       2242
MESSAGEMOVEAW       224C
MESSAGEMOVEB        221E
MESSAGEMOVEL        2215
MESSAGEMOVEML       2256
MESSAGEMOVEMW       2260
MESSAGEMOVEQL       230F
MESSAGEMOVEW        220C
MESSAGEMULSL        233A
MESSAGEMULSW        2331
MESSAGENOP          2206
MESSAGEOPCODE_INVALID  240C
MESSAGEORB          23D3
MESSAGEORL          23E1
MESSAGEORW          23DA
MESSAGEROLB         238B
MESSAGEROLL         239B
MESSAGEROLW         2393
MESSAGERORB         2373
MESSAGERORL         2383
MESSAGERORW         237B
MESSAGERTS          2276
MESSAGESUBB         22CD
MESSAGESUBL         22DD
MESSAGESUBW         22D5
MOVEACODE001        1B62
MOVEAWCODE001       1C16
MOVEA_LORMOVE_L     1B02
MOVEA_WORMOVE_W     1BB6
MOVECODE000         1B56
MOVECODE010         1B6E
MOVECODE011         1B7A
MOVECODE100         1B86
MOVECODE101         1B92
MOVECODE110         1B9E
MOVECODE111         1BAA
MOVEMCODE0          1984
MOVEMCODE1          198C
MOVEWCODE000        1C0A
MOVEWCODE010        1C22
MOVEWCODE011        1C2E
MOVEWCODE100        1C3A
MOVEWCODE101        1C46
MOVEWCODE110        1C52
MOVEWCODE111        1C5E
MULSLORDIVUL        1186
MULSLORDIVULCODE0   11B6
MULSLORDIVULCODE1   11BE
NOPCOMMAND          18C8
NOPORCLRORRTSORJSR  1828
NOP_MOVEM_LEA_JSR_CLR_RTS  1994
OPCODE_INVALID      1C6A
OR_BOROR_WOROR_LORDIVU  11C6
OR_DIVUCODE000      121A
OR_DIVUCODE001      1222
OR_DIVUCODE010      122A
OR_DIVUCODE011      1232
OR_DIVUCODE100      123A
OR_DIVUCODE101      1242
OR_DIVUCODE110      124A
ROD_LSD_ASD         1510
ROD_LSD_ASDCODE00   1552
ROD_LSD_ASDCODE01   1558
ROD_LSD_ASDCODE10   155E
ROD_LSD_ASDCODE11   1566
ROLCODE00           13DE
ROLCODE01           13E6
ROLCODE10           13EE
ROL_ROR             144A
ROL_RORCODE0        1480
ROL_RORCODE1        1486
RORCODE00           1432
RORCODE01           143A
RORCODE10           1442
RTSCOMMAND          18C0
SHIFT               C
SOMEASL             12A6
SOMEASR             1252
SOMECLR             17D4
SOMELSL             134E
SOMELSR             12FA
SOMEMOVEM           194E
SOMEROL             13A2
SOMEROR             13F6
STACK               7000
START               1000
SUBCODE000          16F4
SUBCODE001          16FC
SUBCODE010          1704
SUBCODE011          170C
SUBCODE100          1714
SUBCODE101          171C
SUBCODE110          1724
SUB_BORSUB_WORSUB_L  16A0
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1ACC
TABLEADDQ_BORADDQ_WORADDQ_L  17AA
TABLEADD_BORADD_WORADD_L  1630
TABLEAND_BORAND_WORAND_LORMULS_W  1596
TABLEASL_ASR        14F8
TABLEBCCORBGTORBLE  114E
TABLECMP_BORCMP_WORCMP_L  1756
TABLELSL_LSR        14B6
TABLEMOVEA_LORMOVE_L  1B26
TABLEMOVEA_WORMOVE_W  1BDA
TABLEMULSLORDIVUL   11AA
TABLENOPORCLRORRTSORJSR  1860
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  19BE
TABLEOR_BOROR_WOROR_LORDIVU  11F0
TABLEROD_LSD_ASD    153A
TABLEROL_ROR        1474
TABLESOMEASL        12D0
TABLESOMEASR        127C
TABLESOMECLR        17FE
TABLESOMELSL        1378
TABLESOMELSR        1324
TABLESOMEMOVEM      1978
TABLESOMEROL        13CC
TABLESOMEROR        1420
TABLESUB_BORSUB_WORSUB_L  16CA
