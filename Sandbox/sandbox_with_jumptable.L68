00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/15/2016 1:31:31 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000  =0000D8C3                 57  example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000  =0000000C                 60  shift   EQU     12                 ; Shift 12 bits 
00001000                            61  
00001000                            62  * Program starts here
00001000                            63  
00001000  4FF8 7000                 64          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E             65          LEA     table,A0            ; Index into the table
0000100A  4280                      66          CLR.L   D0                  ; Zero it
0000100C  303C D8C3                 67          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                 68          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                      69          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                            70                                      ; and the rest are zeroed out)
00001016  C0FC 0006                 71          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                 72          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                            73  
0000101E  4EF9 0000107E             74  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084             75          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090             76          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096             77          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C             78          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS
0000103C  4EF9 000010A8             79          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4             80          JMP     code0110
00001048  4EF9 000010B8             81          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4             82          JMP     code1000
00001054  4EF9 000010C8             83          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010D4             84          JMP     code1010
00001060  4EF9 000010D8             85          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010E4             86          JMP     code1100
0000106C  4EF9 000010E8             87          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 000010F4             88          JMP     code1110
00001078  4EF9 000010F8             89          JMP     code1111
0000107E                            90         
0000107E                            91  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                            92  
0000107E  4EB9 000015A2             93  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 000019E2             94  code0001 JSR   ISMOVEB
0000108A  4EB9 00001A3A             95           JSR   DONE
00001090  4EB9 000015FC             96  code0010 JSR   MOVEA_LorMOVE_L        ; MOVEA.L or MOVE.L
00001096  4EB9 000016B0             97  code0011 JSR  MOVEA_WorMOVE_W        ; MOVEA.W or MOVE.W
0000109C  4EB9 000014BC             98  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 00001A3A             99           JSR    DONE
000010A8  4EB9 000012B6            100  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 00001A3A            101           JSR    DONE
000010B4  4E72 2700                102  code0110 STOP  #$2700
000010B8  4EB9 00001898            103  code0111 JSR    ISMOVEQL
000010BE  4EB9 00001A3A            104           JSR    DONE
000010C4  4E72 2700                105  code1000 STOP  #$2700
000010C8  4EB9 000011B6            106  code1001 JSR    SUB_BorSUB_WorSUB_L
000010CE  4EB9 00001A3A            107           JSR    DONE
000010D4  4E72 2700                108  code1010 STOP  #$2700
000010D8  4EB9 00001256            109  code1011 JSR    CMP_BorCMP_WorCMP_L
000010DE  4EB9 00001A3A            110           JSR DONE
000010E4  4E72 2700                111  code1100 STOP  #$2700
000010E8  4EB9 000010FC            112  code1101 JSR    ADD_BorADD_WorADD_L
000010EE  4EB9 00001A3A            113           JSR    DONE
000010F4  4E72 2700                114  code1110 STOP  #$2700
000010F8  4E72 2700                115  code1111 STOP  #$2700
000010FC                           116  
000010FC                           117  *****************************  ADD_BorADD_WorADD_L ************************************
000010FC  4FF8 7000                118  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
00001100  41F9 00001126            119                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
00001106  4280                     120                      CLR.L   D0                  ; Zero it
00001108  303C D8C3                121                      MOVE.W  #example,D0         ; We'll play with it here
0000110C  123C 0007                122                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001110  E360                     123                      ASL.W   D1,D0            
00001112  123C 000C                124                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001116  E268                     125                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001118                           126                                      ; and the rest are zeroed out)           
00001118  123C 0001                127                      MOVE.B  #1,D1           ; Shift 1 bits right
0000111C  E260                     128                      ASR.W   D1,D0 
0000111E                           129                      
0000111E  C0FC 0006                130                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001122  4EB0 0000                131                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001126                           132  
00001126  4EF9 00001156            133  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
0000112C  4EF9 00001162            134                                   JMP    ADDcode001   *ADD.W                                      
00001132  4EF9 0000116E            135                                   JMP    ADDcode010   *ADD.L
00001138                           136                                   
00001138  4EF9 0000117A            137                                   JMP    ADDcode011   *ADDA.W
0000113E  4EF9 00001186            138                                   JMP    ADDcode100   *ADD.B
00001144  4EF9 00001192            139                                   JMP    ADDcode101   *ADD.W 
0000114A  4EF9 0000119E            140                                   JMP    ADDcode110   *ADD.L
00001150  4EF9 000011AA            141                                   JMP    ADDcode111   *ADDA.L
00001156                           142  
00001156                           143  
00001156  4EB9 00001790            144  ADDcode000   JSR     ISADDB
0000115C  4EB9 00001A3A            145               JSR     DONE
00001162  4EB9 000017A6            146  ADDcode001   JSR     ISADDW  
00001168  4EB9 00001A3A            147               JSR     DONE                                 
0000116E  4EB9 000017BC            148  ADDcode010   JSR     ISADDL 
00001174  4EB9 00001A3A            149               JSR     DONE  
0000117A  4EB9 00001764            150  ADDcode011   JSR     ISADDAW
00001180  4EB9 00001A3A            151               JSR     DONE
00001186  4EB9 00001790            152  ADDcode100   JSR     ISADDB
0000118C  4EB9 00001A3A            153               JSR     DONE
00001192  4EB9 000017A6            154  ADDcode101   JSR     ISADDW  
00001198  4EB9 00001A3A            155               JSR     DONE                                 
0000119E  4EB9 000017BC            156  ADDcode110   JSR     ISADDL 
000011A4  4EB9 00001A3A            157               JSR     DONE 
000011AA  4EB9 0000177A            158  ADDcode111   JSR     ISADDAL
000011B0  4EB9 00001A3A            159               JSR     DONE
000011B6                           160     
000011B6                           161  ***************************** END  ADD_BorADD_WorADD_L ************************************
000011B6                           162  
000011B6                           163  *****************************  SUB_BorSUB_WorSUB_L ************************************
000011B6  4FF8 7000                164  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
000011BA  41F9 000011E0            165                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
000011C0  4280                     166                      CLR.L   D0                  ; Zero it
000011C2  303C D8C3                167                      MOVE.W  #example,D0         ; We'll play with it here
000011C6  123C 0007                168                      MOVE.B  #7,D1           ; Shift 7 bits left 
000011CA  E360                     169                      ASL.W   D1,D0            
000011CC  123C 000C                170                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000011D0  E268                     171                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000011D2                           172                                      ; and the rest are zeroed out)           
000011D2  123C 0001                173                      MOVE.B  #1,D1           ; Shift 1 bits right
000011D6  E260                     174                      ASR.W   D1,D0 
000011D8                           175                      
000011D8  C0FC 0006                176                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000011DC  4EB0 0000                177                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000011E0                           178  
000011E0  4EF9 0000120A            179  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
000011E6  4EF9 00001216            180                                   JMP    SUBcode001   *SUB.W                                      
000011EC  4EF9 00001222            181                                   JMP    SUBcode010   *SUB.L
000011F2                           182                                   
000011F2  4EF9 0000122E            183                                   JMP    SUBcode011   
000011F8  4EF9 00001232            184                                   JMP    SUBcode100   *SUB.B
000011FE  4EF9 0000123E            185                                   JMP    SUBcode101   *SUB.W 
00001204  4EF9 0000124A            186                                   JMP    SUBcode110   *SUB.L
0000120A                           187     
0000120A                           188  
0000120A                           189  
0000120A  4EB9 000017D2            190  SUBcode000   JSR     ISSUBB
00001210  4EB9 00001A3A            191               JSR     DONE
00001216  4EB9 000017E8            192  SUBcode001   JSR     ISSUBW  
0000121C  4EB9 00001A3A            193               JSR     DONE                                 
00001222  4EB9 000017FE            194  SUBcode010   JSR     ISSUBL 
00001228  4EB9 00001A3A            195               JSR     DONE  
0000122E  4E72 2700                196  SUBcode011   STOP  #$2700 
00001232  4EB9 000017D2            197  SUBcode100   JSR     ISSUBB
00001238  4EB9 00001A3A            198               JSR     DONE
0000123E  4EB9 000017E8            199  SUBcode101   JSR     ISSUBW  
00001244  4EB9 00001A3A            200               JSR     DONE                                 
0000124A  4EB9 000017FE            201  SUBcode110   JSR     ISSUBL 
00001250  4EB9 00001A3A            202               JSR     DONE 
00001256                           203     
00001256                           204  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
00001256                           205  
00001256                           206  
00001256                           207  ***************************** CMP_BorCMP_WorCMP_L ************************************
00001256  4FF8 7000                208  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
0000125A  41F9 00001280            209                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
00001260  4280                     210                      CLR.L   D0                  ; Zero it
00001262  303C D8C3                211                      MOVE.W  #example,D0         ; We'll play with it here
00001266  123C 0007                212                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000126A  E360                     213                      ASL.W   D1,D0            
0000126C  123C 000C                214                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001270  E268                     215                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001272                           216                                      ; and the rest are zeroed out)           
00001272  123C 0001                217                      MOVE.B  #1,D1           ; Shift 1 bits right
00001276  E260                     218                      ASR.W   D1,D0 
00001278                           219                      
00001278  C0FC 0006                220                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000127C  4EB0 0000                221                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001280                           222  
00001280  4EF9 00001292            223  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
00001286  4EF9 0000129E            224                                   JMP    CMPcode001   *CMP.W                                      
0000128C  4EF9 000012AA            225                                   JMP    CMPcode010   *CMP.L
00001292                           226  
00001292  4EB9 00001814            227  CMPcode000   JSR     ISCMPB
00001298  4EB9 00001A3A            228              JSR     DONE
0000129E  4EB9 0000182A            229  CMPcode001   JSR     ISCMPW  
000012A4  4EB9 00001A3A            230              JSR     DONE                                 
000012AA  4EB9 00001840            231  CMPcode010   JSR     ISCMPL 
000012B0  4EB9 00001A3A            232              JSR     DONE                    
000012B6                           233  
000012B6                           234  ***************************** END CMP_BorCMP_WorCMP_L ************************************
000012B6                           235  
000012B6                           236  
000012B6                           237  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
000012B6  4FF8 7000                238  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
000012BA  41F9 000012E0            239                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
000012C0  4280                     240                      CLR.L   D0                  ; Zero it
000012C2  303C D8C3                241                      MOVE.W  #example,D0         ; We'll play with it here
000012C6  123C 0008                242                      MOVE.B  #8,D1           ; Shift 8 bits left 
000012CA  E360                     243                      ASL.W   D1,D0            
000012CC  123C 000C                244                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000012D0  E268                     245                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012D2                           246                                      ; and the rest are zeroed out)           
000012D2  123C 0002                247                      MOVE.B  #2,D1           ; Shift 2 bits right
000012D6  E260                     248                      ASR.W   D1,D0 
000012D8                           249                      
000012D8  C0FC 0006                250                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012DC  4EB0 0000                251                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012E0                           252  
000012E0  4EF9 000012F2            253  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
000012E6  4EF9 000012FE            254                                      JMP     ADDQcode01   *ADDQ.W                                      
000012EC  4EF9 0000130A            255                                      JMP     ADDQcode10   *ADDQ.L
000012F2                           256  
000012F2  4EB9 00001856            257  ADDQcode00   JSR     ISADDQB
000012F8  4EB9 00001A3A            258              JSR     DONE
000012FE  4EB9 0000186C            259  ADDQcode01   JSR     ISADDQW  
00001304  4EB9 00001A3A            260              JSR     DONE                                 
0000130A  4EB9 00001882            261  ADDQcode10   JSR     ISADDQL 
00001310  4EB9 00001A3A            262              JSR     DONE                    
00001316                           263  
00001316                           264  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
00001316                           265  
00001316                           266  
00001316                           267  *****************************someCLR ************************************
00001316  4FF8 7000                268  someCLR     LEA     STACK,SP            ; Load the SP
0000131A  41F9 00001340            269                      LEA     tableSomeCLR, A0            ; Index into the table
00001320  4280                     270                      CLR.L   D0                  ; Zero it
00001322  303C D8C3                271                      MOVE.W  #example,D0         ; We'll play with it here
00001326  123C 0008                272                      MOVE.B  #8,D1           ; Shift 8 bits left 
0000132A  E360                     273                      ASL.W   D1,D0            
0000132C  123C 000C                274                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001330  E268                     275                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001332                           276                                      ; and the rest are zeroed out)           
00001332  123C 0002                277                      MOVE.B  #2,D1           ; Shift 2 bits right
00001336  E260                     278                      ASR.W   D1,D0 
00001338                           279                      
00001338  C0FC 0006                280                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000133C  4EB0 0000                281                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001340                           282  
00001340  4EF9 00001352            283  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001346  4EF9 0000135E            284                      JMP     CLRcode01   *CLR.W                                      
0000134C  4EF9 0000136A            285                      JMP     CLRcode10   *CLR.L
00001352                           286  
00001352  4EB9 000018AE            287  CLRcode00   JSR     ISCLRB
00001358  4EB9 00001A3A            288              JSR     DONE
0000135E  4EB9 000018C4            289  CLRcode01   JSR     ISCLRW  
00001364  4EB9 00001A3A            290              JSR     DONE                                 
0000136A  4EB9 000018DA            291  CLRcode10   JSR     ISCLRL  
00001370  4EB9 00001A3A            292              JSR     DONE                    
00001376                           293  
00001376                           294  *****************************END someCLR ************************************
00001376                           295  
00001376                           296  *****************************NOPorCLRorRTSorJSR ************************************
00001376  4FF8 7000                297  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
0000137A  41F9 000013AE            298                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
00001380  4280                     299                      CLR.L   D0                  ; Zero it
00001382  303C D8C3                300                      MOVE.W  #example,D0         ; We'll play with it here
00001386                           301                      
00001386  323C 4E71                302                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
0000138A  B240                     303                      CMP.W   D0, D1
0000138C  6700 008C                304                      BEQ     NOPcommand
00001390                           305   
00001390  323C 4E75                306                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
00001394  B240                     307                      CMP.W   D0, D1
00001396  6700 0076                308                      BEQ     RTScommand
0000139A                           309    
0000139A  123C 0004                310                      MOVE.B  #4,D1           ; Shift 4 bits left 
0000139E  E360                     311                      ASL.W   D1,D0            
000013A0  123C 000C                312                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013A4  E268                     313                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013A6                           314                                      ; and the rest are zeroed out)           
000013A6                           315    
000013A6                           316                      
000013A6  C0FC 0006                317                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013AA  4EB0 0000                318                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013AE                           319  
000013AE  4EF9 00001426            320  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
000013B4  4EF9 0000142A            321                             JMP     JSRorCLRcode0001
000013BA  4EF9 0000142E            322                             JMP     JSRorCLRcode0010   
000013C0  4EF9 00001438            323                             JMP     JSRorCLRcode0011
000013C6  4EF9 0000143C            324                             JMP     JSRorCLRcode0100
000013CC  4EF9 00001440            325                             JMP     JSRorCLRcode0101
000013D2  4EF9 00001444            326                             JMP     JSRorCLRcode0110
000013D8  4EF9 00001448            327                             JMP     JSRorCLRcode0111
000013DE  4EF9 0000144C            328                             JMP     JSRorCLRcode1000
000013E4  4EF9 00001450            329                             JMP     JSRorCLRcode1001
000013EA  4EF9 00001454            330                             JMP     JSRorCLRcode1010
000013F0  4EF9 00001458            331                             JMP     JSRorCLRcode1011
000013F6  4EF9 0000145C            332                             JMP     JSRorCLRcode1100
000013FC  4EF9 00001460            333                             JMP     JSRorCLRcode1101
00001402  4EF9 00001464            334                             JMP     JSRorCLRcode1110
00001408  4EF9 00001470            335                             JMP     JSRorCLRcode1111
0000140E                           336  
0000140E  4EB9 00001948            337  RTScommand          JSR     ISRTS
00001414  4EB9 00001A3A            338                      JSR     DONE
0000141A  4EB9 00001974            339  NOPcommand          JSR     ISNOP 
00001420  4EB9 00001A3A            340                      JSR     DONE                                                                  
00001426  4E72 2700                341  JSRorCLRcode0000     STOP  #$2700
0000142A  4E72 2700                342  JSRorCLRcode0001     STOP  #$2700
0000142E  4EB8 1316                343  JSRorCLRcode0010    JSR      someCLR
00001432  4EB9 00001A3A            344                      JSR     DONE
00001438  4E72 2700                345  JSRorCLRcode0011     STOP  #$2700
0000143C  4E72 2700                346  JSRorCLRcode0100     STOP  #$2700
00001440  4E72 2700                347  JSRorCLRcode0101     STOP  #$2700
00001444  4E72 2700                348  JSRorCLRcode0110     STOP  #$2700
00001448  4E72 2700                349  JSRorCLRcode0111     STOP  #$2700
0000144C  4E72 2700                350  JSRorCLRcode1000     STOP  #$2700
00001450  4E72 2700                351  JSRorCLRcode1001     STOP  #$2700
00001454  4E72 2700                352  JSRorCLRcode1010     STOP  #$2700
00001458  4E72 2700                353  JSRorCLRcode1011     STOP  #$2700
0000145C  4E72 2700                354  JSRorCLRcode1100     STOP  #$2700
00001460  4E72 2700                355  JSRorCLRcode1101     STOP  #$2700
00001464  4EB9 00001932            356  JSRorCLRcode1110    JSR     ISJSR
0000146A  4EB9 00001A3A            357                      JSR     DONE
00001470  4E72 2700                358  JSRorCLRcode1111     STOP  #$2700
00001474                           359  
00001474                           360  *****************************END NOPorCLRorRTSorJSR ************************************
00001474                           361  
00001474                           362  
00001474                           363  *****************************someMOVEM ************************************
00001474  4FF8 7000                364  someMOVEM     LEA     STACK,SP            ; Load the SP
00001478  41F9 00001498            365                      LEA     tableSomeMOVEM, A0            ; Index into the table
0000147E  4280                     366                      CLR.L   D0                  ; Zero it
00001480  303C D8C3                367                      MOVE.W  #example,D0         ; We'll play with it here
00001484  123C 0009                368                      MOVE.B  #9,D1           ; Shift 9 bits left 
00001488  E360                     369                      ASL.W   D1,D0            
0000148A  123C 000C                370                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000148E  E268                     371                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001490                           372                                      ; and the rest are zeroed out)           
00001490                           373    
00001490                           374                      
00001490  C0FC 0006                375                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001494  4EB0 0000                376                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001498                           377  
00001498  4EF9 000014A4            378  tableSomeMOVEM    JMP     MOVEMcode00   ;MOVEM.W
0000149E  4EF9 000014B0            379                    JMP     MOVEMcode01   ;MOVEM.L                                      
000014A4                           380                        
000014A4                           381  
000014A4                           382                            
000014A4  4EB9 00001906            383  MOVEMcode00         JSR     ISMOVEMW
000014AA  4EB9 00001A3A            384                      JSR     DONE
000014B0  4EB9 000018F0            385  MOVEMcode01         JSR     ISMOVEML
000014B6  4EB9 00001A3A            386                      JSR     DONE
000014BC                           387  
000014BC                           388  *****************************END someMOVEM ************************************
000014BC                           389  
000014BC                           390  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000014BC  4FF8 7000                391  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
000014C0  41F9 000014E6            392                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
000014C6  4280                     393                      CLR.L   D0                  ; Zero it
000014C8  303C D8C3                394                      MOVE.W  #example,D0         ; We'll play with it here
000014CC  123C 0007                395                      MOVE.B  #7,D1           ; Shift 7 bits right 
000014D0  E260                     396                      ASR.W   D1,D0 
000014D2                           397  
000014D2  123C 000D                398                      MOVE.B  #13,D1           ; Shift 6 bits left 
000014D6  E360                     399                      ASL.W   D1,D0            
000014D8  123C 000C                400                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014DC  E268                     401                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014DE                           402                                      ; and the rest are zeroed out)         
000014DE                           403    
000014DE                           404                      
000014DE  C0FC 0006                405                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014E2  4EB0 0000                406                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000014E6                           407  
000014E6  4EF9 00001540            408  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
000014EC  4EF9 00001544            409                                    JMP     LOTScode0001
000014F2  4EF9 00001548            410                                    JMP     LOTScode0010
000014F8  4EF9 00001552            411                                    JMP     LOTScode0011
000014FE  4EF9 00001556            412                                    JMP     LOTScode0100
00001504  4EF9 0000155A            413                                    JMP     LOTScode0101
0000150A  4EF9 0000155E            414                                    JMP     LOTScode0110
00001510  4EF9 0000156A            415                                    JMP     LOTScode0111
00001516  4EF9 0000156E            416                                    JMP     LOTScode1000
0000151C  4EF9 00001578            417                                    JMP     LOTScode1001
00001522  4EF9 0000157C            418                                    JMP     LOTScode1010
00001528  4EF9 00001586            419                                    JMP     LOTScode1011
0000152E  4EF9 0000158A            420                                    JMP     LOTScode1100
00001534  4EF9 0000158E            421                                    JMP     LOTScode1101                               JMP     LOTScode1110
0000153A  4EF9 0000159E            422                                    JMP     LOTScode1111                           
00001540                           423                        
00001540                           424  
00001540                           425                            
00001540  4E72 2700                426  LOTScode0000       STOP  #$2700
00001544  4E72 2700                427  LOTScode0001       STOP  #$2700
00001548  4EB8 1474                428  LOTScode0010        JSR    someMOVEM
0000154C  4EB9 00001A3A            429                     JSR    DONE
00001552  4E72 2700                430  LOTScode0011       STOP  #$2700                   
00001556  4E72 2700                431  LOTScode0100        STOP  #$2700
0000155A  4E72 2700                432  LOTScode0101        STOP  #$2700
0000155E  4EB9 0000191C            433  LOTScode0110        JSR    ISLEA  
00001564  4EB9 00001A3A            434                     JSR    DONE 
0000156A  4E72 2700                435  LOTScode0111        STOP  #$2700 
0000156E  4EB8 1376                436  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001572  4EB9 00001A3A            437                     JSR    DONE
00001578  4E72 2700                438  LOTScode1001        STOP  #$2700               
0000157C  4EB8 1376                439  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001580  4EB9 00001A3A            440                     JSR    DONE
00001586  4E72 2700                441  LOTScode1011        STOP  #$2700                   
0000158A  4E72 2700                442  LOTScode1100        STOP  #$2700
0000158E  4E72 2700                443  LOTScode1101     STOP  #$2700
00001592  4EB9 0000191C            444  LOTScode1110        JSR    ISLEA 
00001598  4EB9 00001A3A            445                     JSR    DONE
0000159E  4E72 2700                446  LOTScode1111       STOP  #$2700                
000015A2                           447                     
000015A2                           448  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000015A2                           449  
000015A2                           450  
000015A2                           451  *****************************ADDI_BorADDI_WorADDI_L ************************************
000015A2  4FF8 7000                452  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
000015A6  41F9 000015C6            453                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
000015AC  4280                     454                      CLR.L   D0                  ; Zero it
000015AE  303C D8C3                455                      MOVE.W  #example,D0         ; We'll play with it here
000015B2  123C 0007                456                      MOVE.B  #7,D1           ; Shift 7 bits left 
000015B6  E360                     457                      ASL.W   D1,D0            
000015B8  123C 000D                458                      MOVE.B  #13,D1           
000015BC  E260                     459                      ASR.W   D1,D0             
000015BE                           460    
000015BE                           461                      
000015BE  C0FC 0006                462                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000015C2  4EB0 0000                463                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000015C6                           464  
000015C6  4EF9 000015D8            465  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
000015CC  4EF9 000015E4            466                                 JMP     ADDIWcode01
000015D2  4EF9 000015F0            467                                 JMP     ADDILcode10
000015D8                           468  
000015D8                           469                            
000015D8  4EB9 00001A24            470  ADDIBcode00        JSR     ISADDIB
000015DE  4EB9 00001A3A            471                      JSR    DONE
000015E4  4EB9 000019F8            472  ADDIWcode01        JSR     ISADDIW
000015EA  4EB9 00001A3A            473                      JSR    DONE
000015F0  4EB9 00001A0E            474  ADDILcode10        JSR     ISADDIL
000015F6  4EB9 00001A3A            475                      JSR    DONE
000015FC                           476  
000015FC                           477  *****************************END ADDI_BorADDI_WorADDI_L ************************************
000015FC                           478  
000015FC                           479  
000015FC                           480  
000015FC                           481  
000015FC                           482  *****************************MOVEA_LorMOVE_L ************************************
000015FC  4FF8 7000                483  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001600  41F9 00001620            484                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001606  4280                     485                      CLR.L   D0                  ; Zero it
00001608  303C D8C3                486                      MOVE.W  #example,D0         ; We'll play with it here
0000160C  123C 0007                487                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001610  E360                     488                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001612  123C 000D                489                      MOVE.B  #13,D1           ; Shift 13 bits right
00001616  E260                     490                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001618                           491    
00001618                           492                      
00001618  C0FC 0006                493                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000161C  4EB0 0000                494                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001620                           495  
00001620  4EF9 00001650            496  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001626  4EF9 0000165C            497                          JMP     MOVEAcode001
0000162C  4EF9 00001668            498                          JMP     MOVEcode010
00001632  4EF9 00001674            499                          JMP     MOVEcode011
00001638  4EF9 00001680            500                          JMP     MOVEcode100
0000163E  4EF9 0000168C            501                          JMP     MOVEcode101
00001644  4EF9 00001698            502                          JMP     MOVEcode110
0000164A  4EF9 000016A4            503                          JMP     MOVEcode111
00001650                           504                            
00001650  4EB9 000019B6            505  MOVEcode000     JSR     ISMOVEL
00001656  4EB9 00001A3A            506                  JSR    DONE
0000165C  4EB9 000019CC            507  MOVEAcode001    JSR     ISMOVEAL
00001662  4EB9 00001A3A            508                  JSR    DONE
00001668  4EB9 000019B6            509  MOVEcode010     JSR     ISMOVEL
0000166E  4EB9 00001A3A            510                  JSR    DONE
00001674  4EB9 000019B6            511  MOVEcode011     JSR     ISMOVEL
0000167A  4EB9 00001A3A            512                  JSR    DONE
00001680  4EB9 000019B6            513  MOVEcode100     JSR     ISMOVEL
00001686  4EB9 00001A3A            514                  JSR    DONE
0000168C  4EB9 000019B6            515  MOVEcode101     JSR     ISMOVEL
00001692  4EB9 00001A3A            516                  JSR    DONE
00001698  4EB9 000019B6            517  MOVEcode110     JSR     ISMOVEL
0000169E  4EB9 00001A3A            518                  JSR    DONE
000016A4  4EB9 000019B6            519  MOVEcode111     JSR     ISMOVEL 
000016AA  4EB9 00001A3A            520                  JSR    DONE
000016B0                           521  *****************************END MOVEA_LorMOVE_L ************************************
000016B0                           522  
000016B0                           523  *****************************MOVEA_WorMOVE_W ************************************
000016B0  4FF8 7000                524  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
000016B4  41F9 000016D4            525                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
000016BA  4280                     526                      CLR.L   D0                  ; Zero it
000016BC  303C D8C3                527                      MOVE.W  #example,D0         ; We'll play with it here
000016C0  123C 0007                528                      MOVE.B  #7,D1           ; Shift 7 bits left 
000016C4  E360                     529                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
000016C6  123C 000D                530                      MOVE.B  #13,D1           ; Shift 13 bits right
000016CA  E260                     531                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
000016CC                           532    
000016CC                           533                      
000016CC  C0FC 0006                534                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000016D0  4EB0 0000                535                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000016D4                           536  
000016D4  4EF9 00001704            537  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
000016DA  4EF9 00001710            538                          JMP     MOVEAWcode001
000016E0  4EF9 0000171C            539                          JMP     MOVEWcode010
000016E6  4EF9 00001728            540                          JMP     MOVEWcode011
000016EC  4EF9 00001734            541                          JMP     MOVEWcode100
000016F2  4EF9 00001740            542                          JMP     MOVEWcode101
000016F8  4EF9 0000174C            543                          JMP     MOVEWcode110
000016FE  4EF9 00001758            544                          JMP     MOVEWcode111
00001704                           545                            
00001704  4EB9 0000198A            546  MOVEWcode000     JSR     ISMOVEW
0000170A  4EB9 00001A3A            547                  JSR    DONE
00001710  4EB9 000019A0            548  MOVEAWcode001    JSR     ISMOVEAW
00001716  4EB9 00001A3A            549                  JSR    DONE
0000171C  4EB9 0000198A            550  MOVEWcode010     JSR     ISMOVEW
00001722  4EB9 00001A3A            551                  JSR    DONE
00001728  4EB9 0000198A            552  MOVEWcode011     JSR     ISMOVEW
0000172E  4EB9 00001A3A            553                  JSR    DONE
00001734  4EB9 0000198A            554  MOVEWcode100     JSR     ISMOVEW
0000173A  4EB9 00001A3A            555                  JSR    DONE
00001740  4EB9 0000198A            556  MOVEWcode101     JSR     ISMOVEW
00001746  4EB9 00001A3A            557                  JSR    DONE
0000174C  4EB9 0000198A            558  MOVEWcode110     JSR     ISMOVEW
00001752  4EB9 00001A3A            559                  JSR    DONE
00001758  4EB9 0000198A            560  MOVEWcode111     JSR     ISMOVEW 
0000175E  4EB9 00001A3A            561                  JSR    DONE
00001764                           562  *****************************END MOVEA_WorMOVE_W ************************************
00001764                           563  
00001764  48A7 FFFF                564  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001768  43F9 00001B37            565              LEA MESSAGEADDAW, A1         *OPCODE is SUB.W
0000176E  103C 000E                566              MOVE.B  #14, D0
00001772  4E4F                     567              TRAP    #15
00001774                           568     
00001774  4C9F FFFF                569              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001778  4E75                     570              RTS
0000177A                           571              
0000177A  48A7 FFFF                572  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000177E  43F9 00001B40            573              LEA MESSAGEADDAL, A1         *OPCODE is SUB.L
00001784  103C 000E                574              MOVE.B  #14, D0
00001788  4E4F                     575              TRAP    #15
0000178A                           576     
0000178A  4C9F FFFF                577              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000178E  4E75                     578              RTS 
00001790                           579  
00001790  48A7 FFFF                580  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001794  43F9 00001B1F            581              LEA MESSAGEADDB, A1         *OPCODE is SUB.B
0000179A  103C 000E                582              MOVE.B  #14, D0
0000179E  4E4F                     583              TRAP    #15
000017A0                           584     
000017A0  4C9F FFFF                585              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017A4  4E75                     586              RTS
000017A6                           587  
000017A6  48A7 FFFF                588  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017AA  43F9 00001B27            589              LEA MESSAGEADDW, A1         *OPCODE is SUB.W
000017B0  103C 000E                590              MOVE.B  #14, D0
000017B4  4E4F                     591              TRAP    #15
000017B6                           592     
000017B6  4C9F FFFF                593              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017BA  4E75                     594              RTS
000017BC                           595              
000017BC  48A7 FFFF                596  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017C0  43F9 00001B2F            597              LEA MESSAGEADDL, A1         *OPCODE is SUB.L
000017C6  103C 000E                598              MOVE.B  #14, D0
000017CA  4E4F                     599              TRAP    #15
000017CC                           600     
000017CC  4C9F FFFF                601              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017D0  4E75                     602              RTS  
000017D2                           603  
000017D2  48A7 FFFF                604  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017D6  43F9 00001B07            605              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
000017DC  103C 000E                606              MOVE.B  #14, D0
000017E0  4E4F                     607              TRAP    #15
000017E2                           608     
000017E2  4C9F FFFF                609              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017E6  4E75                     610              RTS
000017E8                           611  
000017E8  48A7 FFFF                612  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000017EC  43F9 00001B0F            613              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
000017F2  103C 000E                614              MOVE.B  #14, D0
000017F6  4E4F                     615              TRAP    #15
000017F8                           616     
000017F8  4C9F FFFF                617              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000017FC  4E75                     618              RTS
000017FE                           619              
000017FE  48A7 FFFF                620  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001802  43F9 00001B17            621              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
00001808  103C 000E                622              MOVE.B  #14, D0
0000180C  4E4F                     623              TRAP    #15
0000180E                           624     
0000180E  4C9F FFFF                625              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001812  4E75                     626              RTS  
00001814                           627  
00001814  48A7 FFFF                628  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001818  43F9 00001AEF            629              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
0000181E  103C 000E                630              MOVE.B  #14, D0
00001822  4E4F                     631              TRAP    #15
00001824                           632     
00001824  4C9F FFFF                633              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001828  4E75                     634              RTS
0000182A                           635  
0000182A  48A7 FFFF                636  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000182E  43F9 00001AF7            637              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001834  103C 000E                638              MOVE.B  #14, D0
00001838  4E4F                     639              TRAP    #15
0000183A                           640     
0000183A  4C9F FFFF                641              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000183E  4E75                     642              RTS
00001840                           643              
00001840  48A7 FFFF                644  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001844  43F9 00001AFF            645              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
0000184A  103C 000E                646              MOVE.B  #14, D0
0000184E  4E4F                     647              TRAP    #15
00001850                           648     
00001850  4C9F FFFF                649              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001854  4E75                     650              RTS    
00001856                           651  
00001856  48A7 FFFF                652  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000185A  43F9 00001AD4            653              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00001860  103C 000E                654              MOVE.B  #14, D0
00001864  4E4F                     655              TRAP    #15
00001866                           656     
00001866  4C9F FFFF                657              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000186A  4E75                     658              RTS
0000186C                           659  
0000186C  48A7 FFFF                660  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001870  43F9 00001ADD            661              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00001876  103C 000E                662              MOVE.B  #14, D0
0000187A  4E4F                     663              TRAP    #15
0000187C                           664     
0000187C  4C9F FFFF                665              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001880  4E75                     666              RTS
00001882                           667              
00001882  48A7 FFFF                668  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001886  43F9 00001AE6            669              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
0000188C  103C 000E                670              MOVE.B  #14, D0
00001890  4E4F                     671              TRAP    #15
00001892                           672     
00001892  4C9F FFFF                673              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001896  4E75                     674              RTS            
00001898                           675              
00001898  48A7 FFFF                676  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000189C  43F9 00001B49            677              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
000018A2  103C 000E                678              MOVE.B  #14, D0
000018A6  4E4F                     679              TRAP    #15
000018A8                           680     
000018A8  4C9F FFFF                681              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018AC  4E75                     682              RTS
000018AE                           683  
000018AE  48A7 FFFF                684  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018B2  43F9 00001ABC            685              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
000018B8  103C 000E                686              MOVE.B  #14, D0
000018BC  4E4F                     687              TRAP    #15
000018BE                           688     
000018BE  4C9F FFFF                689              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018C2  4E75                     690              RTS
000018C4                           691  
000018C4  48A7 FFFF                692  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018C8  43F9 00001AC4            693              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
000018CE  103C 000E                694              MOVE.B  #14, D0
000018D2  4E4F                     695              TRAP    #15
000018D4                           696     
000018D4  4C9F FFFF                697              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018D8  4E75                     698              RTS
000018DA                           699  
000018DA  48A7 FFFF                700  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018DE  43F9 00001ACC            701              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
000018E4  103C 000E                702              MOVE.B  #14, D0
000018E8  4E4F                     703              TRAP    #15
000018EA                           704     
000018EA  4C9F FFFF                705              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000018EE  4E75                     706              RTS
000018F0                           707              
000018F0  48A7 FFFF                708  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000018F4  43F9 00001A90            709              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
000018FA  103C 000E                710              MOVE.B  #14, D0
000018FE  4E4F                     711              TRAP    #15
00001900                           712     
00001900  4C9F FFFF                713              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001904  4E75                     714              RTS
00001906                           715  
00001906  48A7 FFFF                716  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000190A  43F9 00001A9A            717              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
00001910  103C 000E                718              MOVE.B  #14, D0
00001914  4E4F                     719              TRAP    #15
00001916                           720     
00001916  4C9F FFFF                721              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000191A  4E75                     722              RTS  
0000191C                           723  
0000191C  48A7 FFFF                724  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001920  43F9 00001AB6            725              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
00001926  103C 000E                726              MOVE.B  #14, D0
0000192A  4E4F                     727              TRAP    #15
0000192C                           728     
0000192C  4C9F FFFF                729              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001930  4E75                     730              RTS                          ; Exit subroutine
00001932                           731  
00001932  48A7 FFFF                732  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001936  43F9 00001AA4            733              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
0000193C  103C 000E                734              MOVE.B  #14, D0
00001940  4E4F                     735              TRAP    #15
00001942  4C9F FFFF                736              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001946  4E75                     737              RTS                          ; Exit subroutine
00001948                           738              
00001948  48A7 FFFF                739  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000194C  43F9 00001AB0            740              LEA MESSAGERTS, A1         *OPCODE is RTS
00001952  103C 000E                741              MOVE.B  #14, D0
00001956  4E4F                     742              TRAP    #15
00001958  4C9F FFFF                743              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000195C  4E75                     744              RTS  
0000195E                           745  
0000195E  48A7 FFFF                746  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001962  43F9 00001AAA            747              LEA MESSAGECLR, A1         *OPCODE is CLR
00001968  103C 000E                748              MOVE.B  #14, D0
0000196C  4E4F                     749              TRAP    #15
0000196E  4C9F FFFF                750              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001972  4E75                     751              RTS  
00001974                           752              
00001974  48A7 FFFF                753  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001978  43F9 00001A40            754              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
0000197E  103C 000E                755              MOVE.B  #14, D0
00001982  4E4F                     756              TRAP    #15
00001984  4C9F FFFF                757              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001988  4E75                     758              RTS                          ; Exit subroutine
0000198A                           759           
0000198A  48A7 FFFF                760  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000198E  43F9 00001A46            761              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00001994  103C 000E                762              MOVE.B  #14, D0
00001998  4E4F                     763              TRAP    #15
0000199A                           764     
0000199A  4C9F FFFF                765              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000199E  4E75                     766              RTS                          ; Exit subroutine
000019A0                           767              
000019A0  48A7 FFFF                768  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019A4  43F9 00001A86            769              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
000019AA  103C 000E                770              MOVE.B  #14, D0
000019AE  4E4F                     771              TRAP    #15
000019B0                           772     
000019B0  4C9F FFFF                773              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019B4  4E75                     774              RTS                          ; Exit subroutine
000019B6                           775              
000019B6  48A7 FFFF                776  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019BA  43F9 00001A4F            777              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
000019C0  103C 000E                778              MOVE.B  #14, D0
000019C4  4E4F                     779              TRAP    #15
000019C6                           780              
000019C6  4C9F FFFF                781              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019CA  4E75                     782              RTS                          ; Exit subroutine
000019CC                           783              
000019CC  48A7 FFFF                784  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019D0  43F9 00001A7C            785              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
000019D6  103C 000E                786              MOVE.B  #14, D0
000019DA  4E4F                     787              TRAP    #15
000019DC                           788              
000019DC  4C9F FFFF                789              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019E0  4E75                     790              RTS                          ; Exit subroutine
000019E2                           791         
000019E2  48A7 FFFF                792  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019E6  43F9 00001A58            793              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
000019EC  103C 000E                794              MOVE.B  #14, D0
000019F0  4E4F                     795              TRAP    #15
000019F2                           796              
000019F2  4C9F FFFF                797              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000019F6  4E75                     798              RTS                          ; Exit subroutine
000019F8                           799           
000019F8  48A7 FFFF                800  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000019FC  43F9 00001A61            801              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
00001A02  103C 000E                802              MOVE.B  #14, D0
00001A06  4E4F                     803              TRAP    #15
00001A08                           804              
00001A08  4C9F FFFF                805              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A0C  4E75                     806              RTS                          ; Exit subroutine
00001A0E                           807              
00001A0E  48A7 FFFF                808  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A12  43F9 00001A6A            809              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
00001A18  103C 000E                810              MOVE.B  #14, D0
00001A1C  4E4F                     811              TRAP    #15
00001A1E                           812              
00001A1E  4C9F FFFF                813              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A22  4E75                     814              RTS                          ; Exit subroutine
00001A24                           815                  
00001A24  48A7 FFFF                816  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001A28  43F9 00001A73            817              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
00001A2E  103C 000E                818              MOVE.B  #14, D0
00001A32  4E4F                     819              TRAP    #15
00001A34                           820              
00001A34  4C9F FFFF                821              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001A38  4E75                     822              RTS                          ; Exit subroutine
00001A3A                           823                        
00001A3A  103C 0009                824  DONE        MOVE.B      #9, D0
00001A3E  4E4F                     825              TRAP        #15
00001A40                           826  
00001A40  =0000000D                827  CR  EQU     $0D 
00001A40  =0000000A                828  LF  EQU     $0A
00001A40= 4E 4F 50 0D 0A 00        829  MESSAGENOP DC.B    'NOP',CR,LF, 0    
00001A46                           830      
00001A46= 4D 4F 56 45 2E 57 ...    831  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
00001A4F= 4D 4F 56 45 2E 4C ...    832  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
00001A58= 4D 4F 56 45 2E 42 ...    833  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
00001A61                           834  
00001A61= 41 44 44 49 2E 57 ...    835  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
00001A6A= 41 44 44 49 2E 4C ...    836  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
00001A73= 41 44 44 49 2E 42 ...    837  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
00001A7C                           838  
00001A7C= 4D 4F 56 45 41 2E ...    839  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
00001A86= 4D 4F 56 45 41 2E ...    840  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
00001A90                           841  
00001A90= 4D 4F 56 45 4D 2E ...    842  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
00001A9A= 4D 4F 56 45 4D 2E ...    843  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00001AA4                           844  
00001AA4= 4A 53 52 0D 0A 00        845  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
00001AAA                           846  
00001AAA= 43 4C 52 0D 0A 00        847  MESSAGECLR DC.B    'CLR',CR,LF, 0
00001AB0                           848  
00001AB0= 52 54 53 0D 0A 00        849  MESSAGERTS DC.B    'RTS',CR,LF, 0
00001AB6                           850  
00001AB6= 4C 45 41 0D 0A 00        851  MESSAGELEA DC.B    'LEA',CR,LF, 0
00001ABC                           852  
00001ABC= 43 4C 52 2E 42 0D ...    853  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00001AC4= 43 4C 52 2E 57 0D ...    854  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
00001ACC= 43 4C 52 2E 4C 0D ...    855  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00001AD4                           856  
00001AD4= 41 44 44 51 2E 42 ...    857  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
00001ADD= 41 44 44 51 2E 57 ...    858  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
00001AE6= 41 44 44 51 2E 4C ...    859  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
00001AEF                           860  
00001AEF= 43 4D 50 2E 42 0D ...    861  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
00001AF7= 43 4D 50 2E 57 0D ...    862  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
00001AFF= 43 4D 50 2E 4C 0D ...    863  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
00001B07                           864  
00001B07= 53 55 42 2E 42 0D ...    865  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
00001B0F= 53 55 42 2E 57 0D ...    866  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
00001B17= 53 55 42 2E 4C 0D ...    867  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
00001B1F                           868  
00001B1F= 41 44 44 2E 42 0D ...    869  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0 
00001B27= 41 44 44 2E 57 0D ...    870  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
00001B2F= 41 44 44 2E 4C 0D ...    871  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
00001B37                           872  
00001B37= 41 44 44 41 2E 57 ...    873  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
00001B40= 41 44 44 41 2E 4C ...    874  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
00001B49                           875  
00001B49= 4D 4F 56 45 51 2E ...    876  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
00001B53                           877  
00001B54  FFFF FFFF                878      SIMHALT             ; halt simulator
00001B58                           879  
00001B58                           880  * Put variables and constants here
00001B58                           881  
00001B58                           882      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          1156
ADDCODE001          1162
ADDCODE010          116E
ADDCODE011          117A
ADDCODE100          1186
ADDCODE101          1192
ADDCODE110          119E
ADDCODE111          11AA
ADDIBCODE00         15D8
ADDILCODE10         15F0
ADDIWCODE01         15E4
ADDI_BORADDI_WORADDI_L  15A2
ADDQCODE00          12F2
ADDQCODE01          12FE
ADDQCODE10          130A
ADDQ_BORADDQ_WORADDQ_L  12B6
ADD_BORADD_WORADD_L  10FC
CLRCODE00           1352
CLRCODE01           135E
CLRCODE10           136A
CMPCODE000          1292
CMPCODE001          129E
CMPCODE010          12AA
CMP_BORCMP_WORCMP_L  1256
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10C8
CODE1010            10D4
CODE1011            10D8
CODE1100            10E4
CODE1101            10E8
CODE1110            10F4
CODE1111            10F8
CR                  D
DONE                1A3A
EXAMPLE             D8C3
ISADDAL             177A
ISADDAW             1764
ISADDB              1790
ISADDIB             1A24
ISADDIL             1A0E
ISADDIW             19F8
ISADDL              17BC
ISADDQB             1856
ISADDQL             1882
ISADDQW             186C
ISADDW              17A6
ISCLR               195E
ISCLRB              18AE
ISCLRL              18DA
ISCLRW              18C4
ISCMPB              1814
ISCMPL              1840
ISCMPW              182A
ISJSR               1932
ISLEA               191C
ISMOVEAL            19CC
ISMOVEAW            19A0
ISMOVEB             19E2
ISMOVEL             19B6
ISMOVEML            18F0
ISMOVEMW            1906
ISMOVEQL            1898
ISMOVEW             198A
ISNOP               1974
ISRTS               1948
ISSUBB              17D2
ISSUBL              17FE
ISSUBW              17E8
JSRORCLRCODE0000    1426
JSRORCLRCODE0001    142A
JSRORCLRCODE0010    142E
JSRORCLRCODE0011    1438
JSRORCLRCODE0100    143C
JSRORCLRCODE0101    1440
JSRORCLRCODE0110    1444
JSRORCLRCODE0111    1448
JSRORCLRCODE1000    144C
JSRORCLRCODE1001    1450
JSRORCLRCODE1010    1454
JSRORCLRCODE1011    1458
JSRORCLRCODE1100    145C
JSRORCLRCODE1101    1460
JSRORCLRCODE1110    1464
JSRORCLRCODE1111    1470
LF                  A
LOTSCODE0000        1540
LOTSCODE0001        1544
LOTSCODE0010        1548
LOTSCODE0011        1552
LOTSCODE0100        1556
LOTSCODE0101        155A
LOTSCODE0110        155E
LOTSCODE0111        156A
LOTSCODE1000        156E
LOTSCODE1001        1578
LOTSCODE1010        157C
LOTSCODE1011        1586
LOTSCODE1100        158A
LOTSCODE1101        158E
LOTSCODE1110        1592
LOTSCODE1111        159E
MESSAGEADDAL        1B40
MESSAGEADDAW        1B37
MESSAGEADDB         1B1F
MESSAGEADDIB        1A73
MESSAGEADDIL        1A6A
MESSAGEADDIW        1A61
MESSAGEADDL         1B2F
MESSAGEADDQB        1AD4
MESSAGEADDQL        1AE6
MESSAGEADDQW        1ADD
MESSAGEADDW         1B27
MESSAGECLR          1AAA
MESSAGECLRB         1ABC
MESSAGECLRL         1ACC
MESSAGECLRW         1AC4
MESSAGECMPB         1AEF
MESSAGECMPL         1AFF
MESSAGECMPW         1AF7
MESSAGEJSR          1AA4
MESSAGELEA          1AB6
MESSAGEMOVEAL       1A7C
MESSAGEMOVEAW       1A86
MESSAGEMOVEB        1A58
MESSAGEMOVEL        1A4F
MESSAGEMOVEML       1A90
MESSAGEMOVEMW       1A9A
MESSAGEMOVEQL       1B49
MESSAGEMOVEW        1A46
MESSAGENOP          1A40
MESSAGERTS          1AB0
MESSAGESUBB         1B07
MESSAGESUBL         1B17
MESSAGESUBW         1B0F
MOVEACODE001        165C
MOVEAWCODE001       1710
MOVEA_LORMOVE_L     15FC
MOVEA_WORMOVE_W     16B0
MOVECODE000         1650
MOVECODE010         1668
MOVECODE011         1674
MOVECODE100         1680
MOVECODE101         168C
MOVECODE110         1698
MOVECODE111         16A4
MOVEMCODE00         14A4
MOVEMCODE01         14B0
MOVEWCODE000        1704
MOVEWCODE010        171C
MOVEWCODE011        1728
MOVEWCODE100        1734
MOVEWCODE101        1740
MOVEWCODE110        174C
MOVEWCODE111        1758
NOPCOMMAND          141A
NOPORCLRORRTSORJSR  1376
NOP_MOVEM_LEA_JSR_CLR_RTS  14BC
RTSCOMMAND          140E
SHIFT               C
SOMECLR             1316
SOMEMOVEM           1474
STACK               7000
START               1000
SUBCODE000          120A
SUBCODE001          1216
SUBCODE010          1222
SUBCODE011          122E
SUBCODE100          1232
SUBCODE101          123E
SUBCODE110          124A
SUB_BORSUB_WORSUB_L  11B6
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  15C6
TABLEADDQ_BORADDQ_WORADDQ_L  12E0
TABLEADD_BORADD_WORADD_L  1126
TABLECMP_BORCMP_WORCMP_L  1280
TABLEMOVEA_LORMOVE_L  1620
TABLEMOVEA_WORMOVE_W  16D4
TABLENOPORCLRORRTSORJSR  13AE
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  14E6
TABLESOMECLR        1340
TABLESOMEMOVEM      1498
TABLESUB_BORSUB_WORSUB_L  11E0
