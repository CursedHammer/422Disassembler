00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/28/2016 1:44:02 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : NOP check
00000000                             3  * Written by : Jack Eldridge
00000000                             4  * Date       : 5-4-2016
00000000                             5  * Description: getting a feel for opcode checking
00000000                             6  *-----------------------------------------------------------
00000000  =00007000                  7  STACK       EQU $7000
00001000                             8      ORG    $1000
00001000                             9  
00001000                            10  
00001000                            11  
00001000                            12  START:                  ; first instruction of program
00001000                            13  * Jump table code
00001000                            14  
00001000                            15  *stack   EQU     $A000
00001000                            16  *example EQU     %0001101000000100 ; MOVE.B D4, D1 = 0001 1010 0000 0100 
00001000                            17  *example EQU     %0100111001110001 ; NOP  = 0100 1110 0111 0001
00001000                            18  *example EQU     %0010101001000100 ; MOVEA.L   D4, A5 = 0010 1010 0100 0100
00001000                            19  *example EQU     %0010101000000100 ; MOVE.L   D4, D5 = 0010 1010 0000 0100
00001000                            20  *example EQU     %0011101000000100 ; MOVE.W   D4, D5 = 0011 1010 0000 0100
00001000                            21  *example EQU     %0011101001000100 ; MOVEA.W   D4, D5 = 0011 1010 0100 0100
00001000                            22  *example EQU     %0000011000000101 ; ADDI.B D5, D7 = 0000 0110 0000 0101 
00001000                            23  *example EQU     %0000011001000101 ; ADDI.W D5, D7 = 0000 0110 0100 0101
00001000                            24  *example EQU     %0000011010000101 ; ADDI.L D5, D7 = 0000 0110 1000 0101
00001000                            25  *example EQU     %0100100111010101 ; LEA D5, (A5) = 0100 1001 1101 0101
00001000                            26  *example EQU     %0100111001110101 ; RTS  = 0100 1110 0111 0101
00001000                            27  *example EQU     %0100001010000111 ; CLR.L  = 0100 0010 1000 0111
00001000                            28  *example EQU     %0100001000000111 ; CLR.B  = 0100 0010 0000 0111
00001000                            29  *example EQU     %0100001001000111 ; CLR.W  = 0100 0010 0100 0111
00001000                            30  *example EQU     %0111111011111111 ; MOVEQ.L #%11111111, D7 = 0111 1110 1111 1111
00001000                            31  *example EQU     %0100111010010110 ; JSR (A6)  = 0100 1110 1001 0110
00001000                            32  *example EQU     %0101111000000011 ; ADDQ.B    #%111, D3 = 0101 1110 0000 0011
00001000                            33  *example EQU     %0101111001000011 ; ADDQ.W    #%111, D3 = 0101 1110 0100 0011
00001000                            34  *example EQU     %0101111010000011 ; ADDQ.L    #%111, D3 = 0101 1110 1000 0011
00001000                            35  *example EQU     %1011100000000011 ; CMP.B D3, D4 = 1011 100 000 000 011
00001000                            36  *example EQU     %1011100001000011 ; CMP.W D3, D4 = 1011 100 001 000 011
00001000                            37  *example EQU     %1011100010000011 ; CMP.L D3, D4 = 1011 100 010 000 011
00001000                            38  
00001000                            39  *example EQU     %1001100100000011 ; SUB.B D3, D4 = 1001 100 100 000 011
00001000                            40  *example EQU     %1001011000000100 ; SUB.B D4, D3 = 1001 011 000 000 100
00001000                            41  
00001000                            42  *example EQU     %1001100101000011 ; SUB.W D3, D4 = 1001 100 101 000 011
00001000                            43  *example EQU     %1001011001000100 ; SUB.W D4, D3 = 1001 011 001 000 100
00001000                            44  
00001000                            45  *example EQU     %1001100110000011 ; SUB.L D3, D4 = 1001 100 110 000 011
00001000                            46  *example EQU     %1001011010000100 ; SUB.L D4, D3 = 1001 011 010 000 100
00001000                            47  
00001000                            48  *example EQU     %1101100100000011 ; ADD.B D3, D4 = 1101 100 100 000 011
00001000                            49  *example EQU     %1101011000000100 ; ADD.B D4, D3 = 1101 011 000 000 100
00001000                            50  
00001000                            51  *example EQU     %1101100101000011 ; ADD.W D3, D4 = 1101 100 101 000 011
00001000                            52  *example EQU     %1101011001000100 ; ADD.W D4, D3 = 1101 011 001 000 100
00001000                            53  
00001000                            54  *example EQU     %1101100110000011 ; ADD.L D3, D4 = 1101 100 110 000 011
00001000                            55  *example EQU     %1101011010000100 ; ADD.L D4, D3 = 1101 011 010 000 100
00001000                            56  
00001000                            57  *example EQU     %1101100011000011 ; ADDA.W D3, A4 = 1101 100 011 000 011
00001000                            58  *example EQU     %1101100111000011 ; ADDA.L D3, A4 = 1101 100 111 000 011
00001000                            59  
00001000                            60  *example EQU     %1100100000000011 ; AND.B D3, D4 = 1100 100 000 000 011
00001000                            61  *example EQU     %1100011100000100 ; AND.B D4, D3 = 1100 011 100 000 100
00001000                            62  
00001000                            63  *example EQU     %1100100001000011 ; AND.W D3, D4 = 1100 100 001 000 011
00001000                            64  *example EQU     %1100011101000100 ; AND.W D4, D3 = 1100 011 101 000 100
00001000                            65  
00001000                            66  *example EQU     %1100100010000011 ; AND.L D3, D4 = 1100 100 010 000 011
00001000                            67  *example EQU     %1100011110000100 ; AND.L D4, D3 = 1100 011 110 000 100
00001000                            68  
00001000                            69  *example EQU     %1100100111000011 ; MULS.W D3, D4 = 1100 100 111 000 011
00001000                            70  
00001000  =00004C03                 71  example EQU     %0100110000000011 ; MULS.L D3, D4 = 01001 1 0000 000 011
00001000                            72  
00001000                            73  *example EQU     %0100100010010100 ; MOVEM.W (A4), (D16A6) = 0100 1000 10 010 100
00001000                            74  *example EQU     %0100110010101110 ; MOVEM.W (D16A6), (A4) = 0100 1100 10 101 110
00001000                            75  
00001000                            76  *example EQU     %0100100011010100 ; MOVEM.L (A4), (D16A6) = 0100 1000 11 010 100
00001000                            77  *example EQU     %0100110011101110 ; MOVEM.L (D16A6), (A4) = 0100 1100 11 101 110
00001000                            78  
00001000                            79  *example EQU     %1110111100011010  ; ROL.B  D1,D2 = 1110 111 1 00 0 11 010 where D1 = 0x111 or 7
00001000                            80  *example EQU     %1110111101011010  ; ROL.W  D1,D2 = 1110 111 1 01 0 11 010 where D1 = 0x111 or 7
00001000                            81  *example EQU     %1110111110011010  ; ROL.L  D1,D2 = 1110 111 1 10 0 11 010 where D1 = 0x111 or 7
00001000                            82  
00001000                            83  *example EQU     %1110111000011010  ; ROR.B  D1,D2 = 1110 111 0 00 0 11 010 where D1 = 0x111 or 7
00001000                            84  *example EQU     %1110111001011010  ; ROR.W  D1,D2 = 1110 111 0 01 0 11 010 where D1 = 0x111 or 7
00001000                            85  *example EQU     %1110111010011010  ; ROR.L  D1,D2 = 1110 111 0 10 0 11 010 where D1 = 0x111 or 7
00001000                            86  
00001000                            87  *example EQU     %1110111100001010  ; LSL.B  D1,D2 = 1110 111 1 00 0 01 010 where D1 = 0x111 or 7
00001000                            88  *example EQU     %1110111101001010  ; LSL.W  D1,D2 = 1110 111 1 01 0 01 010 where D1 = 0x111 or 7
00001000                            89  *example EQU     %1110111110001010  ; LSL.L  D1,D2 = 1110 111 1 10 0 01 010 where D1 = 0x111 or 7
00001000                            90  
00001000                            91  *example EQU     %1110111000001010  ; LSR.B  D1,D2 = 1110 111 0 00 0 01 010 where D1 = 0x111 or 7
00001000                            92  *example EQU     %1110111001001010  ; LSR.W  D1,D2 = 1110 111 0 01 0 01 010 where D1 = 0x111 or 7
00001000                            93  *example EQU     %1110111010001010  ; LSR.L  D1,D2 = 1110 111 0 10 0 01 010 where D1 = 0x111 or 7
00001000                            94  
00001000                            95  *example EQU     %1110111100000010  ; ASL.B  D1,D2 = 1110 111 1 00 0 00 010 where D1 = 0x111 or 7
00001000                            96  *example EQU     %1110111101000010  ; ASL.W  D1,D2 = 1110 111 1 01 0 00 010 where D1 = 0x111 or 7
00001000                            97  *example EQU     %1110111110000010  ; ASL.L  D1,D2 = 1110 111 1 10 0 00 010 where D1 = 0x111 or 7
00001000                            98  
00001000                            99  *example EQU     %1110111000000010  ; ASR.B  D1,D2 = 1110 111 0 00 0 00 010 where D1 = 0x111 or 7
00001000                           100  *example EQU     %1110111001000010  ; ASR.W  D1,D2 = 1110 111 0 01 0 00 010 where D1 = 0x111 or 7
00001000                           101  *example EQU     %1110111010000010  ; ASR.L  D1,D2 = 1110 111 0 10 0 00 010 where D1 = 0x111 or 7
00001000                           102  
00001000                           103  *example EQU     %1000100011000011 ; DIVU.W D3,D4 = 1000 100 011 000 011
00001000                           104  *example EQU     %0100110001000011 ; DIVU.L D3,D4 = 0100 110001 000 011
00001000                           105  
00001000                           106  *example EQU     %1000100000000011 ; OR.B D3,D4 = 1000 100 000 000 011
00001000                           107  *example EQU     %1000100100000011 ; OR.B D3,D4 = 1000 100 100 000 011
00001000                           108  *example EQU     %1000100001000011 ; OR.W D3,D4 = 1000 100 001 000 011
00001000                           109  *example EQU     %1000100101000011 ; OR.W D3,D4 = 1000 100 101 000 011
00001000                           110  *example EQU     %1000100010000011 ; OR.L D3,D4 = 1000 100 010 000 011
00001000                           111  *example EQU     %1000100110000011 ; OR.L D3,D4 = 1000 100 110 000 011
00001000                           112  
00001000                           113  
00001000  =0000000C                114  shift   EQU     12                 ; Shift 12 bits 
00001000                           115  
00001000                           116  * Program starts here
00001000                           117  
00001000  4FF8 7000                118          LEA     STACK,SP            ; Load the SP
00001004  41F9 0000101E            119          LEA     table,A0            ; Index into the table
0000100A  4280                     120          CLR.L   D0                  ; Zero it
0000100C  303C 4C03                121          MOVE.W  #example,D0         ; We'll play with it here
00001010  123C 000C                122          MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001014  E268                     123          LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001016                           124                                      ; and the rest are zeroed out)
00001016  C0FC 0006                125          MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000101A  4EB0 0000                126          JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000101E                           127  
0000101E  4EF9 0000107E            128  table   JMP     code0000        ; ADDI.B, ADDI.W, or ADDI.L
00001024  4EF9 00001084            129          JMP     code0001        ; MOVE.B
0000102A  4EF9 00001090            130          JMP     code0010        ; MOVEA.L or MOVE.L
00001030  4EF9 00001096            131          JMP     code0011        ; MOVEA.W or MOVE.W
00001036  4EF9 0000109C            132          JMP     code0100        ; NOP or MOVEM.W or MOVEM.L or LEA or CLR.B or CLR.W or CLR.L or JSR or RTS or MULS.W
0000103C  4EF9 000010A8            133          JMP     code0101        ; ADDQ.B or ADDQ.W or ADDQ.L
00001042  4EF9 000010B4            134          JMP     code0110
00001048  4EF9 000010B8            135          JMP     code0111        ; MOVEQ.L
0000104E  4EF9 000010C4            136          JMP     code1000        ; OR.B or OR.W or OR.L or DIVU.W
00001054  4EF9 000010D0            137          JMP     code1001        ; SUB.B or SUB.W or SUB.L
0000105A  4EF9 000010DC            138          JMP     code1010
00001060  4EF9 000010E0            139          JMP     code1011        ; CMP.B or CMP.W or CMP.L
00001066  4EF9 000010EC            140          JMP     code1100        ; AND_BorAND_WorAND_LorMULS_W
0000106C  4EF9 000010F8            141          JMP     code1101        ; ADD.B or ADD.W or ADD.L
00001072  4EF9 00001104            142          JMP     code1110        ; ROd_LSd_ASd
00001078  4EF9 00001110            143          JMP     code1111
0000107E                           144         
0000107E                           145  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
0000107E                           146  
0000107E  4EB9 00001AEA            147  code0000 JSR   ADDI_BorADDI_WorADDI_L
00001084  4EB9 00002192            148  code0001 JSR   ISMOVEB
0000108A  4EB9 000021EA            149           JSR   DONE
00001090  4EB9 00001B44            150  code0010 JSR   MOVEA_LorMOVE_L        
00001096  4EB9 00001BF8            151  code0011 JSR  MOVEA_WorMOVE_W        
0000109C  4EB9 000019FE            152  code0100 JSR    NOP_MOVEM_LEA_JSR_CLR_RTS
000010A2  4EB9 000021EA            153           JSR    DONE
000010A8  4EB9 000017F2            154  code0101 JSR    ADDQ_BorADDQ_WorADDQ_L
000010AE  4EB9 000021EA            155           JSR    DONE
000010B4  4E72 2700                156  code0110 STOP  #$2700
000010B8  4EB9 00002048            157  code0111 JSR    ISMOVEQL
000010BE  4EB9 000021EA            158           JSR    DONE
000010C4  4EB9 0000115C            159  code1000 JSR    OR_BorOR_WorOR_LorDIVU
000010CA  4EB9 000021EA            160           JSR    DONE
000010D0  4EB9 000016F2            161  code1001 JSR    SUB_BorSUB_WorSUB_L
000010D6  4EB9 000021EA            162           JSR    DONE
000010DC  4E72 2700                163  code1010 STOP  #$2700
000010E0  4EB9 00001792            164  code1011 JSR    CMP_BorCMP_WorCMP_L
000010E6  4EB9 000021EA            165           JSR DONE
000010EC  4EB9 00001586            166  code1100 JSR    AND_BorAND_WorAND_LorMULS_W
000010F2  4EB9 000021EA            167           JSR    DONE
000010F8  4EB9 00001638            168  code1101 JSR    ADD_BorADD_WorADD_L
000010FE  4EB9 000021EA            169           JSR    DONE
00001104  4EB9 00001522            170  code1110 JSR    ROd_LSd_ASd
0000110A  4EB9 000021EA            171           JSR    DONE
00001110  4E72 2700                172  code1111 STOP  #$2700
00001114                           173  
00001114                           174  *****************************  MULSLorDIVUL ************************************
00001114  4FF8 7000                175  MULSLorDIVUL        LEA     STACK,SP            ; Load the SP
00001118  41F9 00001138            176                      LEA     tableMULSLorDIVUL, A0            ; Index into the table
0000111E  4280                     177                      CLR.L   D0                  ; Zero it
00001120  303C 4C03                178                      MOVE.W  #example,D0         ; We'll play with it here
00001124  123C 0006                179                      MOVE.B  #6,D1           ; Shift 6 bits left 
00001128  E360                     180                      ASL.W   D1,D0            
0000112A  123C 000C                181                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000112E  E268                     182                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001130                           183                      
00001130  C0FC 0006                184                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001134  4EB0 0000                185                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001138                           186  
00001138  4EF9 00001144            187  tableMULSLorDIVUL             JMP    MULSLorDIVULcode0   ;  MULS.L
0000113E  4EF9 00001150            188                                JMP    MULSLorDIVULcode1   ;  DIVU.L                                   
00001144                           189  
00001144  4EB9 00001EA6            190  MULSLorDIVULcode0   JSR     ISMULSL
0000114A  4EB9 000021EA            191                      JSR     DONE
00001150  4EB9 00001CAC            192  MULSLorDIVULcode1   JSR     ISDIVUL 
00001156  4EB9 000021EA            193                      JSR     DONE                                 
0000115C                           194  ***************************** END  MULSLorDIVUL ************************************
0000115C                           195  
0000115C                           196  *****************************  OR_BorOR_WorOR_LorDIVU ************************************
0000115C  4FF8 7000                197  OR_BorOR_WorOR_LorDIVU     LEA     STACK,SP            ; Load the SP
00001160  41F9 00001186            198                      LEA     tableOR_BorOR_WorOR_LorDIVU, A0            ; Index into the table
00001166  4280                     199                      CLR.L   D0                  ; Zero it
00001168  303C 4C03                200                      MOVE.W  #example,D0         ; We'll play with it here
0000116C  123C 0007                201                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001170  E360                     202                      ASL.W   D1,D0            
00001172  123C 000C                203                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001176  E268                     204                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001178                           205                                      ; and the rest are zeroed out)           
00001178  123C 0001                206                      MOVE.B  #1,D1           ; Shift 1 bits right
0000117C  E260                     207                      ASR.W   D1,D0 
0000117E                           208                      
0000117E  C0FC 0006                209                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001182  4EB0 0000                210                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001186                           211  
00001186  4EF9 000011B0            212  tableOR_BorOR_WorOR_LorDIVU             JMP    OR_DIVUcode000   ; OR.B
0000118C  4EF9 000011BC            213                                          JMP    OR_DIVUcode001   ; OR.W                                    
00001192  4EF9 000011C8            214                                          JMP    OR_DIVUcode010   ; OR.L
00001198                           215                                   
00001198  4EF9 000011D4            216                                          JMP    OR_DIVUcode011   ; DIVU.W
0000119E  4EF9 000011E0            217                                          JMP    OR_DIVUcode100   ; OR.B
000011A4  4EF9 000011EC            218                                          JMP    OR_DIVUcode101   ; OR.W
000011AA  4EF9 000011F8            219                                          JMP    OR_DIVUcode110   ; OR.L
000011B0                           220                                          ;JMP    OR_DIVUcode111   
000011B0                           221  
000011B0                           222  
000011B0  4EB9 00001CD8            223  OR_DIVUcode000      JSR     ISORB
000011B6  4EB9 000021EA            224                      JSR     DONE
000011BC  4EB9 00001CEE            225  OR_DIVUcode001      JSR     ISORW  
000011C2  4EB9 000021EA            226                      JSR     DONE                                 
000011C8  4EB9 00001D04            227  OR_DIVUcode010      JSR     ISORL 
000011CE  4EB9 000021EA            228                      JSR     DONE  
000011D4  4EB9 00001CC2            229  OR_DIVUcode011      JSR     ISDIVUW
000011DA  4EB9 000021EA            230                      JSR     DONE
000011E0  4EB9 00001CD8            231  OR_DIVUcode100      JSR     ISORB
000011E6  4EB9 000021EA            232                      JSR     DONE
000011EC  4EB9 00001CEE            233  OR_DIVUcode101      JSR     ISORW  
000011F2  4EB9 000021EA            234                      JSR     DONE                                 
000011F8  4EB9 00001D04            235  OR_DIVUcode110      JSR     ISORL 
000011FE  4EB9 000021EA            236                      JSR     DONE 
00001204                           237  
00001204                           238     
00001204                           239  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001204                           240  
00001204                           241  *****************************someASR ************************************
00001204  4FF8 7000                242  someASR    LEA     STACK,SP            ; Load the SP
00001208  41F9 0000122E            243                      LEA     tableSomeASR, A0            ; Index into the table
0000120E  4280                     244                      CLR.L   D0                  ; Zero it
00001210  303C 4C03                245                      MOVE.W  #example,D0         ; We'll play with it here
00001214  123C 0008                246                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001218  E360                     247                      ASL.W   D1,D0            
0000121A  123C 000C                248                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000121E  E268                     249                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001220                           250                                      ; and the rest are zeroed out)           
00001220  123C 0002                251                      MOVE.B  #2,D1           ; Shift 2 bits right
00001224  E260                     252                      ASR.W   D1,D0 
00001226                           253                      
00001226  C0FC 0006                254                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000122A  4EB0 0000                255                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000122E                           256  
0000122E  4EF9 00001240            257  tableSomeASR        JMP     ASRcode00   *ASR.B
00001234  4EF9 0000124C            258                      JMP     ASRcode01   *ASR.W                                      
0000123A  4EF9 00001258            259                      JMP     ASRcode10   *ASR.L
00001240                           260  
00001240  4EB9 00001D1A            261  ASRcode00   JSR     ISASRB
00001246  4EB9 000021EA            262              JSR     DONE
0000124C  4EB9 00001D30            263  ASRcode01   JSR     ISASRW  
00001252  4EB9 000021EA            264              JSR     DONE                                 
00001258  4EB9 00001D46            265  ASRcode10   JSR     ISASRL  
0000125E  4EB9 000021EA            266              JSR     DONE                    
00001264                           267  
00001264                           268  *****************************END someLSL ************************************
00001264                           269  
00001264                           270  
00001264                           271  *****************************someASL ************************************
00001264  4FF8 7000                272  someASL    LEA     STACK,SP            ; Load the SP
00001268  41F9 0000128E            273                      LEA     tableSomeASL, A0            ; Index into the table
0000126E  4280                     274                      CLR.L   D0                  ; Zero it
00001270  303C 4C03                275                      MOVE.W  #example,D0         ; We'll play with it here
00001274  123C 0008                276                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001278  E360                     277                      ASL.W   D1,D0            
0000127A  123C 000C                278                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000127E  E268                     279                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001280                           280                                      ; and the rest are zeroed out)           
00001280  123C 0002                281                      MOVE.B  #2,D1           ; Shift 2 bits right
00001284  E260                     282                      ASR.W   D1,D0 
00001286                           283                      
00001286  C0FC 0006                284                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000128A  4EB0 0000                285                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000128E                           286  
0000128E  4EF9 000012A0            287  tableSomeASL        JMP     ASLcode00   *ASL.B
00001294  4EF9 000012AC            288                      JMP     ASLcode01   *ASL.W                                      
0000129A  4EF9 000012B8            289                      JMP     ASLcode10   *ASL.L
000012A0                           290  
000012A0  4EB9 00001D5C            291  ASLcode00   JSR     ISASLB
000012A6  4EB9 000021EA            292              JSR     DONE
000012AC  4EB9 00001D72            293  ASLcode01   JSR     ISASLW  
000012B2  4EB9 000021EA            294              JSR     DONE                                 
000012B8  4EB9 00001D88            295  ASLcode10   JSR     ISASLL  
000012BE  4EB9 000021EA            296              JSR     DONE                    
000012C4                           297  
000012C4                           298  *****************************END someLSL ************************************
000012C4                           299  
000012C4                           300  
000012C4                           301  *****************************someLSR ************************************
000012C4  4FF8 7000                302  someLSR    LEA     STACK,SP            ; Load the SP
000012C8  41F9 000012EE            303                      LEA     tableSomeLSR, A0            ; Index into the table
000012CE  4280                     304                      CLR.L   D0                  ; Zero it
000012D0  303C 4C03                305                      MOVE.W  #example,D0         ; We'll play with it here
000012D4  123C 0008                306                      MOVE.B  #8,D1           ; Shift 8 bits left 
000012D8  E360                     307                      ASL.W   D1,D0            
000012DA  123C 000C                308                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000012DE  E268                     309                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000012E0                           310                                      ; and the rest are zeroed out)           
000012E0  123C 0002                311                      MOVE.B  #2,D1           ; Shift 2 bits right
000012E4  E260                     312                      ASR.W   D1,D0 
000012E6                           313                      
000012E6  C0FC 0006                314                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000012EA  4EB0 0000                315                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000012EE                           316  
000012EE  4EF9 00001300            317  tableSomeLSR        JMP     LSRcode00   *LSR.B
000012F4  4EF9 0000130C            318                      JMP     LSRcode01   *LSR.W                                      
000012FA  4EF9 00001318            319                      JMP     LSRcode10   *LSR.L
00001300                           320  
00001300  4EB9 00001D9E            321  LSRcode00   JSR     ISLSRB
00001306  4EB9 000021EA            322              JSR     DONE
0000130C  4EB9 00001DB4            323  LSRcode01   JSR     ISLSRW  
00001312  4EB9 000021EA            324              JSR     DONE                                 
00001318  4EB9 00001DCA            325  LSRcode10   JSR     ISLSRL  
0000131E  4EB9 000021EA            326              JSR     DONE                    
00001324                           327  
00001324                           328  *****************************END someLSR ************************************
00001324                           329  
00001324                           330  
00001324                           331  *****************************someLSL ************************************
00001324  4FF8 7000                332  someLSL    LEA     STACK,SP            ; Load the SP
00001328  41F9 0000134E            333                      LEA     tableSomeLSL, A0            ; Index into the table
0000132E  4280                     334                      CLR.L   D0                  ; Zero it
00001330  303C 4C03                335                      MOVE.W  #example,D0         ; We'll play with it here
00001334  123C 0008                336                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001338  E360                     337                      ASL.W   D1,D0            
0000133A  123C 000C                338                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000133E  E268                     339                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001340                           340                                      ; and the rest are zeroed out)           
00001340  123C 0002                341                      MOVE.B  #2,D1           ; Shift 2 bits right
00001344  E260                     342                      ASR.W   D1,D0 
00001346                           343                      
00001346  C0FC 0006                344                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000134A  4EB0 0000                345                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000134E                           346  
0000134E  4EF9 00001360            347  tableSomeLSL        JMP     LSLcode00   *LSL.B
00001354  4EF9 0000136C            348                      JMP     LSLcode01   *LSL.W                                      
0000135A  4EF9 00001378            349                      JMP     LSLcode10   *LSL.L
00001360                           350  
00001360  4EB9 00001DE0            351  LSLcode00   JSR     ISLSLB
00001366  4EB9 000021EA            352              JSR     DONE
0000136C  4EB9 00001DF6            353  LSLcode01   JSR     ISLSLW  
00001372  4EB9 000021EA            354              JSR     DONE                                 
00001378  4EB9 00001E0C            355  LSLcode10   JSR     ISLSLL  
0000137E  4EB9 000021EA            356              JSR     DONE                    
00001384                           357  
00001384                           358  *****************************END someLSL ************************************
00001384                           359  
00001384                           360  
00001384                           361  *****************************someROL ************************************
00001384  4FF8 7000                362  someROL    LEA     STACK,SP            ; Load the SP
00001388  41F9 000013AE            363                      LEA     tableSomeROL, A0            ; Index into the table
0000138E  4280                     364                      CLR.L   D0                  ; Zero it
00001390  303C 4C03                365                      MOVE.W  #example,D0         ; We'll play with it here
00001394  123C 0008                366                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001398  E360                     367                      ASL.W   D1,D0            
0000139A  123C 000C                368                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000139E  E268                     369                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000013A0                           370                                      ; and the rest are zeroed out)           
000013A0  123C 0002                371                      MOVE.B  #2,D1           ; Shift 2 bits right
000013A4  E260                     372                      ASR.W   D1,D0 
000013A6                           373                      
000013A6  C0FC 0006                374                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000013AA  4EB0 0000                375                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000013AE                           376  
000013AE  4EF9 000013C0            377  tableSomeROL        JMP     ROLcode00   *ROL.B
000013B4  4EF9 000013CC            378                      JMP     ROLcode01   *ROL.W                                      
000013BA  4EF9 000013D8            379                      JMP     ROLcode10   *ROL.L
000013C0                           380  
000013C0  4EB9 00001E64            381  ROLcode00   JSR     ISROLB
000013C6  4EB9 000021EA            382              JSR     DONE
000013CC  4EB9 00001E7A            383  ROLcode01   JSR     ISROLW  
000013D2  4EB9 000021EA            384              JSR     DONE                                 
000013D8  4EB9 00001E90            385  ROLcode10   JSR     ISROLL  
000013DE  4EB9 000021EA            386              JSR     DONE                    
000013E4                           387  
000013E4                           388  *****************************END someROR ************************************
000013E4                           389  
000013E4                           390  
000013E4                           391  *****************************someROR ************************************
000013E4  4FF8 7000                392  someROR     LEA     STACK,SP            ; Load the SP
000013E8  41F9 0000140E            393                      LEA     tableSomeROR, A0            ; Index into the table
000013EE  4280                     394                      CLR.L   D0                  ; Zero it
000013F0  303C 4C03                395                      MOVE.W  #example,D0         ; We'll play with it here
000013F4  123C 0008                396                      MOVE.B  #8,D1           ; Shift 8 bits left 
000013F8  E360                     397                      ASL.W   D1,D0            
000013FA  123C 000C                398                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000013FE  E268                     399                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001400                           400                                      ; and the rest are zeroed out)           
00001400  123C 0002                401                      MOVE.B  #2,D1           ; Shift 2 bits right
00001404  E260                     402                      ASR.W   D1,D0 
00001406                           403                      
00001406  C0FC 0006                404                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000140A  4EB0 0000                405                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000140E                           406  
0000140E  4EF9 00001420            407  tableSomeROR        JMP     RORcode00   *ROR.B
00001414  4EF9 0000142C            408                      JMP     RORcode01   *ROR.W                                      
0000141A  4EF9 00001438            409                      JMP     RORcode10   *ROR.L
00001420                           410  
00001420  4EB9 00001E22            411  RORcode00   JSR     ISRORB
00001426  4EB9 000021EA            412              JSR     DONE
0000142C  4EB9 00001E38            413  RORcode01   JSR     ISRORW  
00001432  4EB9 000021EA            414              JSR     DONE                                 
00001438  4EB9 00001E4E            415  RORcode10   JSR     ISRORL  
0000143E  4EB9 000021EA            416              JSR     DONE                    
00001444                           417  
00001444                           418  *****************************END someROR ************************************
00001444                           419  
00001444                           420  
00001444                           421  *****************************  ROL_ROR ************************************
00001444  4FF8 7000                422  ROL_ROR     LEA     STACK,SP            ; Load the SP
00001448  41F9 0000146E            423                      LEA     tableROL_ROR, A0            ; Index into the table
0000144E  4280                     424                      CLR.L   D0                  ; Zero it
00001450  303C 4C03                425                      MOVE.W  #example,D0         ; We'll play with it here
00001454  123C 0007                426                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001458  E360                     427                      ASL.W   D1,D0            
0000145A  123C 000C                428                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000145E  E268                     429                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001460                           430                                      ; and the rest are zeroed out)           
00001460  123C 0003                431                      MOVE.B  #3,D1           ; Shift 3 bits right
00001464  E260                     432                      ASR.W   D1,D0 
00001466                           433                      
00001466  C0FC 0006                434                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000146A  4EB0 0000                435                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000146E                           436  
0000146E  4EF9 0000147A            437  tableROL_ROR            JMP    ROL_RORcode0   ; ROR
00001474  4EF9 00001484            438                          JMP    ROL_RORcode1   ; ROL                                 
0000147A                           439  
0000147A                           440    
0000147A                           441  
0000147A                           442  
0000147A  4EB8 13E4                443  ROL_RORcode0   JSR     someROR
0000147E  4EB9 000021EA            444                 JSR     DONE
00001484  4EB8 1384                445  ROL_RORcode1   JSR     someROL  
00001488  4EB9 000021EA            446                 JSR     DONE                                 
0000148E                           447  
0000148E                           448     
0000148E                           449  ***************************** END ROL_ROR ************************************
0000148E                           450  
0000148E                           451  
0000148E                           452  *****************************  LSL_LSR ************************************
0000148E  4FF8 7000                453  LSL_LSR     LEA     STACK,SP            ; Load the SP
00001492  41F9 000014B8            454                      LEA     tableLSL_LSR, A0            ; Index into the table
00001498  4280                     455                      CLR.L   D0                  ; Zero it
0000149A  303C 4C03                456                      MOVE.W  #example,D0         ; We'll play with it here
0000149E  123C 0007                457                      MOVE.B  #7,D1           ; Shift 7 bits left 
000014A2  E360                     458                      ASL.W   D1,D0            
000014A4  123C 000C                459                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014A8  E268                     460                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014AA                           461                                      ; and the rest are zeroed out)           
000014AA  123C 0003                462                      MOVE.B  #3,D1           ; Shift 3 bits right
000014AE  E260                     463                      ASR.W   D1,D0 
000014B0                           464                      
000014B0  C0FC 0006                465                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014B4  4EB0 0000                466                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000014B8                           467  
000014B8  4EF9 000014C4            468  tableLSL_LSR            JMP    LSL_LSRcode0   ; LSR
000014BE  4EF9 000014CE            469                          JMP    LSL_LSRcode1   ; LSL                                 
000014C4                           470  
000014C4                           471    
000014C4                           472  
000014C4                           473  
000014C4  4EB8 12C4                474  LSL_LSRcode0   JSR     someLSR
000014C8  4EB9 000021EA            475                 JSR     DONE
000014CE  4EB8 1324                476  LSL_LSRcode1   JSR     someLSL  
000014D2  4EB9 000021EA            477                 JSR     DONE                                 
000014D8                           478  
000014D8                           479     
000014D8                           480  ***************************** END LSL_LSR ************************************
000014D8                           481  
000014D8                           482  
000014D8                           483  *****************************  ASL_ASR ************************************
000014D8  4FF8 7000                484  ASL_ASR     LEA     STACK,SP            ; Load the SP
000014DC  41F9 00001502            485                      LEA     tableASL_ASR, A0            ; Index into the table
000014E2  4280                     486                      CLR.L   D0                  ; Zero it
000014E4  303C 4C03                487                      MOVE.W  #example,D0         ; We'll play with it here
000014E8  123C 0007                488                      MOVE.B  #7,D1           ; Shift 7 bits left 
000014EC  E360                     489                      ASL.W   D1,D0            
000014EE  123C 000C                490                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000014F2  E268                     491                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000014F4                           492                                      ; and the rest are zeroed out)           
000014F4  123C 0003                493                      MOVE.B  #3,D1           ; Shift 3 bits right
000014F8  E260                     494                      ASR.W   D1,D0 
000014FA                           495                      
000014FA  C0FC 0006                496                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000014FE  4EB0 0000                497                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001502                           498  
00001502  4EF9 0000150E            499  tableASL_ASR            JMP    ASL_ASRcode0   ; ASR
00001508  4EF9 00001518            500                          JMP    ASL_ASRcode1   ; ASL                                  
0000150E                           501  
0000150E                           502    
0000150E                           503  
0000150E                           504  
0000150E  4EB8 1204                505  ASL_ASRcode0   JSR     someASR
00001512  4EB9 000021EA            506                 JSR     DONE
00001518  4EB8 1264                507  ASL_ASRcode1   JSR     someASL 
0000151C  4EB9 000021EA            508                 JSR     DONE                                 
00001522                           509  
00001522                           510     
00001522                           511  ***************************** END ASL_ASR ************************************
00001522                           512  
00001522                           513  
00001522                           514  *****************************  ROd_LSd_ASd ************************************
00001522  4FF8 7000                515  ROd_LSd_ASd     LEA     STACK,SP            ; Load the SP
00001526  41F9 0000154C            516                      LEA     tableROd_LSd_ASd, A0            ; Index into the table
0000152C  4280                     517                      CLR.L   D0                  ; Zero it
0000152E  303C 4C03                518                      MOVE.W  #example,D0         ; We'll play with it here
00001532  123C 000B                519                      MOVE.B  #11,D1           ; Shift 11 bits left 
00001536  E360                     520                      ASL.W   D1,D0            
00001538  123C 000C                521                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000153C  E268                     522                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000153E                           523                                      ; and the rest are zeroed out)           
0000153E  123C 0002                524                      MOVE.B  #2,D1           ; Shift 2 bits right
00001542  E260                     525                      ASR.W   D1,D0 
00001544                           526                      
00001544  C0FC 0006                527                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001548  4EB0 0000                528                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000154C                           529  
0000154C  4EF9 00001564            530  tableROd_LSd_ASd        JMP    ROd_LSd_ASdcode00   ; ASL_ASR
00001552  4EF9 0000156E            531                          JMP    ROd_LSd_ASdcode01   ; LSL_LSR                                     
00001558  4EF9 00001578            532                          JMP    ROd_LSd_ASdcode10   
0000155E  4EF9 0000157C            533                          JMP    ROd_LSd_ASdcode11   ; ROL_ROR
00001564                           534    
00001564                           535  
00001564                           536  
00001564  4EB8 14D8                537  ROd_LSd_ASdcode00   JSR     ASL_ASR
00001568  4EB9 000021EA            538                      JSR     DONE
0000156E  4EB8 148E                539  ROd_LSd_ASdcode01   JSR     LSL_LSR   
00001572  4EB9 000021EA            540                      JSR     DONE                                 
00001578  4E72 2700                541  ROd_LSd_ASdcode10   STOP    #$2700     
0000157C  4EB8 1444                542  ROd_LSd_ASdcode11   JSR     ROL_ROR
00001580  4EB9 000021EA            543                      JSR     DONE 
00001586                           544     
00001586                           545  ***************************** END  ROd_LSd_ASd ************************************
00001586                           546  
00001586                           547  *****************************  AND_BorAND_WorAND_LorMULS_W ************************************
00001586  4FF8 7000                548  AND_BorAND_WorAND_LorMULS_W     LEA     STACK,SP            ; Load the SP
0000158A  41F9 000015B0            549                      LEA     tableAND_BorAND_WorAND_LorMULS_W, A0            ; Index into the table
00001590  4280                     550                      CLR.L   D0                  ; Zero it
00001592  303C 4C03                551                      MOVE.W  #example,D0         ; We'll play with it here
00001596  123C 0007                552                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000159A  E360                     553                      ASL.W   D1,D0            
0000159C  123C 000C                554                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000015A0  E268                     555                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000015A2                           556                                      ; and the rest are zeroed out)           
000015A2  123C 0001                557                      MOVE.B  #1,D1           ; Shift 1 bits right
000015A6  E260                     558                      ASR.W   D1,D0 
000015A8                           559                      
000015A8  C0FC 0006                560                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000015AC  4EB0 0000                561                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000015B0                           562  
000015B0  4EF9 000015E0            563  tableAND_BorAND_WorAND_LorMULS_W        JMP    ANDcode000   ; AND.B
000015B6  4EF9 000015EC            564                                          JMP    ANDcode001   ; AND.W                                     
000015BC  4EF9 000015F8            565                                          JMP    ANDcode010   ; AND.L
000015C2                           566                                   
000015C2  4EF9 00001604            567                                          JMP    ANDcode011   
000015C8  4EF9 00001608            568                                          JMP    ANDcode100   ; AND.B
000015CE  4EF9 00001614            569                                          JMP    ANDcode101   ; AND.W 
000015D4  4EF9 00001620            570                                          JMP    ANDcode110   ; AND.L
000015DA  4EF9 0000162C            571                                          JMP    ANDcode111   ; MULS.W
000015E0                           572  
000015E0                           573  
000015E0  4EB9 00001ED2            574  ANDcode000   JSR     ISANDB
000015E6  4EB9 000021EA            575               JSR     DONE
000015EC  4EB9 00001EE8            576  ANDcode001   JSR     ISANDW  
000015F2  4EB9 000021EA            577               JSR     DONE                                 
000015F8  4EB9 00001EFE            578  ANDcode010   JSR     ISANDL 
000015FE  4EB9 000021EA            579               JSR     DONE  
00001604  4E72 2700                580  ANDcode011   STOP  #$2700
00001608  4EB9 00001ED2            581  ANDcode100   JSR     ISANDB
0000160E  4EB9 000021EA            582               JSR     DONE
00001614  4EB9 00001EE8            583  ANDcode101   JSR     ISANDW  
0000161A  4EB9 000021EA            584               JSR     DONE                                 
00001620  4EB9 00001EFE            585  ANDcode110   JSR     ISANDL 
00001626  4EB9 000021EA            586               JSR     DONE 
0000162C  4EB9 00001EBC            587  ANDcode111   JSR     ISMULSW
00001632  4EB9 000021EA            588               JSR     DONE
00001638                           589     
00001638                           590  ***************************** END  ADD_BorADD_WorADD_L ************************************
00001638                           591  
00001638                           592  *****************************  ADD_BorADD_WorADD_L ************************************
00001638  4FF8 7000                593  ADD_BorADD_WorADD_L     LEA     STACK,SP            ; Load the SP
0000163C  41F9 00001662            594                      LEA     tableADD_BorADD_WorADD_L, A0            ; Index into the table
00001642  4280                     595                      CLR.L   D0                  ; Zero it
00001644  303C 4C03                596                      MOVE.W  #example,D0         ; We'll play with it here
00001648  123C 0007                597                      MOVE.B  #7,D1           ; Shift 7 bits left 
0000164C  E360                     598                      ASL.W   D1,D0            
0000164E  123C 000C                599                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001652  E268                     600                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001654                           601                                      ; and the rest are zeroed out)           
00001654  123C 0001                602                      MOVE.B  #1,D1           ; Shift 1 bits right
00001658  E260                     603                      ASR.W   D1,D0 
0000165A                           604                      
0000165A  C0FC 0006                605                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
0000165E  4EB0 0000                606                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001662                           607  
00001662  4EF9 00001692            608  tableADD_BorADD_WorADD_L         JMP    ADDcode000   *ADD.B
00001668  4EF9 0000169E            609                                   JMP    ADDcode001   *ADD.W                                      
0000166E  4EF9 000016AA            610                                   JMP    ADDcode010   *ADD.L
00001674                           611                                   
00001674  4EF9 000016B6            612                                   JMP    ADDcode011   *ADDA.W
0000167A  4EF9 000016C2            613                                   JMP    ADDcode100   *ADD.B
00001680  4EF9 000016CE            614                                   JMP    ADDcode101   *ADD.W 
00001686  4EF9 000016DA            615                                   JMP    ADDcode110   *ADD.L
0000168C  4EF9 000016E6            616                                   JMP    ADDcode111   *ADDA.L
00001692                           617  
00001692                           618  
00001692  4EB9 00001F40            619  ADDcode000   JSR     ISADDB
00001698  4EB9 000021EA            620               JSR     DONE
0000169E  4EB9 00001F56            621  ADDcode001   JSR     ISADDW  
000016A4  4EB9 000021EA            622               JSR     DONE                                 
000016AA  4EB9 00001F6C            623  ADDcode010   JSR     ISADDL 
000016B0  4EB9 000021EA            624               JSR     DONE  
000016B6  4EB9 00001F14            625  ADDcode011   JSR     ISADDAW
000016BC  4EB9 000021EA            626               JSR     DONE
000016C2  4EB9 00001F40            627  ADDcode100   JSR     ISADDB
000016C8  4EB9 000021EA            628               JSR     DONE
000016CE  4EB9 00001F56            629  ADDcode101   JSR     ISADDW  
000016D4  4EB9 000021EA            630               JSR     DONE                                 
000016DA  4EB9 00001F6C            631  ADDcode110   JSR     ISADDL 
000016E0  4EB9 000021EA            632               JSR     DONE 
000016E6  4EB9 00001F2A            633  ADDcode111   JSR     ISADDAL
000016EC  4EB9 000021EA            634               JSR     DONE
000016F2                           635     
000016F2                           636  ***************************** END  ADD_BorADD_WorADD_L ************************************
000016F2                           637  
000016F2                           638  *****************************  SUB_BorSUB_WorSUB_L ************************************
000016F2  4FF8 7000                639  SUB_BorSUB_WorSUB_L     LEA     STACK,SP            ; Load the SP
000016F6  41F9 0000171C            640                      LEA     tableSUB_BorSUB_WorSUB_L, A0            ; Index into the table
000016FC  4280                     641                      CLR.L   D0                  ; Zero it
000016FE  303C 4C03                642                      MOVE.W  #example,D0         ; We'll play with it here
00001702  123C 0007                643                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001706  E360                     644                      ASL.W   D1,D0            
00001708  123C 000C                645                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000170C  E268                     646                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000170E                           647                                      ; and the rest are zeroed out)           
0000170E  123C 0001                648                      MOVE.B  #1,D1           ; Shift 1 bits right
00001712  E260                     649                      ASR.W   D1,D0 
00001714                           650                      
00001714  C0FC 0006                651                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001718  4EB0 0000                652                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000171C                           653  
0000171C  4EF9 00001746            654  tableSUB_BorSUB_WorSUB_L         JMP    SUBcode000   *SUB.B
00001722  4EF9 00001752            655                                   JMP    SUBcode001   *SUB.W                                      
00001728  4EF9 0000175E            656                                   JMP    SUBcode010   *SUB.L
0000172E                           657                                   
0000172E  4EF9 0000176A            658                                   JMP    SUBcode011   
00001734  4EF9 0000176E            659                                   JMP    SUBcode100   *SUB.B
0000173A  4EF9 0000177A            660                                   JMP    SUBcode101   *SUB.W 
00001740  4EF9 00001786            661                                   JMP    SUBcode110   *SUB.L
00001746                           662     
00001746                           663  
00001746                           664  
00001746  4EB9 00001F82            665  SUBcode000   JSR     ISSUBB
0000174C  4EB9 000021EA            666               JSR     DONE
00001752  4EB9 00001F98            667  SUBcode001   JSR     ISSUBW  
00001758  4EB9 000021EA            668               JSR     DONE                                 
0000175E  4EB9 00001FAE            669  SUBcode010   JSR     ISSUBL 
00001764  4EB9 000021EA            670               JSR     DONE  
0000176A  4E72 2700                671  SUBcode011   STOP  #$2700 
0000176E  4EB9 00001F82            672  SUBcode100   JSR     ISSUBB
00001774  4EB9 000021EA            673               JSR     DONE
0000177A  4EB9 00001F98            674  SUBcode101   JSR     ISSUBW  
00001780  4EB9 000021EA            675               JSR     DONE                                 
00001786  4EB9 00001FAE            676  SUBcode110   JSR     ISSUBL 
0000178C  4EB9 000021EA            677               JSR     DONE 
00001792                           678     
00001792                           679  ***************************** END  SUB_BorSUB_WorSUB_L ************************************
00001792                           680  
00001792                           681  
00001792                           682  ***************************** CMP_BorCMP_WorCMP_L ************************************
00001792  4FF8 7000                683  CMP_BorCMP_WorCMP_L     LEA     STACK,SP            ; Load the SP
00001796  41F9 000017BC            684                      LEA     tableCMP_BorCMP_WorCMP_L, A0            ; Index into the table
0000179C  4280                     685                      CLR.L   D0                  ; Zero it
0000179E  303C 4C03                686                      MOVE.W  #example,D0         ; We'll play with it here
000017A2  123C 0007                687                      MOVE.B  #7,D1           ; Shift 7 bits left 
000017A6  E360                     688                      ASL.W   D1,D0            
000017A8  123C 000C                689                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000017AC  E268                     690                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000017AE                           691                                      ; and the rest are zeroed out)           
000017AE  123C 0001                692                      MOVE.B  #1,D1           ; Shift 1 bits right
000017B2  E260                     693                      ASR.W   D1,D0 
000017B4                           694                      
000017B4  C0FC 0006                695                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000017B8  4EB0 0000                696                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000017BC                           697  
000017BC  4EF9 000017CE            698  tableCMP_BorCMP_WorCMP_L         JMP    CMPcode000   *CMP.B
000017C2  4EF9 000017DA            699                                   JMP    CMPcode001   *CMP.W                                      
000017C8  4EF9 000017E6            700                                   JMP    CMPcode010   *CMP.L
000017CE                           701  
000017CE  4EB9 00001FC4            702  CMPcode000   JSR     ISCMPB
000017D4  4EB9 000021EA            703              JSR     DONE
000017DA  4EB9 00001FDA            704  CMPcode001   JSR     ISCMPW  
000017E0  4EB9 000021EA            705              JSR     DONE                                 
000017E6  4EB9 00001FF0            706  CMPcode010   JSR     ISCMPL 
000017EC  4EB9 000021EA            707              JSR     DONE                    
000017F2                           708  
000017F2                           709  ***************************** END CMP_BorCMP_WorCMP_L ************************************
000017F2                           710  
000017F2                           711  
000017F2                           712  ***************************** ADDQ_BorADDQ_WorADDQ_L ************************************
000017F2  4FF8 7000                713  ADDQ_BorADDQ_WorADDQ_L     LEA     STACK,SP            ; Load the SP
000017F6  41F9 0000181C            714                      LEA     tableADDQ_BorADDQ_WorADDQ_L, A0            ; Index into the table
000017FC  4280                     715                      CLR.L   D0                  ; Zero it
000017FE  303C 4C03                716                      MOVE.W  #example,D0         ; We'll play with it here
00001802  123C 0008                717                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001806  E360                     718                      ASL.W   D1,D0            
00001808  123C 000C                719                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000180C  E268                     720                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000180E                           721                                      ; and the rest are zeroed out)           
0000180E  123C 0002                722                      MOVE.B  #2,D1           ; Shift 2 bits right
00001812  E260                     723                      ASR.W   D1,D0 
00001814                           724                      
00001814  C0FC 0006                725                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001818  4EB0 0000                726                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000181C                           727  
0000181C  4EF9 0000182E            728  tableADDQ_BorADDQ_WorADDQ_L         JMP     ADDQcode00   *ADDQ.B
00001822  4EF9 0000183A            729                                      JMP     ADDQcode01   *ADDQ.W                                      
00001828  4EF9 00001846            730                                      JMP     ADDQcode10   *ADDQ.L
0000182E                           731  
0000182E  4EB9 00002006            732  ADDQcode00   JSR     ISADDQB
00001834  4EB9 000021EA            733              JSR     DONE
0000183A  4EB9 0000201C            734  ADDQcode01   JSR     ISADDQW  
00001840  4EB9 000021EA            735              JSR     DONE                                 
00001846  4EB9 00002032            736  ADDQcode10   JSR     ISADDQL 
0000184C  4EB9 000021EA            737              JSR     DONE                    
00001852                           738  
00001852                           739  ***************************** END ADDQ_BorADDQ_WorADDQ_L ************************************
00001852                           740  
00001852                           741  
00001852                           742  *****************************someCLR ************************************
00001852  4FF8 7000                743  someCLR     LEA     STACK,SP            ; Load the SP
00001856  41F9 0000187C            744                      LEA     tableSomeCLR, A0            ; Index into the table
0000185C  4280                     745                      CLR.L   D0                  ; Zero it
0000185E  303C 4C03                746                      MOVE.W  #example,D0         ; We'll play with it here
00001862  123C 0008                747                      MOVE.B  #8,D1           ; Shift 8 bits left 
00001866  E360                     748                      ASL.W   D1,D0            
00001868  123C 000C                749                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
0000186C  E268                     750                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
0000186E                           751                                      ; and the rest are zeroed out)           
0000186E  123C 0002                752                      MOVE.B  #2,D1           ; Shift 2 bits right
00001872  E260                     753                      ASR.W   D1,D0 
00001874                           754                      
00001874  C0FC 0006                755                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001878  4EB0 0000                756                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
0000187C                           757  
0000187C  4EF9 0000188E            758  tableSomeCLR        JMP     CLRcode00   *CLR.B
00001882  4EF9 0000189A            759                      JMP     CLRcode01   *CLR.W                                      
00001888  4EF9 000018A6            760                      JMP     CLRcode10   *CLR.L
0000188E                           761  
0000188E  4EB9 0000205E            762  CLRcode00   JSR     ISCLRB
00001894  4EB9 000021EA            763              JSR     DONE
0000189A  4EB9 00002074            764  CLRcode01   JSR     ISCLRW  
000018A0  4EB9 000021EA            765              JSR     DONE                                 
000018A6  4EB9 0000208A            766  CLRcode10   JSR     ISCLRL  
000018AC  4EB9 000021EA            767              JSR     DONE                    
000018B2                           768  
000018B2                           769  *****************************END someCLR ************************************
000018B2                           770  
000018B2                           771  *****************************NOPorCLRorRTSorJSR ************************************
000018B2  4FF8 7000                772  NOPorCLRorRTSorJSR     LEA     STACK,SP            ; Load the SP
000018B6  41F9 000018EA            773                      LEA     tableNOPorCLRorRTSorJSR, A0            ; Index into the table
000018BC  4280                     774                      CLR.L   D0                  ; Zero it
000018BE  303C 4C03                775                      MOVE.W  #example,D0         ; We'll play with it here
000018C2                           776                      
000018C2  323C 4E71                777                      MOVE.W  #%0100111001110001,D1  ; 0100111001110001 = NOP
000018C6  B240                     778                      CMP.W   D0, D1
000018C8  6700 008C                779                      BEQ     NOPcommand
000018CC                           780   
000018CC  323C 4E75                781                      MOVE.W  #%0100111001110101,D1  ; 0100111001110101 = RTS
000018D0  B240                     782                      CMP.W   D0, D1
000018D2  6700 0076                783                      BEQ     RTScommand
000018D6                           784    
000018D6  123C 0004                785                      MOVE.B  #4,D1           ; Shift 4 bits left 
000018DA  E360                     786                      ASL.W   D1,D0            
000018DC  123C 000C                787                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000018E0  E268                     788                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000018E2                           789                                      ; and the rest are zeroed out)           
000018E2                           790    
000018E2                           791                      
000018E2  C0FC 0006                792                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000018E6  4EB0 0000                793                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000018EA                           794  
000018EA  4EF9 00001962            795  tableNOPorCLRorRTSorJSR    JMP     JSRorCLRcode0000
000018F0  4EF9 00001966            796                             JMP     JSRorCLRcode0001
000018F6  4EF9 0000196A            797                             JMP     JSRorCLRcode0010   
000018FC  4EF9 00001974            798                             JMP     JSRorCLRcode0011
00001902  4EF9 00001978            799                             JMP     JSRorCLRcode0100
00001908  4EF9 0000197C            800                             JMP     JSRorCLRcode0101
0000190E  4EF9 00001980            801                             JMP     JSRorCLRcode0110
00001914  4EF9 00001984            802                             JMP     JSRorCLRcode0111
0000191A  4EF9 00001988            803                             JMP     JSRorCLRcode1000
00001920  4EF9 0000198C            804                             JMP     JSRorCLRcode1001
00001926  4EF9 00001990            805                             JMP     JSRorCLRcode1010
0000192C  4EF9 00001994            806                             JMP     JSRorCLRcode1011
00001932  4EF9 00001998            807                             JMP     JSRorCLRcode1100
00001938  4EF9 0000199C            808                             JMP     JSRorCLRcode1101
0000193E  4EF9 000019A0            809                             JMP     JSRorCLRcode1110
00001944  4EF9 000019AC            810                             JMP     JSRorCLRcode1111
0000194A                           811  
0000194A  4EB9 000020F8            812  RTScommand          JSR     ISRTS
00001950  4EB9 000021EA            813                      JSR     DONE
00001956  4EB9 00002124            814  NOPcommand          JSR     ISNOP 
0000195C  4EB9 000021EA            815                      JSR     DONE                                                                  
00001962  4E72 2700                816  JSRorCLRcode0000     STOP  #$2700
00001966  4E72 2700                817  JSRorCLRcode0001     STOP  #$2700
0000196A  4EB8 1852                818  JSRorCLRcode0010    JSR      someCLR
0000196E  4EB9 000021EA            819                      JSR     DONE
00001974  4E72 2700                820  JSRorCLRcode0011     STOP  #$2700
00001978  4E72 2700                821  JSRorCLRcode0100     STOP  #$2700
0000197C  4E72 2700                822  JSRorCLRcode0101     STOP  #$2700
00001980  4E72 2700                823  JSRorCLRcode0110     STOP  #$2700
00001984  4E72 2700                824  JSRorCLRcode0111     STOP  #$2700
00001988  4E72 2700                825  JSRorCLRcode1000     STOP  #$2700
0000198C  4E72 2700                826  JSRorCLRcode1001     STOP  #$2700
00001990  4E72 2700                827  JSRorCLRcode1010     STOP  #$2700
00001994  4E72 2700                828  JSRorCLRcode1011     STOP  #$2700
00001998  4E72 2700                829  JSRorCLRcode1100     STOP  #$2700
0000199C  4E72 2700                830  JSRorCLRcode1101     STOP  #$2700
000019A0  4EB9 000020E2            831  JSRorCLRcode1110    JSR     ISJSR
000019A6  4EB9 000021EA            832                      JSR     DONE
000019AC  4E72 2700                833  JSRorCLRcode1111     STOP  #$2700
000019B0                           834  
000019B0                           835  *****************************END NOPorCLRorRTSorJSR ************************************
000019B0                           836  
000019B0                           837  
000019B0                           838  *****************************someMOVEM ************************************
000019B0  4FF8 7000                839  someMOVEM     LEA     STACK,SP            ; Load the SP
000019B4  41F9 000019DA            840                      LEA     tableSomeMOVEM, A0            ; Index into the table
000019BA  4280                     841                      CLR.L   D0                  ; Zero it
000019BC  303C 4C03                842                      MOVE.W  #example,D0         ; We'll play with it here
000019C0  123C 0009                843                      MOVE.B  #9,D1           ; Shift 9 bits left 
000019C4  E360                     844                      ASL.W   D1,D0            
000019C6  123C 000C                845                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
000019CA  E268                     846                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
000019CC                           847                                      ; and the rest are zeroed out)           
000019CC  123C 0003                848                      MOVE.B  #3,D1           ; Shift 3 bits right
000019D0  E260                     849                      ASR.W   D1,D0  
000019D2                           850                      
000019D2  C0FC 0006                851                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
000019D6  4EB0 0000                852                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
000019DA                           853  
000019DA  4EF9 000019E6            854  tableSomeMOVEM    JMP     MOVEMcode0   ;MOVEM.W
000019E0  4EF9 000019F2            855                    JMP     MOVEMcode1   ;MOVEM.L                                      
000019E6                           856                        
000019E6                           857  
000019E6                           858                            
000019E6  4EB9 000020B6            859  MOVEMcode0         JSR     ISMOVEMW
000019EC  4EB9 000021EA            860                      JSR     DONE
000019F2  4EB9 000020A0            861  MOVEMcode1         JSR     ISMOVEML
000019F8  4EB9 000021EA            862                      JSR     DONE
000019FE                           863  
000019FE                           864  *****************************END someMOVEM ************************************
000019FE                           865  
000019FE                           866  *****************************NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
000019FE  4FF8 7000                867  NOP_MOVEM_LEA_JSR_CLR_RTS     LEA     STACK,SP            ; Load the SP
00001A02  41F9 00001A28            868                      LEA     tableNOP_MOVEM_LEA_JSR_CLR_RTS, A0            ; Index into the table
00001A08  4280                     869                      CLR.L   D0                  ; Zero it
00001A0A  303C 4C03                870                      MOVE.W  #example,D0         ; We'll play with it here
00001A0E  123C 0007                871                      MOVE.B  #7,D1           ; Shift 7 bits right 
00001A12  E260                     872                      ASR.W   D1,D0 
00001A14                           873  
00001A14  123C 000D                874                      MOVE.B  #13,D1           ; Shift 13 bits left 
00001A18  E360                     875                      ASL.W   D1,D0            
00001A1A  123C 000C                876                      MOVE.B  #shift,D1           ; Shift 12 bits to the right  
00001A1E  E268                     877                      LSR.W   D1,D0               ; Move the bits (moves highest 4 bits to lowest 4 positions,
00001A20                           878                                      ; and the rest are zeroed out)         
00001A20                           879    
00001A20                           880                      
00001A20  C0FC 0006                881                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001A24  4EB0 0000                882                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001A28                           883  
00001A28  4EF9 00001A82            884  tableNOP_MOVEM_LEA_JSR_CLR_RTS    JMP     LOTScode0000
00001A2E  4EF9 00001A8C            885                                    JMP     LOTScode0001
00001A34  4EF9 00001A90            886                                    JMP     LOTScode0010
00001A3A  4EF9 00001A9A            887                                    JMP     LOTScode0011
00001A40  4EF9 00001A9E            888                                    JMP     LOTScode0100
00001A46  4EF9 00001AA2            889                                    JMP     LOTScode0101
00001A4C  4EF9 00001AA6            890                                    JMP     LOTScode0110
00001A52  4EF9 00001AB2            891                                    JMP     LOTScode0111
00001A58  4EF9 00001AB6            892                                    JMP     LOTScode1000
00001A5E  4EF9 00001AC0            893                                    JMP     LOTScode1001
00001A64  4EF9 00001AC4            894                                    JMP     LOTScode1010
00001A6A  4EF9 00001ACE            895                                    JMP     LOTScode1011
00001A70  4EF9 00001AD2            896                                    JMP     LOTScode1100
00001A76  4EF9 00001AD6            897                                    JMP     LOTScode1101                               JMP     LOTScode1110
00001A7C  4EF9 00001AE6            898                                    JMP     LOTScode1111                           
00001A82                           899                        
00001A82                           900  
00001A82                           901                            
00001A82  4EB8 1114                902  LOTScode0000        JSR   MULSLorDIVUL
00001A86  4EB9 000021EA            903                      JSR    DONE 
00001A8C  4E72 2700                904  LOTScode0001        STOP  #$2700
00001A90  4EB8 19B0                905  LOTScode0010        JSR    someMOVEM
00001A94  4EB9 000021EA            906                      JSR    DONE
00001A9A  4E72 2700                907  LOTScode0011        STOP  #$2700                   
00001A9E  4E72 2700                908  LOTScode0100        STOP  #$2700
00001AA2  4E72 2700                909  LOTScode0101        STOP  #$2700
00001AA6  4EB9 000020CC            910  LOTScode0110        JSR    ISLEA  
00001AAC  4EB9 000021EA            911                      JSR    DONE 
00001AB2  4E72 2700                912  LOTScode0111        STOP  #$2700 
00001AB6  4EB8 18B2                913  LOTScode1000        JSR    NOPorCLRorRTSorJSR
00001ABA  4EB9 000021EA            914                      JSR    DONE
00001AC0  4E72 2700                915  LOTScode1001        STOP  #$2700               
00001AC4  4EB8 18B2                916  LOTScode1010        JSR    NOPorCLRorRTSorJSR
00001AC8  4EB9 000021EA            917                      JSR    DONE
00001ACE  4E72 2700                918  LOTScode1011        STOP  #$2700                   
00001AD2  4E72 2700                919  LOTScode1100        STOP  #$2700
00001AD6  4E72 2700                920  LOTScode1101        STOP  #$2700
00001ADA  4EB9 000020CC            921  LOTScode1110        JSR    ISLEA 
00001AE0  4EB9 000021EA            922                      JSR    DONE
00001AE6  4E72 2700                923  LOTScode1111        STOP  #$2700                
00001AEA                           924                     
00001AEA                           925  *****************************END NOP_MOVEM_LEA_JSR_CLR_RTS ************************************
00001AEA                           926  
00001AEA                           927  
00001AEA                           928  *****************************ADDI_BorADDI_WorADDI_L ************************************
00001AEA  4FF8 7000                929  ADDI_BorADDI_WorADDI_L     LEA     STACK,SP            ; Load the SP
00001AEE  41F9 00001B0E            930                      LEA     tableADDI_BorADDI_WorADDI_L,A0            ; Index into the table
00001AF4  4280                     931                      CLR.L   D0                  ; Zero it
00001AF6  303C 4C03                932                      MOVE.W  #example,D0         ; We'll play with it here
00001AFA  123C 0007                933                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001AFE  E360                     934                      ASL.W   D1,D0            
00001B00  123C 000D                935                      MOVE.B  #13,D1           
00001B04  E260                     936                      ASR.W   D1,D0             
00001B06                           937    
00001B06                           938                      
00001B06  C0FC 0006                939                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B0A  4EB0 0000                940                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001B0E                           941  
00001B0E  4EF9 00001B20            942  tableADDI_BorADDI_WorADDI_L    JMP     ADDIBcode00
00001B14  4EF9 00001B2C            943                                 JMP     ADDIWcode01
00001B1A  4EF9 00001B38            944                                 JMP     ADDILcode10
00001B20                           945  
00001B20                           946                            
00001B20  4EB9 000021D4            947  ADDIBcode00        JSR     ISADDIB
00001B26  4EB9 000021EA            948                      JSR    DONE
00001B2C  4EB9 000021A8            949  ADDIWcode01        JSR     ISADDIW
00001B32  4EB9 000021EA            950                      JSR    DONE
00001B38  4EB9 000021BE            951  ADDILcode10        JSR     ISADDIL
00001B3E  4EB9 000021EA            952                      JSR    DONE
00001B44                           953  
00001B44                           954  *****************************END ADDI_BorADDI_WorADDI_L ************************************
00001B44                           955  
00001B44                           956  
00001B44                           957  
00001B44                           958  
00001B44                           959  *****************************MOVEA_LorMOVE_L ************************************
00001B44  4FF8 7000                960  MOVEA_LorMOVE_L     LEA     STACK,SP            ; Load the SP
00001B48  41F9 00001B68            961                      LEA     tableMOVEA_LorMOVE_L,A0            ; Index into the table
00001B4E  4280                     962                      CLR.L   D0                  ; Zero it
00001B50  303C 4C03                963                      MOVE.W  #example,D0         ; We'll play with it here
00001B54  123C 0007                964                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001B58  E360                     965                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001B5A  123C 000D                966                      MOVE.B  #13,D1           ; Shift 13 bits right
00001B5E  E260                     967                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001B60                           968    
00001B60                           969                      
00001B60  C0FC 0006                970                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001B64  4EB0 0000                971                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001B68                           972  
00001B68  4EF9 00001B98            973  tableMOVEA_LorMOVE_L    JMP     MOVEcode000
00001B6E  4EF9 00001BA4            974                          JMP     MOVEAcode001
00001B74  4EF9 00001BB0            975                          JMP     MOVEcode010
00001B7A  4EF9 00001BBC            976                          JMP     MOVEcode011
00001B80  4EF9 00001BC8            977                          JMP     MOVEcode100
00001B86  4EF9 00001BD4            978                          JMP     MOVEcode101
00001B8C  4EF9 00001BE0            979                          JMP     MOVEcode110
00001B92  4EF9 00001BEC            980                          JMP     MOVEcode111
00001B98                           981                            
00001B98  4EB9 00002166            982  MOVEcode000     JSR     ISMOVEL
00001B9E  4EB9 000021EA            983                  JSR    DONE
00001BA4  4EB9 0000217C            984  MOVEAcode001    JSR     ISMOVEAL
00001BAA  4EB9 000021EA            985                  JSR    DONE
00001BB0  4EB9 00002166            986  MOVEcode010     JSR     ISMOVEL
00001BB6  4EB9 000021EA            987                  JSR    DONE
00001BBC  4EB9 00002166            988  MOVEcode011     JSR     ISMOVEL
00001BC2  4EB9 000021EA            989                  JSR    DONE
00001BC8  4EB9 00002166            990  MOVEcode100     JSR     ISMOVEL
00001BCE  4EB9 000021EA            991                  JSR    DONE
00001BD4  4EB9 00002166            992  MOVEcode101     JSR     ISMOVEL
00001BDA  4EB9 000021EA            993                  JSR    DONE
00001BE0  4EB9 00002166            994  MOVEcode110     JSR     ISMOVEL
00001BE6  4EB9 000021EA            995                  JSR    DONE
00001BEC  4EB9 00002166            996  MOVEcode111     JSR     ISMOVEL 
00001BF2  4EB9 000021EA            997                  JSR    DONE
00001BF8                           998  *****************************END MOVEA_LorMOVE_L ************************************
00001BF8                           999  
00001BF8                          1000  *****************************MOVEA_WorMOVE_W ************************************
00001BF8  4FF8 7000               1001  MOVEA_WorMOVE_W     LEA     STACK,SP            ; Load the SP
00001BFC  41F9 00001C1C           1002                      LEA     tableMOVEA_WorMOVE_W,A0            ; Index into the table
00001C02  4280                    1003                      CLR.L   D0                  ; Zero it
00001C04  303C 4C03               1004                      MOVE.W  #example,D0         ; We'll play with it here
00001C08  123C 0007               1005                      MOVE.B  #7,D1           ; Shift 7 bits left 
00001C0C  E360                    1006                      ASL.W   D1,D0            ; 0011 1010 0100 0100 to 0010 0000 0000 0000
00001C0E  123C 000D               1007                      MOVE.B  #13,D1           ; Shift 13 bits right
00001C12  E260                    1008                      ASR.W   D1,D0             ; 0010 0000 0000 0000 to 0000 0000 0000 0001
00001C14                          1009    
00001C14                          1010                      
00001C14  C0FC 0006               1011                      MULU    #6,D0               ; Form offset (move 6 bytes in memory for every 'JMP' command)
00001C18  4EB0 0000               1012                      JSR     0(A0,D0)            ; Jump indirect with index, i.e. jump to 'table' + displacement                
00001C1C                          1013  
00001C1C  4EF9 00001C4C           1014  tableMOVEA_WorMOVE_W    JMP     MOVEWcode000
00001C22  4EF9 00001C58           1015                          JMP     MOVEAWcode001
00001C28  4EF9 00001C64           1016                          JMP     MOVEWcode010
00001C2E  4EF9 00001C70           1017                          JMP     MOVEWcode011
00001C34  4EF9 00001C7C           1018                          JMP     MOVEWcode100
00001C3A  4EF9 00001C88           1019                          JMP     MOVEWcode101
00001C40  4EF9 00001C94           1020                          JMP     MOVEWcode110
00001C46  4EF9 00001CA0           1021                          JMP     MOVEWcode111
00001C4C                          1022                            
00001C4C  4EB9 0000213A           1023  MOVEWcode000     JSR     ISMOVEW
00001C52  4EB9 000021EA           1024                  JSR    DONE
00001C58  4EB9 00002150           1025  MOVEAWcode001    JSR     ISMOVEAW
00001C5E  4EB9 000021EA           1026                  JSR    DONE
00001C64  4EB9 0000213A           1027  MOVEWcode010     JSR     ISMOVEW
00001C6A  4EB9 000021EA           1028                  JSR    DONE
00001C70  4EB9 0000213A           1029  MOVEWcode011     JSR     ISMOVEW
00001C76  4EB9 000021EA           1030                  JSR    DONE
00001C7C  4EB9 0000213A           1031  MOVEWcode100     JSR     ISMOVEW
00001C82  4EB9 000021EA           1032                  JSR    DONE
00001C88  4EB9 0000213A           1033  MOVEWcode101     JSR     ISMOVEW
00001C8E  4EB9 000021EA           1034                  JSR    DONE
00001C94  4EB9 0000213A           1035  MOVEWcode110     JSR     ISMOVEW
00001C9A  4EB9 000021EA           1036                  JSR    DONE
00001CA0  4EB9 0000213A           1037  MOVEWcode111     JSR     ISMOVEW 
00001CA6  4EB9 000021EA           1038                  JSR    DONE
00001CAC                          1039  *****************************END MOVEA_WorMOVE_W ************************************
00001CAC  48A7 FFFF               1040  ISDIVUL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CB0  43F9 000023DB           1041              LEA MESSAGEDIVUL, A1         
00001CB6  103C 000E               1042              MOVE.B  #14, D0
00001CBA  4E4F                    1043              TRAP    #15
00001CBC                          1044     
00001CBC  4C9F FFFF               1045              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CC0  4E75                    1046              RTS
00001CC2                          1047  
00001CC2  48A7 FFFF               1048  ISDIVUW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CC6  43F9 000023D2           1049              LEA MESSAGEDIVUW, A1         
00001CCC  103C 000E               1050              MOVE.B  #14, D0
00001CD0  4E4F                    1051              TRAP    #15
00001CD2                          1052     
00001CD2  4C9F FFFF               1053              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CD6  4E75                    1054              RTS
00001CD8                          1055  
00001CD8  48A7 FFFF               1056  ISORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CDC  43F9 000023BD           1057              LEA MESSAGEORB, A1         
00001CE2  103C 000E               1058              MOVE.B  #14, D0
00001CE6  4E4F                    1059              TRAP    #15
00001CE8                          1060     
00001CE8  4C9F FFFF               1061              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001CEC  4E75                    1062              RTS
00001CEE                          1063  
00001CEE  48A7 FFFF               1064  ISORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001CF2  43F9 000023C4           1065              LEA MESSAGEORW, A1         
00001CF8  103C 000E               1066              MOVE.B  #14, D0
00001CFC  4E4F                    1067              TRAP    #15
00001CFE                          1068     
00001CFE  4C9F FFFF               1069              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D02  4E75                    1070              RTS
00001D04                          1071              
00001D04  48A7 FFFF               1072  ISORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D08  43F9 000023CB           1073              LEA MESSAGEORL, A1         
00001D0E  103C 000E               1074              MOVE.B  #14, D0
00001D12  4E4F                    1075              TRAP    #15
00001D14                          1076     
00001D14  4C9F FFFF               1077              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D18  4E75                    1078              RTS 
00001D1A                          1079  
00001D1A  48A7 FFFF               1080  ISASRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D1E  43F9 0000232D           1081              LEA MESSAGEASRB, A1         
00001D24  103C 000E               1082              MOVE.B  #14, D0
00001D28  4E4F                    1083              TRAP    #15
00001D2A                          1084     
00001D2A  4C9F FFFF               1085              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D2E  4E75                    1086              RTS
00001D30                          1087  
00001D30  48A7 FFFF               1088  ISASRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D34  43F9 00002335           1089              LEA MESSAGEASRW, A1         
00001D3A  103C 000E               1090              MOVE.B  #14, D0
00001D3E  4E4F                    1091              TRAP    #15
00001D40                          1092     
00001D40  4C9F FFFF               1093              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D44  4E75                    1094              RTS
00001D46                          1095              
00001D46  48A7 FFFF               1096  ISASRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D4A  43F9 0000233D           1097              LEA MESSAGEASRL, A1         
00001D50  103C 000E               1098              MOVE.B  #14, D0
00001D54  4E4F                    1099              TRAP    #15
00001D56                          1100     
00001D56  4C9F FFFF               1101              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D5A  4E75                    1102              RTS 
00001D5C                          1103  
00001D5C  48A7 FFFF               1104  ISASLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D60  43F9 00002345           1105              LEA MESSAGEASLB, A1         
00001D66  103C 000E               1106              MOVE.B  #14, D0
00001D6A  4E4F                    1107              TRAP    #15
00001D6C                          1108     
00001D6C  4C9F FFFF               1109              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D70  4E75                    1110              RTS
00001D72                          1111  
00001D72  48A7 FFFF               1112  ISASLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D76  43F9 0000234D           1113              LEA MESSAGEASLW, A1         
00001D7C  103C 000E               1114              MOVE.B  #14, D0
00001D80  4E4F                    1115              TRAP    #15
00001D82                          1116     
00001D82  4C9F FFFF               1117              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D86  4E75                    1118              RTS
00001D88                          1119              
00001D88  48A7 FFFF               1120  ISASLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001D8C  43F9 00002355           1121              LEA MESSAGEASLL, A1         
00001D92  103C 000E               1122              MOVE.B  #14, D0
00001D96  4E4F                    1123              TRAP    #15
00001D98                          1124     
00001D98  4C9F FFFF               1125              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001D9C  4E75                    1126              RTS 
00001D9E                          1127              
00001D9E  48A7 FFFF               1128  ISLSRB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DA2  43F9 0000238D           1129              LEA MESSAGELSRB, A1         
00001DA8  103C 000E               1130              MOVE.B  #14, D0
00001DAC  4E4F                    1131              TRAP    #15
00001DAE                          1132     
00001DAE  4C9F FFFF               1133              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DB2  4E75                    1134              RTS
00001DB4                          1135  
00001DB4  48A7 FFFF               1136  ISLSRW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DB8  43F9 00002395           1137              LEA MESSAGELSRW, A1         
00001DBE  103C 000E               1138              MOVE.B  #14, D0
00001DC2  4E4F                    1139              TRAP    #15
00001DC4                          1140     
00001DC4  4C9F FFFF               1141              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DC8  4E75                    1142              RTS
00001DCA                          1143              
00001DCA  48A7 FFFF               1144  ISLSRL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DCE  43F9 0000239D           1145              LEA MESSAGELSRL, A1         
00001DD4  103C 000E               1146              MOVE.B  #14, D0
00001DD8  4E4F                    1147              TRAP    #15
00001DDA                          1148     
00001DDA  4C9F FFFF               1149              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DDE  4E75                    1150              RTS 
00001DE0                          1151  
00001DE0  48A7 FFFF               1152  ISLSLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DE4  43F9 000023A5           1153              LEA MESSAGELSLB, A1         
00001DEA  103C 000E               1154              MOVE.B  #14, D0
00001DEE  4E4F                    1155              TRAP    #15
00001DF0                          1156     
00001DF0  4C9F FFFF               1157              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001DF4  4E75                    1158              RTS
00001DF6                          1159  
00001DF6  48A7 FFFF               1160  ISLSLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001DFA  43F9 000023AD           1161              LEA MESSAGELSLW, A1        
00001E00  103C 000E               1162              MOVE.B  #14, D0
00001E04  4E4F                    1163              TRAP    #15
00001E06                          1164     
00001E06  4C9F FFFF               1165              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E0A  4E75                    1166              RTS
00001E0C                          1167              
00001E0C  48A7 FFFF               1168  ISLSLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E10  43F9 000023B5           1169              LEA MESSAGELSLL, A1         
00001E16  103C 000E               1170              MOVE.B  #14, D0
00001E1A  4E4F                    1171              TRAP    #15
00001E1C                          1172     
00001E1C  4C9F FFFF               1173              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E20  4E75                    1174              RTS 
00001E22                          1175  
00001E22  48A7 FFFF               1176  ISRORB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E26  43F9 0000235D           1177              LEA MESSAGERORB, A1         
00001E2C  103C 000E               1178              MOVE.B  #14, D0
00001E30  4E4F                    1179              TRAP    #15
00001E32                          1180     
00001E32  4C9F FFFF               1181              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E36  4E75                    1182              RTS
00001E38                          1183  
00001E38  48A7 FFFF               1184  ISRORW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E3C  43F9 00002365           1185              LEA MESSAGERORW, A1         
00001E42  103C 000E               1186              MOVE.B  #14, D0
00001E46  4E4F                    1187              TRAP    #15
00001E48                          1188     
00001E48  4C9F FFFF               1189              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E4C  4E75                    1190              RTS
00001E4E                          1191              
00001E4E  48A7 FFFF               1192  ISRORL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E52  43F9 0000236D           1193              LEA MESSAGERORL, A1         
00001E58  103C 000E               1194              MOVE.B  #14, D0
00001E5C  4E4F                    1195              TRAP    #15
00001E5E                          1196     
00001E5E  4C9F FFFF               1197              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E62  4E75                    1198              RTS 
00001E64                          1199  
00001E64  48A7 FFFF               1200  ISROLB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E68  43F9 00002375           1201              LEA MESSAGEROLB, A1         
00001E6E  103C 000E               1202              MOVE.B  #14, D0
00001E72  4E4F                    1203              TRAP    #15
00001E74                          1204     
00001E74  4C9F FFFF               1205              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E78  4E75                    1206              RTS
00001E7A                          1207  
00001E7A  48A7 FFFF               1208  ISROLW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E7E  43F9 0000237D           1209              LEA MESSAGEROLW, A1         
00001E84  103C 000E               1210              MOVE.B  #14, D0
00001E88  4E4F                    1211              TRAP    #15
00001E8A                          1212     
00001E8A  4C9F FFFF               1213              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001E8E  4E75                    1214              RTS
00001E90                          1215              
00001E90  48A7 FFFF               1216  ISROLL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001E94  43F9 00002385           1217              LEA MESSAGEROLL, A1         
00001E9A  103C 000E               1218              MOVE.B  #14, D0
00001E9E  4E4F                    1219              TRAP    #15
00001EA0                          1220     
00001EA0  4C9F FFFF               1221              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EA4  4E75                    1222              RTS 
00001EA6                          1223  
00001EA6  48A7 FFFF               1224  ISMULSL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EAA  43F9 00002324           1225              LEA MESSAGEMULSL, A1         *OPCODE is MULS.L
00001EB0  103C 000E               1226              MOVE.B  #14, D0
00001EB4  4E4F                    1227              TRAP    #15
00001EB6                          1228     
00001EB6  4C9F FFFF               1229              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EBA  4E75                    1230              RTS
00001EBC                          1231  
00001EBC  48A7 FFFF               1232  ISMULSW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EC0  43F9 0000231B           1233              LEA MESSAGEMULSW, A1         *OPCODE is MULS.W
00001EC6  103C 000E               1234              MOVE.B  #14, D0
00001ECA  4E4F                    1235              TRAP    #15
00001ECC                          1236     
00001ECC  4C9F FFFF               1237              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001ED0  4E75                    1238              RTS
00001ED2                          1239  
00001ED2  48A7 FFFF               1240  ISANDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001ED6  43F9 00002303           1241              LEA MESSAGEANDB, A1         *OPCODE is AND.B
00001EDC  103C 000E               1242              MOVE.B  #14, D0
00001EE0  4E4F                    1243              TRAP    #15
00001EE2                          1244     
00001EE2  4C9F FFFF               1245              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EE6  4E75                    1246              RTS
00001EE8                          1247  
00001EE8  48A7 FFFF               1248  ISANDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001EEC  43F9 0000230B           1249              LEA MESSAGEANDW, A1         *OPCODE is AND.W
00001EF2  103C 000E               1250              MOVE.B  #14, D0
00001EF6  4E4F                    1251              TRAP    #15
00001EF8                          1252     
00001EF8  4C9F FFFF               1253              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001EFC  4E75                    1254              RTS
00001EFE                          1255              
00001EFE  48A7 FFFF               1256  ISANDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F02  43F9 00002313           1257              LEA MESSAGEANDL, A1         *OPCODE is AND.L
00001F08  103C 000E               1258              MOVE.B  #14, D0
00001F0C  4E4F                    1259              TRAP    #15
00001F0E                          1260     
00001F0E  4C9F FFFF               1261              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F12  4E75                    1262              RTS  
00001F14                          1263  
00001F14  48A7 FFFF               1264  ISADDAW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F18  43F9 000022E7           1265              LEA MESSAGEADDAW, A1         *OPCODE is ADDA.W
00001F1E  103C 000E               1266              MOVE.B  #14, D0
00001F22  4E4F                    1267              TRAP    #15
00001F24                          1268     
00001F24  4C9F FFFF               1269              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F28  4E75                    1270              RTS
00001F2A                          1271              
00001F2A  48A7 FFFF               1272  ISADDAL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F2E  43F9 000022F0           1273              LEA MESSAGEADDAL, A1         *OPCODE is ADDA.L
00001F34  103C 000E               1274              MOVE.B  #14, D0
00001F38  4E4F                    1275              TRAP    #15
00001F3A                          1276     
00001F3A  4C9F FFFF               1277              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F3E  4E75                    1278              RTS 
00001F40                          1279  
00001F40  48A7 FFFF               1280  ISADDB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F44  43F9 000022CF           1281              LEA MESSAGEADDB, A1         *OPCODE is ADD.B
00001F4A  103C 000E               1282              MOVE.B  #14, D0
00001F4E  4E4F                    1283              TRAP    #15
00001F50                          1284     
00001F50  4C9F FFFF               1285              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F54  4E75                    1286              RTS
00001F56                          1287  
00001F56  48A7 FFFF               1288  ISADDW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F5A  43F9 000022D7           1289              LEA MESSAGEADDW, A1         *OPCODE is ADD.W
00001F60  103C 000E               1290              MOVE.B  #14, D0
00001F64  4E4F                    1291              TRAP    #15
00001F66                          1292     
00001F66  4C9F FFFF               1293              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F6A  4E75                    1294              RTS
00001F6C                          1295              
00001F6C  48A7 FFFF               1296  ISADDL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F70  43F9 000022DF           1297              LEA MESSAGEADDL, A1         *OPCODE is ADD.L
00001F76  103C 000E               1298              MOVE.B  #14, D0
00001F7A  4E4F                    1299              TRAP    #15
00001F7C                          1300     
00001F7C  4C9F FFFF               1301              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F80  4E75                    1302              RTS  
00001F82                          1303  
00001F82  48A7 FFFF               1304  ISSUBB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F86  43F9 000022B7           1305              LEA MESSAGESUBB, A1         *OPCODE is SUB.B
00001F8C  103C 000E               1306              MOVE.B  #14, D0
00001F90  4E4F                    1307              TRAP    #15
00001F92                          1308     
00001F92  4C9F FFFF               1309              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001F96  4E75                    1310              RTS
00001F98                          1311  
00001F98  48A7 FFFF               1312  ISSUBW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001F9C  43F9 000022BF           1313              LEA MESSAGESUBW, A1         *OPCODE is SUB.W
00001FA2  103C 000E               1314              MOVE.B  #14, D0
00001FA6  4E4F                    1315              TRAP    #15
00001FA8                          1316     
00001FA8  4C9F FFFF               1317              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FAC  4E75                    1318              RTS
00001FAE                          1319              
00001FAE  48A7 FFFF               1320  ISSUBL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FB2  43F9 000022C7           1321              LEA MESSAGESUBL, A1         *OPCODE is SUB.L
00001FB8  103C 000E               1322              MOVE.B  #14, D0
00001FBC  4E4F                    1323              TRAP    #15
00001FBE                          1324     
00001FBE  4C9F FFFF               1325              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FC2  4E75                    1326              RTS  
00001FC4                          1327  
00001FC4  48A7 FFFF               1328  ISCMPB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FC8  43F9 0000229F           1329              LEA MESSAGECMPB, A1         *OPCODE is CMP.B
00001FCE  103C 000E               1330              MOVE.B  #14, D0
00001FD2  4E4F                    1331              TRAP    #15
00001FD4                          1332     
00001FD4  4C9F FFFF               1333              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FD8  4E75                    1334              RTS
00001FDA                          1335  
00001FDA  48A7 FFFF               1336  ISCMPW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FDE  43F9 000022A7           1337              LEA MESSAGECMPW, A1         *OPCODE is CMP.W
00001FE4  103C 000E               1338              MOVE.B  #14, D0
00001FE8  4E4F                    1339              TRAP    #15
00001FEA                          1340     
00001FEA  4C9F FFFF               1341              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00001FEE  4E75                    1342              RTS
00001FF0                          1343              
00001FF0  48A7 FFFF               1344  ISCMPL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00001FF4  43F9 000022AF           1345              LEA MESSAGECMPL, A1         *OPCODE is CMP.L
00001FFA  103C 000E               1346              MOVE.B  #14, D0
00001FFE  4E4F                    1347              TRAP    #15
00002000                          1348     
00002000  4C9F FFFF               1349              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002004  4E75                    1350              RTS    
00002006                          1351  
00002006  48A7 FFFF               1352  ISADDQB  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000200A  43F9 00002284           1353              LEA MESSAGEADDQB, A1         *OPCODE is ADDQ.B
00002010  103C 000E               1354              MOVE.B  #14, D0
00002014  4E4F                    1355              TRAP    #15
00002016                          1356     
00002016  4C9F FFFF               1357              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000201A  4E75                    1358              RTS
0000201C                          1359  
0000201C  48A7 FFFF               1360  ISADDQW  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002020  43F9 0000228D           1361              LEA MESSAGEADDQW, A1         *OPCODE is ADDQ.W
00002026  103C 000E               1362              MOVE.B  #14, D0
0000202A  4E4F                    1363              TRAP    #15
0000202C                          1364     
0000202C  4C9F FFFF               1365              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002030  4E75                    1366              RTS
00002032                          1367              
00002032  48A7 FFFF               1368  ISADDQL  MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002036  43F9 00002296           1369              LEA MESSAGEADDQL, A1         *OPCODE is ADDQ.L
0000203C  103C 000E               1370              MOVE.B  #14, D0
00002040  4E4F                    1371              TRAP    #15
00002042                          1372     
00002042  4C9F FFFF               1373              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002046  4E75                    1374              RTS            
00002048                          1375              
00002048  48A7 FFFF               1376  ISMOVEQL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000204C  43F9 000022F9           1377              LEA MESSAGEMOVEQL, A1         *OPCODE is MOVEQ.L
00002052  103C 000E               1378              MOVE.B  #14, D0
00002056  4E4F                    1379              TRAP    #15
00002058                          1380     
00002058  4C9F FFFF               1381              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000205C  4E75                    1382              RTS
0000205E                          1383  
0000205E  48A7 FFFF               1384  ISCLRB    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002062  43F9 0000226C           1385              LEA MESSAGECLRB, A1         *OPCODE is CLR.B
00002068  103C 000E               1386              MOVE.B  #14, D0
0000206C  4E4F                    1387              TRAP    #15
0000206E                          1388     
0000206E  4C9F FFFF               1389              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002072  4E75                    1390              RTS
00002074                          1391  
00002074  48A7 FFFF               1392  ISCLRW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002078  43F9 00002274           1393              LEA MESSAGECLRW, A1         *OPCODE is CLR.W
0000207E  103C 000E               1394              MOVE.B  #14, D0
00002082  4E4F                    1395              TRAP    #15
00002084                          1396     
00002084  4C9F FFFF               1397              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002088  4E75                    1398              RTS
0000208A                          1399  
0000208A  48A7 FFFF               1400  ISCLRL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000208E  43F9 0000227C           1401              LEA MESSAGECLRL, A1         *OPCODE is CLR.L
00002094  103C 000E               1402              MOVE.B  #14, D0
00002098  4E4F                    1403              TRAP    #15
0000209A                          1404     
0000209A  4C9F FFFF               1405              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000209E  4E75                    1406              RTS
000020A0                          1407              
000020A0  48A7 FFFF               1408  ISMOVEML    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020A4  43F9 00002240           1409              LEA MESSAGEMOVEML, A1         *OPCODE is MOVEM.L 
000020AA  103C 000E               1410              MOVE.B  #14, D0
000020AE  4E4F                    1411              TRAP    #15
000020B0                          1412     
000020B0  4C9F FFFF               1413              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020B4  4E75                    1414              RTS
000020B6                          1415  
000020B6  48A7 FFFF               1416  ISMOVEMW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020BA  43F9 0000224A           1417              LEA MESSAGEMOVEMW, A1         *OPCODE is MOVEM.W 
000020C0  103C 000E               1418              MOVE.B  #14, D0
000020C4  4E4F                    1419              TRAP    #15
000020C6                          1420     
000020C6  4C9F FFFF               1421              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020CA  4E75                    1422              RTS  
000020CC                          1423  
000020CC  48A7 FFFF               1424  ISLEA    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020D0  43F9 00002266           1425              LEA MESSAGELEA, A1         *OPCODE is LEA so display LEA message
000020D6  103C 000E               1426              MOVE.B  #14, D0
000020DA  4E4F                    1427              TRAP    #15
000020DC                          1428     
000020DC  4C9F FFFF               1429              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020E0  4E75                    1430              RTS                          ; Exit subroutine
000020E2                          1431  
000020E2  48A7 FFFF               1432  ISJSR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020E6  43F9 00002254           1433              LEA MESSAGEJSR, A1         *OPCODE is NOP so display NOP message
000020EC  103C 000E               1434              MOVE.B  #14, D0
000020F0  4E4F                    1435              TRAP    #15
000020F2  4C9F FFFF               1436              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000020F6  4E75                    1437              RTS                          ; Exit subroutine
000020F8                          1438              
000020F8  48A7 FFFF               1439  ISRTS       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000020FC  43F9 00002260           1440              LEA MESSAGERTS, A1         *OPCODE is RTS
00002102  103C 000E               1441              MOVE.B  #14, D0
00002106  4E4F                    1442              TRAP    #15
00002108  4C9F FFFF               1443              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000210C  4E75                    1444              RTS  
0000210E                          1445  
0000210E  48A7 FFFF               1446  ISCLR       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002112  43F9 0000225A           1447              LEA MESSAGECLR, A1         *OPCODE is CLR
00002118  103C 000E               1448              MOVE.B  #14, D0
0000211C  4E4F                    1449              TRAP    #15
0000211E  4C9F FFFF               1450              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002122  4E75                    1451              RTS  
00002124                          1452              
00002124  48A7 FFFF               1453  ISNOP       MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002128  43F9 000021F0           1454              LEA MESSAGENOP, A1         *OPCODE is NOP so display NOP message
0000212E  103C 000E               1455              MOVE.B  #14, D0
00002132  4E4F                    1456              TRAP    #15
00002134  4C9F FFFF               1457              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002138  4E75                    1458              RTS                          ; Exit subroutine
0000213A                          1459           
0000213A  48A7 FFFF               1460  ISMOVEW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000213E  43F9 000021F6           1461              LEA MESSAGEMOVEW, A1         *OPCODE is MOVE.W so display MOVEW message
00002144  103C 000E               1462              MOVE.B  #14, D0
00002148  4E4F                    1463              TRAP    #15
0000214A                          1464     
0000214A  4C9F FFFF               1465              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000214E  4E75                    1466              RTS                          ; Exit subroutine
00002150                          1467              
00002150  48A7 FFFF               1468  ISMOVEAW    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002154  43F9 00002236           1469              LEA MESSAGEMOVEAW, A1         *OPCODE is MOVEA.W so display MOVEA.W message
0000215A  103C 000E               1470              MOVE.B  #14, D0
0000215E  4E4F                    1471              TRAP    #15
00002160                          1472     
00002160  4C9F FFFF               1473              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002164  4E75                    1474              RTS                          ; Exit subroutine
00002166                          1475              
00002166  48A7 FFFF               1476  ISMOVEL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
0000216A  43F9 000021FF           1477              LEA MESSAGEMOVEL, A1         *OPCODE is MOVE.L so display MOVE.L message
00002170  103C 000E               1478              MOVE.B  #14, D0
00002174  4E4F                    1479              TRAP    #15
00002176                          1480              
00002176  4C9F FFFF               1481              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
0000217A  4E75                    1482              RTS                          ; Exit subroutine
0000217C                          1483              
0000217C  48A7 FFFF               1484  ISMOVEAL    MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002180  43F9 0000222C           1485              LEA MESSAGEMOVEAL, A1         *OPCODE is MOVEA.L so display MOVEA.L message
00002186  103C 000E               1486              MOVE.B  #14, D0
0000218A  4E4F                    1487              TRAP    #15
0000218C                          1488              
0000218C  4C9F FFFF               1489              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
00002190  4E75                    1490              RTS                          ; Exit subroutine
00002192                          1491         
00002192  48A7 FFFF               1492  ISMOVEB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
00002196  43F9 00002208           1493              LEA MESSAGEMOVEB, A1         *OPCODE is MOVE.B so display MOVEB message
0000219C  103C 000E               1494              MOVE.B  #14, D0
000021A0  4E4F                    1495              TRAP    #15
000021A2                          1496              
000021A2  4C9F FFFF               1497              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021A6  4E75                    1498              RTS                          ; Exit subroutine
000021A8                          1499           
000021A8  48A7 FFFF               1500  ISADDIW     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021AC  43F9 00002211           1501              LEA MESSAGEADDIW, A1         *OPCODE is ADDI.W so display ADDI.W message
000021B2  103C 000E               1502              MOVE.B  #14, D0
000021B6  4E4F                    1503              TRAP    #15
000021B8                          1504              
000021B8  4C9F FFFF               1505              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021BC  4E75                    1506              RTS                          ; Exit subroutine
000021BE                          1507              
000021BE  48A7 FFFF               1508  ISADDIL     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021C2  43F9 0000221A           1509              LEA MESSAGEADDIL, A1         *OPCODE is ADDI.L so display ADDI.L message
000021C8  103C 000E               1510              MOVE.B  #14, D0
000021CC  4E4F                    1511              TRAP    #15
000021CE                          1512              
000021CE  4C9F FFFF               1513              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021D2  4E75                    1514              RTS                          ; Exit subroutine
000021D4                          1515                  
000021D4  48A7 FFFF               1516  ISADDIB     MOVEM.W     A0-A7/D0-D7, -(SP) ; Save registers
000021D8  43F9 00002223           1517              LEA MESSAGEADDIB, A1         *OPCODE is ADDI.B so display ADDI.B message
000021DE  103C 000E               1518              MOVE.B  #14, D0
000021E2  4E4F                    1519              TRAP    #15
000021E4                          1520              
000021E4  4C9F FFFF               1521              MOVEM.W (SP)+,  A0-A7/D0-D7         ; Restore registers
000021E8  4E75                    1522              RTS                          ; Exit subroutine
000021EA                          1523                        
000021EA  103C 0009               1524  DONE        MOVE.B      #9, D0
000021EE  4E4F                    1525              TRAP        #15
000021F0                          1526  
000021F0  =0000000D               1527  CR  EQU     $0D 
000021F0  =0000000A               1528  LF  EQU     $0A
000021F0= 4E 4F 50 0D 0A 00       1529  MESSAGENOP DC.B    'NOP',CR,LF, 0    
000021F6                          1530      
000021F6= 4D 4F 56 45 2E 57 ...   1531  MESSAGEMOVEW DC.B    'MOVE.W',CR,LF, 0    
000021FF= 4D 4F 56 45 2E 4C ...   1532  MESSAGEMOVEL DC.B    'MOVE.L',CR,LF, 0 
00002208= 4D 4F 56 45 2E 42 ...   1533  MESSAGEMOVEB DC.B    'MOVE.B',CR,LF, 0       
00002211                          1534  
00002211= 41 44 44 49 2E 57 ...   1535  MESSAGEADDIW DC.B    'ADDI.W',CR,LF, 0    
0000221A= 41 44 44 49 2E 4C ...   1536  MESSAGEADDIL DC.B    'ADDI.L',CR,LF, 0 
00002223= 41 44 44 49 2E 42 ...   1537  MESSAGEADDIB DC.B    'ADDI.B',CR,LF, 0 
0000222C                          1538  
0000222C= 4D 4F 56 45 41 2E ...   1539  MESSAGEMOVEAL DC.B    'MOVEA.L',CR,LF, 0 
00002236= 4D 4F 56 45 41 2E ...   1540  MESSAGEMOVEAW DC.B    'MOVEA.W',CR,LF, 0 
00002240                          1541  
00002240= 4D 4F 56 45 4D 2E ...   1542  MESSAGEMOVEML DC.B    'MOVEM.L',CR,LF, 0 
0000224A= 4D 4F 56 45 4D 2E ...   1543  MESSAGEMOVEMW DC.B    'MOVEM.W',CR,LF, 0 
00002254                          1544  
00002254= 4A 53 52 0D 0A 00       1545  MESSAGEJSR DC.B    'JSR',CR,LF, 0 
0000225A                          1546  
0000225A= 43 4C 52 0D 0A 00       1547  MESSAGECLR DC.B    'CLR',CR,LF, 0
00002260                          1548  
00002260= 52 54 53 0D 0A 00       1549  MESSAGERTS DC.B    'RTS',CR,LF, 0
00002266                          1550  
00002266= 4C 45 41 0D 0A 00       1551  MESSAGELEA DC.B    'LEA',CR,LF, 0
0000226C                          1552  
0000226C= 43 4C 52 2E 42 0D ...   1553  MESSAGECLRB DC.B    'CLR.B',CR,LF, 0 
00002274= 43 4C 52 2E 57 0D ...   1554  MESSAGECLRW DC.B    'CLR.W',CR,LF, 0
0000227C= 43 4C 52 2E 4C 0D ...   1555  MESSAGECLRL DC.B    'CLR.L',CR,LF, 0
00002284                          1556  
00002284= 41 44 44 51 2E 42 ...   1557  MESSAGEADDQB DC.B    'ADDQ.B',CR,LF, 0 
0000228D= 41 44 44 51 2E 57 ...   1558  MESSAGEADDQW DC.B    'ADDQ.W',CR,LF, 0
00002296= 41 44 44 51 2E 4C ...   1559  MESSAGEADDQL DC.B    'ADDQ.L',CR,LF, 0
0000229F                          1560  
0000229F= 43 4D 50 2E 42 0D ...   1561  MESSAGECMPB DC.B    'CMP.B',CR,LF, 0 
000022A7= 43 4D 50 2E 57 0D ...   1562  MESSAGECMPW DC.B    'CMP.W',CR,LF, 0
000022AF= 43 4D 50 2E 4C 0D ...   1563  MESSAGECMPL DC.B    'CMP.L',CR,LF, 0
000022B7                          1564  
000022B7= 53 55 42 2E 42 0D ...   1565  MESSAGESUBB DC.B    'SUB.B',CR,LF, 0 
000022BF= 53 55 42 2E 57 0D ...   1566  MESSAGESUBW DC.B    'SUB.W',CR,LF, 0
000022C7= 53 55 42 2E 4C 0D ...   1567  MESSAGESUBL DC.B    'SUB.L',CR,LF, 0
000022CF                          1568  
000022CF= 41 44 44 2E 42 0D ...   1569  MESSAGEADDB DC.B    'ADD.B',CR,LF, 0 
000022D7= 41 44 44 2E 57 0D ...   1570  MESSAGEADDW DC.B    'ADD.W',CR,LF, 0
000022DF= 41 44 44 2E 4C 0D ...   1571  MESSAGEADDL DC.B    'ADD.L',CR,LF, 0
000022E7                          1572  
000022E7= 41 44 44 41 2E 57 ...   1573  MESSAGEADDAW DC.B    'ADDA.W',CR,LF, 0
000022F0= 41 44 44 41 2E 4C ...   1574  MESSAGEADDAL DC.B    'ADDA.L',CR,LF, 0
000022F9                          1575  
000022F9= 4D 4F 56 45 51 2E ...   1576  MESSAGEMOVEQL DC.B    'MOVEQ.L',CR,LF, 0
00002303                          1577  
00002303= 41 4E 44 2E 42 0D ...   1578  MESSAGEANDB DC.B    'AND.B',CR,LF, 0 
0000230B= 41 4E 44 2E 57 0D ...   1579  MESSAGEANDW DC.B    'AND.W',CR,LF, 0
00002313= 41 4E 44 2E 4C 0D ...   1580  MESSAGEANDL DC.B    'AND.L',CR,LF, 0
0000231B                          1581  
0000231B= 4D 55 4C 53 2E 57 ...   1582  MESSAGEMULSW DC.B    'MULS.W',CR,LF, 0
00002324= 4D 55 4C 53 2E 4C ...   1583  MESSAGEMULSL DC.B    'MULS.L',CR,LF, 0
0000232D                          1584  
0000232D= 41 53 52 2E 42 0D ...   1585  MESSAGEASRB DC.B    'ASR.B',CR,LF, 0 
00002335= 41 53 52 2E 57 0D ...   1586  MESSAGEASRW DC.B    'ASR.W',CR,LF, 0
0000233D= 41 53 52 2E 4C 0D ...   1587  MESSAGEASRL DC.B    'ASR.L',CR,LF, 0
00002345                          1588  
00002345= 41 53 4C 2E 42 0D ...   1589  MESSAGEASLB DC.B    'ASL.B',CR,LF, 0 
0000234D= 41 53 4C 2E 57 0D ...   1590  MESSAGEASLW DC.B    'ASL.W',CR,LF, 0
00002355= 41 53 4C 2E 4C 0D ...   1591  MESSAGEASLL DC.B    'ASL.L',CR,LF, 0
0000235D                          1592  
0000235D= 52 4F 52 2E 42 0D ...   1593  MESSAGERORB DC.B    'ROR.B',CR,LF, 0 
00002365= 52 4F 52 2E 57 0D ...   1594  MESSAGERORW DC.B    'ROR.W',CR,LF, 0
0000236D= 52 4F 52 2E 4C 0D ...   1595  MESSAGERORL DC.B    'ROR.L',CR,LF, 0
00002375                          1596  
00002375= 52 4F 4C 2E 42 0D ...   1597  MESSAGEROLB DC.B    'ROL.B',CR,LF, 0 
0000237D= 52 4F 4C 2E 57 0D ...   1598  MESSAGEROLW DC.B    'ROL.W',CR,LF, 0
00002385= 52 4F 4C 2E 4C 0D ...   1599  MESSAGEROLL DC.B    'ROL.L',CR,LF, 0
0000238D                          1600  
0000238D= 4C 53 52 2E 42 0D ...   1601  MESSAGELSRB DC.B    'LSR.B',CR,LF, 0 
00002395= 4C 53 52 2E 57 0D ...   1602  MESSAGELSRW DC.B    'LSR.W',CR,LF, 0
0000239D= 4C 53 52 2E 4C 0D ...   1603  MESSAGELSRL DC.B    'LSR.L',CR,LF, 0
000023A5                          1604  
000023A5= 4C 53 4C 2E 42 0D ...   1605  MESSAGELSLB DC.B    'LSL.B',CR,LF, 0 
000023AD= 4C 53 4C 2E 57 0D ...   1606  MESSAGELSLW DC.B    'LSL.W',CR,LF, 0
000023B5= 4C 53 4C 2E 4C 0D ...   1607  MESSAGELSLL DC.B    'LSL.L',CR,LF, 0
000023BD                          1608  
000023BD= 4F 52 2E 42 0D 0A 00    1609  MESSAGEORB DC.B    'OR.B',CR,LF, 0 
000023C4= 4F 52 2E 57 0D 0A 00    1610  MESSAGEORW DC.B    'OR.W',CR,LF, 0
000023CB= 4F 52 2E 4C 0D 0A 00    1611  MESSAGEORL DC.B    'OR.L',CR,LF, 0
000023D2                          1612  
000023D2= 44 49 56 55 2E 57 ...   1613  MESSAGEDIVUW DC.B    'DIVU.W',CR,LF, 0
000023DB= 44 49 56 55 2E 4C ...   1614  MESSAGEDIVUL DC.B    'DIVU.L',CR,LF, 0
000023E4                          1615  
000023E4  FFFF FFFF               1616      SIMHALT             ; halt simulator
000023E8                          1617  
000023E8                          1618  * Put variables and constants here
000023E8                          1619  
000023E8                          1620      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDCODE000          1692
ADDCODE001          169E
ADDCODE010          16AA
ADDCODE011          16B6
ADDCODE100          16C2
ADDCODE101          16CE
ADDCODE110          16DA
ADDCODE111          16E6
ADDIBCODE00         1B20
ADDILCODE10         1B38
ADDIWCODE01         1B2C
ADDI_BORADDI_WORADDI_L  1AEA
ADDQCODE00          182E
ADDQCODE01          183A
ADDQCODE10          1846
ADDQ_BORADDQ_WORADDQ_L  17F2
ADD_BORADD_WORADD_L  1638
ANDCODE000          15E0
ANDCODE001          15EC
ANDCODE010          15F8
ANDCODE011          1604
ANDCODE100          1608
ANDCODE101          1614
ANDCODE110          1620
ANDCODE111          162C
AND_BORAND_WORAND_LORMULS_W  1586
ASLCODE00           12A0
ASLCODE01           12AC
ASLCODE10           12B8
ASL_ASR             14D8
ASL_ASRCODE0        150E
ASL_ASRCODE1        1518
ASRCODE00           1240
ASRCODE01           124C
ASRCODE10           1258
CLRCODE00           188E
CLRCODE01           189A
CLRCODE10           18A6
CMPCODE000          17CE
CMPCODE001          17DA
CMPCODE010          17E6
CMP_BORCMP_WORCMP_L  1792
CODE0000            107E
CODE0001            1084
CODE0010            1090
CODE0011            1096
CODE0100            109C
CODE0101            10A8
CODE0110            10B4
CODE0111            10B8
CODE1000            10C4
CODE1001            10D0
CODE1010            10DC
CODE1011            10E0
CODE1100            10EC
CODE1101            10F8
CODE1110            1104
CODE1111            1110
CR                  D
DONE                21EA
EXAMPLE             4C03
ISADDAL             1F2A
ISADDAW             1F14
ISADDB              1F40
ISADDIB             21D4
ISADDIL             21BE
ISADDIW             21A8
ISADDL              1F6C
ISADDQB             2006
ISADDQL             2032
ISADDQW             201C
ISADDW              1F56
ISANDB              1ED2
ISANDL              1EFE
ISANDW              1EE8
ISASLB              1D5C
ISASLL              1D88
ISASLW              1D72
ISASRB              1D1A
ISASRL              1D46
ISASRW              1D30
ISCLR               210E
ISCLRB              205E
ISCLRL              208A
ISCLRW              2074
ISCMPB              1FC4
ISCMPL              1FF0
ISCMPW              1FDA
ISDIVUL             1CAC
ISDIVUW             1CC2
ISJSR               20E2
ISLEA               20CC
ISLSLB              1DE0
ISLSLL              1E0C
ISLSLW              1DF6
ISLSRB              1D9E
ISLSRL              1DCA
ISLSRW              1DB4
ISMOVEAL            217C
ISMOVEAW            2150
ISMOVEB             2192
ISMOVEL             2166
ISMOVEML            20A0
ISMOVEMW            20B6
ISMOVEQL            2048
ISMOVEW             213A
ISMULSL             1EA6
ISMULSW             1EBC
ISNOP               2124
ISORB               1CD8
ISORL               1D04
ISORW               1CEE
ISROLB              1E64
ISROLL              1E90
ISROLW              1E7A
ISRORB              1E22
ISRORL              1E4E
ISRORW              1E38
ISRTS               20F8
ISSUBB              1F82
ISSUBL              1FAE
ISSUBW              1F98
JSRORCLRCODE0000    1962
JSRORCLRCODE0001    1966
JSRORCLRCODE0010    196A
JSRORCLRCODE0011    1974
JSRORCLRCODE0100    1978
JSRORCLRCODE0101    197C
JSRORCLRCODE0110    1980
JSRORCLRCODE0111    1984
JSRORCLRCODE1000    1988
JSRORCLRCODE1001    198C
JSRORCLRCODE1010    1990
JSRORCLRCODE1011    1994
JSRORCLRCODE1100    1998
JSRORCLRCODE1101    199C
JSRORCLRCODE1110    19A0
JSRORCLRCODE1111    19AC
LF                  A
LOTSCODE0000        1A82
LOTSCODE0001        1A8C
LOTSCODE0010        1A90
LOTSCODE0011        1A9A
LOTSCODE0100        1A9E
LOTSCODE0101        1AA2
LOTSCODE0110        1AA6
LOTSCODE0111        1AB2
LOTSCODE1000        1AB6
LOTSCODE1001        1AC0
LOTSCODE1010        1AC4
LOTSCODE1011        1ACE
LOTSCODE1100        1AD2
LOTSCODE1101        1AD6
LOTSCODE1110        1ADA
LOTSCODE1111        1AE6
LSLCODE00           1360
LSLCODE01           136C
LSLCODE10           1378
LSL_LSR             148E
LSL_LSRCODE0        14C4
LSL_LSRCODE1        14CE
LSRCODE00           1300
LSRCODE01           130C
LSRCODE10           1318
MESSAGEADDAL        22F0
MESSAGEADDAW        22E7
MESSAGEADDB         22CF
MESSAGEADDIB        2223
MESSAGEADDIL        221A
MESSAGEADDIW        2211
MESSAGEADDL         22DF
MESSAGEADDQB        2284
MESSAGEADDQL        2296
MESSAGEADDQW        228D
MESSAGEADDW         22D7
MESSAGEANDB         2303
MESSAGEANDL         2313
MESSAGEANDW         230B
MESSAGEASLB         2345
MESSAGEASLL         2355
MESSAGEASLW         234D
MESSAGEASRB         232D
MESSAGEASRL         233D
MESSAGEASRW         2335
MESSAGECLR          225A
MESSAGECLRB         226C
MESSAGECLRL         227C
MESSAGECLRW         2274
MESSAGECMPB         229F
MESSAGECMPL         22AF
MESSAGECMPW         22A7
MESSAGEDIVUL        23DB
MESSAGEDIVUW        23D2
MESSAGEJSR          2254
MESSAGELEA          2266
MESSAGELSLB         23A5
MESSAGELSLL         23B5
MESSAGELSLW         23AD
MESSAGELSRB         238D
MESSAGELSRL         239D
MESSAGELSRW         2395
MESSAGEMOVEAL       222C
MESSAGEMOVEAW       2236
MESSAGEMOVEB        2208
MESSAGEMOVEL        21FF
MESSAGEMOVEML       2240
MESSAGEMOVEMW       224A
MESSAGEMOVEQL       22F9
MESSAGEMOVEW        21F6
MESSAGEMULSL        2324
MESSAGEMULSW        231B
MESSAGENOP          21F0
MESSAGEORB          23BD
MESSAGEORL          23CB
MESSAGEORW          23C4
MESSAGEROLB         2375
MESSAGEROLL         2385
MESSAGEROLW         237D
MESSAGERORB         235D
MESSAGERORL         236D
MESSAGERORW         2365
MESSAGERTS          2260
MESSAGESUBB         22B7
MESSAGESUBL         22C7
MESSAGESUBW         22BF
MOVEACODE001        1BA4
MOVEAWCODE001       1C58
MOVEA_LORMOVE_L     1B44
MOVEA_WORMOVE_W     1BF8
MOVECODE000         1B98
MOVECODE010         1BB0
MOVECODE011         1BBC
MOVECODE100         1BC8
MOVECODE101         1BD4
MOVECODE110         1BE0
MOVECODE111         1BEC
MOVEMCODE0          19E6
MOVEMCODE1          19F2
MOVEWCODE000        1C4C
MOVEWCODE010        1C64
MOVEWCODE011        1C70
MOVEWCODE100        1C7C
MOVEWCODE101        1C88
MOVEWCODE110        1C94
MOVEWCODE111        1CA0
MULSLORDIVUL        1114
MULSLORDIVULCODE0   1144
MULSLORDIVULCODE1   1150
NOPCOMMAND          1956
NOPORCLRORRTSORJSR  18B2
NOP_MOVEM_LEA_JSR_CLR_RTS  19FE
OR_BOROR_WOROR_LORDIVU  115C
OR_DIVUCODE000      11B0
OR_DIVUCODE001      11BC
OR_DIVUCODE010      11C8
OR_DIVUCODE011      11D4
OR_DIVUCODE100      11E0
OR_DIVUCODE101      11EC
OR_DIVUCODE110      11F8
ROD_LSD_ASD         1522
ROD_LSD_ASDCODE00   1564
ROD_LSD_ASDCODE01   156E
ROD_LSD_ASDCODE10   1578
ROD_LSD_ASDCODE11   157C
ROLCODE00           13C0
ROLCODE01           13CC
ROLCODE10           13D8
ROL_ROR             1444
ROL_RORCODE0        147A
ROL_RORCODE1        1484
RORCODE00           1420
RORCODE01           142C
RORCODE10           1438
RTSCOMMAND          194A
SHIFT               C
SOMEASL             1264
SOMEASR             1204
SOMECLR             1852
SOMELSL             1324
SOMELSR             12C4
SOMEMOVEM           19B0
SOMEROL             1384
SOMEROR             13E4
STACK               7000
START               1000
SUBCODE000          1746
SUBCODE001          1752
SUBCODE010          175E
SUBCODE011          176A
SUBCODE100          176E
SUBCODE101          177A
SUBCODE110          1786
SUB_BORSUB_WORSUB_L  16F2
TABLE               101E
TABLEADDI_BORADDI_WORADDI_L  1B0E
TABLEADDQ_BORADDQ_WORADDQ_L  181C
TABLEADD_BORADD_WORADD_L  1662
TABLEAND_BORAND_WORAND_LORMULS_W  15B0
TABLEASL_ASR        1502
TABLECMP_BORCMP_WORCMP_L  17BC
TABLELSL_LSR        14B8
TABLEMOVEA_LORMOVE_L  1B68
TABLEMOVEA_WORMOVE_W  1C1C
TABLEMULSLORDIVUL   1138
TABLENOPORCLRORRTSORJSR  18EA
TABLENOP_MOVEM_LEA_JSR_CLR_RTS  1A28
TABLEOR_BOROR_WOROR_LORDIVU  1186
TABLEROD_LSD_ASD    154C
TABLEROL_ROR        146E
TABLESOMEASL        128E
TABLESOMEASR        122E
TABLESOMECLR        187C
TABLESOMELSL        134E
TABLESOMELSR        12EE
TABLESOMEMOVEM      19DA
TABLESOMEROL        13AE
TABLESOMEROR        140E
TABLESUB_BORSUB_WORSUB_L  171C
