00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 7:47:22 PM

00000000                             1  ******************************************************************************
00000000                             2  * Title      : Ascii to Hex
00000000                             3  * Written by : Brandon Authier
00000000                             4  * Date       : 14 Apr 2016
00000000                             5  * Description: A program that takes a string and turns it into hex.
00000000                             6  *
00000000                             7  ******************************************************************************
00000000                             8  
00000000                             9  ******************************************************************************
00000000                            10  *           DEFINITIONS                                                      *
00000000                            11  ******************************************************************************
00000000  =00005060                 12  ASCIIVALUE  EQU   $5060
00000000  =00005070                 13  BUFFER      EQU   $5070             * Buffer address for string
00000000                            14  
00000000  =F0000000                 15  MASK8       EQU   %11110000000000000000000000000000
00000000  =0F000000                 16  MASK7       EQU   %00001111000000000000000000000000
00000000  =00F00000                 17  MASK6       EQU   %00000000111100000000000000000000
00000000  =000F0000                 18  MASK5       EQU   %00000000000011110000000000000000
00000000  =0000F000                 19  MASK4       EQU   %00000000000000001111000000000000
00000000  =00000F00                 20  MASK3       EQU   %00000000000000000000111100000000
00000000  =000000F0                 21  MASK2       EQU   %00000000000000000000000011110000
00000000  =0000000F                 22  MASK1       EQU   %00000000000000000000000000001111
00000000                            23  
00000000  =0000000D                 24  CR          EQU   $0D
00000000  =0000000A                 25  LF          EQU   $0A 
00001000                            26              ORG   $1000
00001000                            27           
00001000                            28  ******************************************************************************
00001000                            29  *           BEGIN CODE                                                       *
00001000                            30  ******************************************************************************
00001000                            31  
00001000                            32  *---------- START ------------------------------------------------------------
00001000                            33  * Begins program's logical flow. Similar to main in C/C++
00001000                            34  *-----------------------------------------------------------------------------
00001000                            35  START
00001000                            36      *MOVE.L      #$AB,D6             * Move BYTE parameter in for parsing 
00001000                            37      *MOVE.L      #$ABCD,D6             * Move WORD parameter in for parsing
00001000  2C3C ABCD1234             38      MOVE.L      #$ABCD1234,D6             * Move LONG parameter in for parsing
00001006                            39         
00001006                            40      *MOVE.L      #2,D7               * Move in length
00001006                            41      *MOVE.L      #4,D7               * Move in length
00001006  7E08                      42      MOVE.L      #8,D7               * Move in length
00001008                            43  
00001008  45F8 5070                 44      LEA         BUFFER,A2           * Set A2 = BUFFER
0000100C                            45      
0000100C                            46  CONVERT_TO_ASCII
0000100C  6100 00FA                 47      BSR.W       LONG_MASK
00001010  6100 0152                 48      BSR.W       WORD_MASK
00001014  6100 017C                 49      BSR.L       BYTE_MASK
00001018                            50  
00001018  4EB9 000011BE             51      JSR         PRINT_ASCIIVALUE    * Display hex value
0000101E                            52      
0000101E  FFFF FFFF                 53      SIMHALT                         * Halt simulator
00001022                            54      
00001022                            55  *---------- END - START ------------------------------------------------------
00001022                            56  
00001022                            57  
00001022                            58  *---------- HEX_TO_ASCII -----------------------------------------------------
00001022                            59  * Checks to see if each character is hexadecimal
00001022                            60  *-----------------------------------------------------------------------------
00001022                            61  HEX_TO_ASCII         
00001022  0C03 0000                 62      CMPI.B      #$0,D3              * Is Char equal to 0?
00001026  6700 0080                 63      BEQ         ASCIIZERO            
0000102A  0C03 0001                 64      CMPI.B      #$1,D3              * Is Hex equal to 1?
0000102E  6700 007E                 65      BEQ         ASCIIONE                   
00001032  0C03 0002                 66      CMPI.B      #$2,D3              * Is Hex equal to 2?
00001036  6700 007C                 67      BEQ         ASCIITWO    
0000103A  0C03 0003                 68      CMPI.B      #$3,D3              * Is Hex equal to 3?
0000103E  6700 007A                 69      BEQ         ASCIITHREE    
00001042  0C03 0004                 70      CMPI.B      #$4,D3              * Is Hex equal to 4?
00001046  6700 0078                 71      BEQ         ASCIIFOUR    
0000104A  0C03 0005                 72      CMPI.B      #$5,D3              * Is Hex equal to 5?
0000104E  6700 0076                 73      BEQ         ASCIIFIVE    
00001052  0C03 0006                 74      CMPI.B      #$6,D3              * Is Hex equal to 6?
00001056  6700 0074                 75      BEQ         ASCIISIX
0000105A  0C03 0007                 76      CMPI.B      #$7,D3              * Is Hex equal to 7?
0000105E  6700 0072                 77      BEQ         ASCIISEVEN
00001062  0C03 0008                 78      CMPI.B      #$8,D3              * Is Hex equal to 8?
00001066  6700 0070                 79      BEQ         ASCIIEIGHT
0000106A  0C03 0009                 80      CMPI.B      #$9,D3              * Is Hex equal to 9?
0000106E  6700 006E                 81      BEQ         ASCIININE
00001072  0C03 000A                 82      CMPI.B      #$A,D3              * Is Hex equal to A?
00001076  6700 006C                 83      BEQ         ASCIIA                      
0000107A  0C03 000B                 84      CMPI.B      #$B,D3              * Is Hex equal to B?
0000107E  6700 006A                 85      BEQ         ASCIIB
00001082  0C03 000C                 86      CMPI.B      #$C,D3              * Is Hex equal to C?
00001086  6700 0068                 87      BEQ         ASCIIC
0000108A  0C03 000D                 88      CMPI.B      #$D,D3              * Is Hex equal to D?
0000108E  6700 0066                 89      BEQ         ASCIID
00001092  0C03 000E                 90      CMPI.B      #$E,D3              * Is Hex equal to E?
00001096  6700 0064                 91      BEQ         ASCIIE
0000109A  0C03 000F                 92      CMPI.B      #$F,D3              * Is Hex equal to F?
0000109E  6700 0062                 93      BEQ         ASCIIF
000010A2                            94      
000010A2  4E75                      95      RTS
000010A4                            96      
000010A4                            97  FOUND_ASCII  
000010A4  5307                      98      SUBI.B      #1,D7               * Decrease string by one
000010A6  4E75                      99      RTS                             * Then, return to main
000010A8                           100  
000010A8                           101  ASCIIZERO
000010A8  163C 0030                102      MOVE.B       #'0',D3          * Add value
000010AC  60F6                     103      BRA         FOUND_ASCII         * Mark hexflag true and proceed    
000010AE                           104  ASCIIONE
000010AE  163C 0031                105      MOVE.B       #'1',D3          * Add value
000010B2  60F0                     106      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010B4                           107  ASCIITWO
000010B4  163C 0032                108      MOVE.B       #'2',D3          * Add value
000010B8  60EA                     109      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010BA                           110  ASCIITHREE
000010BA  163C 0033                111      MOVE.B      #'3',D3          * Add value
000010BE  60E4                     112      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010C0                           113  ASCIIFOUR
000010C0  163C 0034                114      MOVE.B       #'4',D3          * Add value
000010C4  60DE                     115      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010C6                           116  ASCIIFIVE
000010C6  163C 0035                117      MOVE.B      #'5',D3          * Add value
000010CA  60D8                     118      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010CC                           119  ASCIISIX
000010CC  163C 0036                120      MOVE.B       #'6',D3          * Add value
000010D0  60D2                     121      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010D2                           122  ASCIISEVEN
000010D2  163C 0037                123      MOVE.B      #'7',D3          * Add value
000010D6  60CC                     124      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010D8                           125  ASCIIEIGHT
000010D8  163C 0038                126      MOVE.B      #'8',D3          * Add value
000010DC  60C6                     127      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010DE                           128  ASCIININE
000010DE  163C 0039                129      MOVE.B      #'9',D3        * Add value
000010E2  60C0                     130      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010E4                           131  ASCIIA
000010E4  163C 0041                132      MOVE.B      #'A',D3
000010E8  60BA                     133      BRA         FOUND_ASCII   * Mark hexflag true and proceed    
000010EA                           134  ASCIIB
000010EA  163C 0042                135      MOVE.B      #'B',D3          * Add value
000010EE  60B4                     136      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010F0                           137  ASCIIC
000010F0  163C 0043                138      MOVE.B      #'C',D3          * Add value
000010F4  60AE                     139      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010F6                           140  ASCIID
000010F6  163C 0044                141      MOVE.B      #'D',D3          * Add value
000010FA  60A8                     142      BRA         FOUND_ASCII   * Mark hexflag true and proceed
000010FC                           143  ASCIIE
000010FC  163C 0045                144      MOVE.B      #'E',D3          * Add value
00001100  60A2                     145      BRA         FOUND_ASCII   * Mark hexflag true and proceed
00001102                           146  ASCIIF
00001102  163C 0046                147      MOVE.B      #'F',D3          * Add value
00001106  609C                     148      BRA         FOUND_ASCII   * Mark hexflag true and proceed
00001108                           149          
00001108                           150  *---------- END - HEX_TO_ASCII -----------------------------------------------
00001108                           151  
00001108                           152  
00001108                           153  *---------- LONG_MASK --------------------------------------------------------
00001108                           154  * Perform the long mask and proceed
00001108                           155  *-----------------------------------------------------------------------------
00001108                           156  LONG_MASK
00001108  0C07 0008                157      CMPI.B      #8,D7
0000110C  6D00 0054                158      BLT         SKIP_LONG
00001110                           159      
00001110  2606                     160      MOVE.L      D6,D3               * Reset D3 for next 4 bits
00001112  0283 F0000000            161      ANDI.L      #MASK8,D3           * Mask everything but the 4 bits wanted
00001118  E08B                     162      LSR.L       #$8,D3              * Shift 8 bits
0000111A  E08B                     163      LSR.L       #$8,D3              * Shift 8 bits
0000111C  E08B                     164      LSR.L       #$8,D3              * Shift 8 bits
0000111E  E88B                     165      LSR.L       #$4,D3              * Shift 4 bits
00001120  6100 FF00                166      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
00001124  14C3                     167      MOVE.B      D3,(A2)+            * 
00001126                           168      
00001126  2606                     169      MOVE.L      D6,D3               * Reset D3 for next 4 bits
00001128  0283 0F000000            170      ANDI.L      #MASK7,D3           * Mask everything but the 4 bits wanted
0000112E  E08B                     171      LSR.L       #$8,D3              * Shift 8 bits
00001130  E08B                     172      LSR.L       #$8,D3              * Shift 8 bits
00001132  E08B                     173      LSR.L       #$8,D3              * Shift 8 bits
00001134  6100 FEEC                174      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
00001138  14C3                     175      MOVE.B      D3,(A2)+            * 
0000113A                           176      
0000113A  2606                     177      MOVE.L      D6,D3               * Reset D3 for next 4 bits
0000113C  0283 00F00000            178      ANDI.L      #MASK6,D3           * Mask everything but the 4 bits wanted
00001142  E08B                     179      LSR.L       #$8,D3              * Shift 8 bits
00001144  E08B                     180      LSR.L       #$8,D3              * Shift 8 bits
00001146  E88B                     181      LSR.L       #$4,D3              * Shift 4 bits
00001148  6100 FED8                182      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
0000114C  14C3                     183      MOVE.B      D3,(A2)+            *
0000114E                           184  
0000114E  2606                     185      MOVE.L      D6,D3               * Reset D3 for next 4 bits
00001150  0283 000F0000            186      ANDI.L      #MASK5,D3           * Mask everything but the 4 bits wanted
00001156  E08B                     187      LSR.L       #$8,D3              * Shift 8 bits
00001158  E08B                     188      LSR.L       #$8,D3              * Shift 8 bits
0000115A  6100 FEC6                189      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
0000115E  14C3                     190      MOVE.B      D3,(A2)+            *
00001160                           191      
00001160  4E75                     192      RTS
00001162                           193  
00001162                           194  SKIP_LONG
00001162  4E75                     195      RTS    
00001164                           196      
00001164                           197  *---------- END - LONG_MASK --------------------------------------------------
00001164                           198  
00001164                           199  
00001164                           200  *---------- WORD_MASK --------------------------------------------------------
00001164                           201  * Perform the word mask and proceed
00001164                           202  *-----------------------------------------------------------------------------
00001164                           203  WORD_MASK
00001164  0C07 0004                204      CMPI.B      #4,D7
00001168  6D00 0026                205      BLT         SKIP_WORD
0000116C                           206   
0000116C  2606                     207      MOVE.L      D6,D3               * Reset D3 for next 4 bits
0000116E  0283 0000F000            208      ANDI.L      #MASK4,D3           * Mask everything but the 4 bits wanted
00001174  E04B                     209      LSR.W       #$8,D3              * Shift 4 bits
00001176  E84B                     210      LSR.W       #$4,D3              * Shift 4 bits
00001178  6100 FEA8                211      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
0000117C  14C3                     212      MOVE.B      D3,(A2)+            * 
0000117E                           213      
0000117E  2606                     214      MOVE.L      D6,D3               * Reset D3 for next 4 bits
00001180  0283 00000F00            215      ANDI.L      #MASK3,D3           * Mask everything but the 4 bits wanted
00001186  E04B                     216      LSR.W       #$8,D3              * Shift 8 bits
00001188  6100 FE98                217      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
0000118C  14C3                     218      MOVE.B      D3,(A2)+            *
0000118E                           219      
0000118E  4E75                     220      RTS
00001190                           221  
00001190                           222  SKIP_WORD
00001190  4E75                     223      RTS
00001192                           224      
00001192                           225  *---------- END - WORD_MASK --------------------------------------------------
00001192                           226  
00001192                           227  
00001192                           228  *---------- BYTE_MASK --------------------------------------------------------
00001192                           229  * Perform the byte mask and proceed
00001192                           230  *-----------------------------------------------------------------------------
00001192                           231  BYTE_MASK
00001192  2606                     232      MOVE.L      D6,D3               * Reset D3 for next 4 bits
00001194  0283 000000F0            233      ANDI.L      #MASK2,D3           * Mask everything but the 4 bits wanted
0000119A  E80B                     234      LSR.B       #$4,D3              * Shift 4 bits
0000119C  6100 FE84                235      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
000011A0  14C3                     236      MOVE.B      D3,(A2)+            * 
000011A2                           237      
000011A2  2606                     238      MOVE.L      D6,D3               * Reset D3 for next 4 bits
000011A4  0283 0000000F            239      ANDI.L      #MASK1,D3           * Mask everything but the 4 bits wanted
000011AA  6100 FE76                240      BSR.W       HEX_TO_ASCII        * Store hex as ascii value in A0
000011AE  14C3                     241      MOVE.B      D3,(A2)+            *
000011B0                           242      
000011B0  14FC 000D                243      MOVE.B      #CR,(A2)+           * Move carriage return into memory
000011B4  14FC 000A                244      MOVE.B      #LF,(A2)+           * Move line feed into memory
000011B8  14FC 0000                245      MOVE.B      #$00,(A2)+          * Move string terminator into memory
000011BC  4E75                     246      RTS
000011BE                           247      
000011BE                           248  *---------- END - BYTE_MASK --------------------------------------------------
000011BE                           249  
000011BE                           250  
000011BE                           251  *---------- PRINT_ASCIIVALUE -------------------------------------------------
000011BE                           252  * Prints out to display whatever is in A1
000011BE                           253  *-----------------------------------------------------------------------------
000011BE                           254  PRINT_ASCIIVALUE
000011BE  43F9 000011D6            255      LEA         ASCIIPROMPT,A1      * Load message in A1 for display
000011C4  103C 000E                256      MOVE.B      #14,D0              * Moves the Task 14 into D0
000011C8  4E4F                     257      TRAP        #15                 * Displays contents of A1
000011CA                           258      
000011CA  43F8 5070                259      LEA         BUFFER,A1           * Load message in A1 for display
000011CE  103C 000E                260      MOVE.B      #14,D0              * Moves the Task 14 into D0
000011D2  4E4F                     261      TRAP        #15                 * Displays contents of A1
000011D4                           262      
000011D4  4E75                     263      RTS                             * Return from subroutine                                  
000011D6                           264  
000011D6                           265  *---------- END - PRINT_ASCIIVALUE -------------------------------------------
000011D6                           266  
000011D6                           267  
000011D6                           268  ******************************************************************************
000011D6                           269  *           VARIABLES AND CONSTANTS                                          *
000011D6                           270  ******************************************************************************
000011D6                           271  
000011D6= 54 68 65 20 41 53 ...    272  ASCIIPROMPT     DC.B  'The ASCII value is: 0x',0
000011ED                           273  
000011ED                           274                  END   START         * Last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCIIA              10E4
ASCIIB              10EA
ASCIIC              10F0
ASCIID              10F6
ASCIIE              10FC
ASCIIEIGHT          10D8
ASCIIF              1102
ASCIIFIVE           10C6
ASCIIFOUR           10C0
ASCIININE           10DE
ASCIIONE            10AE
ASCIIPROMPT         11D6
ASCIISEVEN          10D2
ASCIISIX            10CC
ASCIITHREE          10BA
ASCIITWO            10B4
ASCIIVALUE          5060
ASCIIZERO           10A8
BUFFER              5070
BYTE_MASK           1192
CONVERT_TO_ASCII    100C
CR                  D
FOUND_ASCII         10A4
HEX_TO_ASCII        1022
LF                  A
LONG_MASK           1108
MASK1               F
MASK2               F0
MASK3               F00
MASK4               F000
MASK5               F0000
MASK6               F00000
MASK7               F000000
MASK8               F0000000
PRINT_ASCIIVALUE    11BE
SKIP_LONG           1162
SKIP_WORD           1190
START               1000
WORD_MASK           1164
